{
  "version": 3,
  "sources": ["../../engine.io-parser/build/esm/commons.js", "../../engine.io-parser/build/esm/encodePacket.browser.js", "../../engine.io-parser/build/esm/contrib/base64-arraybuffer.js", "../../engine.io-parser/build/esm/decodePacket.browser.js", "../../engine.io-parser/build/esm/index.js", "../../@socket.io/component-emitter/lib/esm/index.js", "../../engine.io-client/build/esm/globals.js", "../../engine.io-client/build/esm/util.js", "../../engine.io-client/build/esm/contrib/parseqs.js", "../../engine.io-client/build/esm/transport.js", "../../engine.io-client/build/esm/transports/polling.js", "../../engine.io-client/build/esm/contrib/has-cors.js", "../../engine.io-client/build/esm/transports/polling-xhr.js", "../../engine.io-client/build/esm/transports/websocket.js", "../../engine.io-client/build/esm/transports/webtransport.js", "../../engine.io-client/build/esm/transports/index.js", "../../engine.io-client/build/esm/contrib/parseuri.js", "../../engine.io-client/build/esm/socket.js", "../../engine.io-client/build/esm/index.js", "../../socket.io-client/build/esm/url.js", "../../socket.io-parser/build/esm/index.js", "../../socket.io-parser/build/esm/is-binary.js", "../../socket.io-parser/build/esm/binary.js", "../../socket.io-client/build/esm/on.js", "../../socket.io-client/build/esm/socket.js", "../../socket.io-client/build/esm/contrib/backo2.js", "../../socket.io-client/build/esm/manager.js", "../../socket.io-client/build/esm/index.js", "../../@bsv/authsocket-client/src/SocketClientTransport.ts", "../../@bsv/authsocket-client/src/AuthSocketClient.ts", "../../@bsv/p2p/src/Utils/logger.ts", "../../@bsv/p2p/src/MessageBoxClient.ts", "../../@bsv/p2p/src/PeerPayClient.ts"],
  "sourcesContent": ["const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach((key) => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n", "import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n", "// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n", "import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n", "import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET, } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload, };\n", "/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n", "export const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return (cb) => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\nexport const defaultBinaryType = \"arraybuffer\";\nexport function createCookieJar() { }\n", "import { globalThisShim as globalThis } from \"./globals.node.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = globalThis.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = globalThis.clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = globalThis.setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = globalThis.clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n/**\n * Generates a random 8-characters string.\n */\nexport function randomString() {\n    return (Date.now().toString(36).substring(3) +\n        Math.random().toString(36).substring(2, 5));\n}\n", "// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n", "import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nexport class TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n", "// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n", "import { Polling } from \"./polling.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globals.node.js\";\nimport { hasCORS } from \"../contrib/has-cors.js\";\nfunction empty() { }\nexport class BaseXHR extends Polling {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    constructor(opts) {\n        super(opts);\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n        }\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data,\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    constructor(createRequest, uri, opts) {\n        super();\n        this.createRequest = createRequest;\n        installTimerFunctions(this, opts);\n        this._opts = opts;\n        this._method = opts.method || \"GET\";\n        this._uri = uri;\n        this._data = undefined !== opts.data ? opts.data : null;\n        this._create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    _create() {\n        var _a;\n        const opts = pick(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this._opts.xd;\n        const xhr = (this._xhr = this.createRequest(opts));\n        try {\n            xhr.open(this._method, this._uri, true);\n            try {\n                if (this._opts.extraHeaders) {\n                    // @ts-ignore\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this._opts.extraHeaders) {\n                        if (this._opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this._method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this._opts.withCredentials;\n            }\n            if (this._opts.requestTimeout) {\n                xhr.timeout = this._opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                var _a;\n                if (xhr.readyState === 3) {\n                    (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(\n                    // @ts-ignore\n                    xhr.getResponseHeader(\"set-cookie\"));\n                }\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this._onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this._data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this._onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this._index = Request.requestsCount++;\n            Request.requests[this._index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */\n    _onError(err) {\n        this.emitReserved(\"error\", err, this._xhr);\n        this._cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */\n    _cleanup(fromError) {\n        if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n            return;\n        }\n        this._xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this._xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this._index];\n        }\n        this._xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */\n    _onLoad() {\n        const data = this._xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this._cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */\n    abort() {\n        this._cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\nconst hasXHR2 = (function () {\n    const xhr = newRequest({\n        xdomain: false,\n    });\n    return xhr && xhr.responseType !== null;\n})();\n/**\n * HTTP long-polling based on the built-in `XMLHttpRequest` object.\n *\n * Usage: browser\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\nexport class XHR extends BaseXHR {\n    constructor(opts) {\n        super(opts);\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd }, this.opts);\n        return new Request(newRequest, this.uri(), opts);\n    }\n}\nfunction newRequest(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { pick, randomString } from \"../util.js\";\nimport { encodePacket } from \"engine.io-parser\";\nimport { globalThisShim as globalThis, nextTick } from \"../globals.node.js\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class BaseWS extends Transport {\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws = this.createSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    this.doWrite(packet, data);\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.onerror = () => { };\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nconst WebSocketCtor = globalThis.WebSocket || globalThis.MozWebSocket;\n/**\n * WebSocket transport based on the built-in `WebSocket` object.\n *\n * Usage: browser, Node.js (since v21), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * @see https://caniuse.com/mdn-api_websocket\n * @see https://nodejs.org/api/globals.html#websocket\n */\nexport class WS extends BaseWS {\n    createSocket(uri, protocols, opts) {\n        return !isReactNative\n            ? protocols\n                ? new WebSocketCtor(uri, protocols)\n                : new WebSocketCtor(uri)\n            : new WebSocketCtor(uri, protocols, opts);\n    }\n    doWrite(_packet, data) {\n        this.ws.send(data);\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport { nextTick } from \"../globals.node.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        try {\n            // @ts-ignore\n            this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this._transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this._transport.ready.then(() => {\n            this._transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this._writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this._writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this._writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n", "import { XHR } from \"./polling-xhr.node.js\";\nimport { WS } from \"./websocket.node.js\";\nimport { WT } from \"./webtransport.js\";\nexport const transports = {\n    websocket: WS,\n    webtransport: WT,\n    polling: XHR,\n};\n", "// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    if (str.length > 8000) {\n        throw \"URI too long\";\n    }\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n", "import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n", "import { Socket } from \"./socket.js\";\nexport { Socket };\nexport { SocketWithoutUpgrade, SocketWithUpgrade, } from \"./socket.js\";\nexport const protocol = Socket.protocol;\nexport { Transport, TransportError } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\nexport { parse } from \"./contrib/parseuri.js\";\nexport { nextTick } from \"./globals.node.js\";\nexport { Fetch } from \"./transports/polling-fetch.js\";\nexport { XHR as NodeXHR } from \"./transports/polling-xhr.node.js\";\nexport { XHR } from \"./transports/polling-xhr.js\";\nexport { WS as NodeWebSocket } from \"./transports/websocket.node.js\";\nexport { WS as WebSocket } from \"./transports/websocket.js\";\nexport { WT as WebTransport } from \"./transports/webtransport.js\";\n", "import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n", "import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n", "const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n", "import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n", "export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n", "import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n", "/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n", "import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n", "import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\nexport { Fetch, NodeXHR, XHR, NodeWebSocket, WebSocket, WebTransport, } from \"engine.io-client\";\n", "/**\n * A client-side transport for BRC-103 using Socket.IO client.\n *\n * The BRC-103 `Peer` uses `transport.send()` to send an `AuthMessage`,\n * which is forwarded via `this.socket.emit('authMessage', message)`.\n *\n * This class also listens for `'authMessage'` events from the server.\n */\nimport { Socket as IoClientSocket } from 'socket.io-client'\nimport { AuthMessage, Transport } from '@bsv/sdk'\n\nexport class SocketClientTransport implements Transport {\n  private onDataCallback?: (message: AuthMessage) => Promise<void>\n\n  constructor(private socket: IoClientSocket) {\n    // Subscribe to the 'authMessage' event from the server\n    this.socket.on('authMessage', async (msg: AuthMessage) => {\n      if (this.onDataCallback) {\n        await this.onDataCallback(msg)\n      }\n    })\n  }\n\n  /**\n   * Send an AuthMessage to the server.\n   */\n  async send(message: AuthMessage): Promise<void> {\n    this.socket.emit('authMessage', message)\n  }\n\n  /**\n   * Register a callback to handle incoming AuthMessages.\n   */\n  async onData(callback: (message: AuthMessage) => Promise<void>): Promise<void> {\n    this.onDataCallback = callback\n  }\n}\n", "import { io as realIo, Socket as IoClientSocket, ManagerOptions, SocketOptions } from 'socket.io-client'\nimport { RequestedCertificateSet, SessionManager, Peer, WalletInterface, Utils } from '@bsv/sdk'\nimport { SocketClientTransport } from './SocketClientTransport.js'\n\n/**\n * Internal class that wraps a Socket.IO client connection with BRC-103 mutual authentication,\n * enabling secure and identity-aware communication with a server.\n */\nclass AuthSocketClientImpl {\n  public connected = false\n  public id: string = ''\n  public serverIdentityKey: string | undefined\n  private eventCallbacks = new Map<string, Array<(data: any) => void>>()\n\n  /**\n   * Creates an instance of AuthSocketClient.\n   *\n   * @param ioSocket - The underlying Socket.IO client socket instance. \n   * @param peer - The BRC-103 Peer instance responsible for managing authenticated \n   *               communication, including message signing and verification.\n   */\n  constructor(\n    private ioSocket: IoClientSocket,\n    private peer: Peer\n  ) {\n    // Listen for 'connect' and 'disconnect' from underlying Socket.IO\n    this.ioSocket.on('connect', () => {\n      this.connected = true\n      this.id = this.ioSocket.id || ''\n      // Re-dispatch to dev if they've called \"socket.on('connect', ...)\"\n      this.fireEventCallbacks('connect')\n    })\n\n    this.ioSocket.on('disconnect', (reason) => {\n      this.connected = false\n      // Re-dispatch\n      this.fireEventCallbacks('disconnect', reason)\n    })\n\n    // Also listen for BRC-103 \"general\" messages\n    // We'll rely on peer.listenForGeneralMessages\n    this.peer.listenForGeneralMessages((senderKey, payload) => {\n      this.serverIdentityKey = senderKey\n      const { eventName, data } = this.decodeEventPayload(payload)\n      this.fireEventCallbacks(eventName, data)\n    })\n  }\n\n  on(eventName: string, callback: (data?: any) => void): this {\n    let arr = this.eventCallbacks.get(eventName)\n    if (!arr) {\n      arr = []\n      this.eventCallbacks.set(eventName, arr)\n    }\n    arr.push(callback)\n    return this\n  }\n\n  emit(eventName: string, data: any): this {\n    // We sign a BRC-103 \"general\" message and send to the server\n    // via peer.toPeer\n    const encoded = this.encodeEventPayload(eventName, data)\n    this.peer.toPeer(encoded, this.serverIdentityKey).catch(err => {\n      console.error(`BRC103IoClientSocket emit error for event \"${eventName}\":`, err)\n    })\n    return this\n  }\n\n  disconnect(): void {\n    this.serverIdentityKey = undefined\n    this.ioSocket.disconnect()\n  }\n\n  private fireEventCallbacks(eventName: string, data?: any) {\n    const cbs = this.eventCallbacks.get(eventName)\n    if (!cbs) return\n    for (const cb of cbs) {\n      cb(data)\n    }\n  }\n\n  private encodeEventPayload(eventName: string, data: any): number[] {\n    const obj = { eventName, data }\n    return Utils.toArray(JSON.stringify(obj), 'utf8')\n  }\n\n  private decodeEventPayload(payload: number[]): { eventName: string, data: any } {\n    try {\n      const str = Utils.toUTF8(payload)\n      return JSON.parse(str)\n    } catch {\n      return { eventName: '_unknown', data: undefined }\n    }\n  }\n}\n\n/**\n * Factory function for creating a new AuthSocketClientImpl instance.\n * \n * @param url  - The server URL\n * @param opts - Contains wallet, requested certificates, and other optional settings\n */\nexport function AuthSocketClient(\n  url: string,\n  opts: {\n    wallet: WalletInterface\n    requestedCertificates?: RequestedCertificateSet\n    sessionManager?: SessionManager\n    managerOptions?: Partial<ManagerOptions & SocketOptions>\n  }\n): AuthSocketClientImpl {\n  // 1) Create real socket.io-client connection\n  const socket = realIo(url, opts.managerOptions)\n\n  // 2) Create a BRC-103 transport for the new socket\n  const transport = new SocketClientTransport(socket)\n\n  // 3) Create a Peer\n  const peer = new Peer(\n    opts.wallet,\n    transport,\n    opts.requestedCertificates,\n    opts.sessionManager\n  )\n\n  // 4) Return our new AuthSocketClientImpl \n  return new AuthSocketClientImpl(socket, peer)\n}", "export class Logger {\n  private static isEnabled = false\n\n  static enable (): void {\n    this.isEnabled = true\n  }\n\n  static disable (): void {\n    this.isEnabled = false\n  }\n\n  static log (...args: unknown[]): void {\n    if (this.isEnabled) {\n      console.log(...args)\n    }\n  }\n\n  static warn (...args: unknown[]): void {\n    if (this.isEnabled) {\n      console.warn(...args)\n    }\n  }\n\n  static error (...args: unknown[]): void {\n    console.error(...args)\n  }\n}\n", "/**\n * @file MessageBoxClient.ts\n * @description\n * Provides the `MessageBoxClient` class — a secure client library for sending and receiving messages\n * via a Message Box Server over HTTP and WebSocket. Messages are authenticated, optionally encrypted,\n * and routed using identity-based addressing based on BRC-2/BRC-42/BRC-43 protocols.\n *\n * Core Features:\n * - Authenticated message transport using identity keys\n * - Deterministic message ID generation via HMAC (BRC-2)\n * - AES-256-GCM encryption using ECDH shared secrets derived via BRC-42/BRC-43\n * - Support for sending messages to self (`counterparty: 'self'`)\n * - Live message streaming using WebSocket rooms\n * - Optional plaintext messaging with `skipEncryption`\n * - Overlay host discovery and advertisement broadcasting via SHIP\n * - MessageBox-based organization and acknowledgment system\n *\n * See BRC-2 for details on the encryption scheme: https://github.com/bitcoin-sv/BRCs/blob/master/wallet/0002.md\n *\n * @module MessageBoxClient\n * @author Project Babbage\n * @license Open BSV License\n */\n\nimport {\n  WalletClient,\n  AuthFetch,\n  LookupResolver,\n  TopicBroadcaster,\n  Utils,\n  Transaction,\n  PushDrop,\n  BEEF,\n  LockingScript,\n  HexString\n} from '@bsv/sdk'\nimport { AuthSocketClient } from '@bsv/authsocket-client'\nimport { Logger } from './Utils/logger.js'\nimport { AcknowledgeMessageParams, EncryptedMessage, ListMessagesParams, MessageBoxClientOptions, PeerMessage, SendMessageParams, SendMessageResponse } from './types.js'\n\nconst DEFAULT_MAINNET_HOST = 'https://messagebox.babbage.systems'\nconst DEFAULT_TESTNET_HOST = 'https://staging-messagebox.babbage.systems'\n\ninterface AdvertisementToken {\n  host: string\n  txid: HexString\n  outputIndex: number\n  lockingScript: LockingScript\n  beef: BEEF\n}\n\n/**\n * @class MessageBoxClient\n * @description\n * A secure client for sending and receiving authenticated, encrypted messages\n * through a MessageBox server over HTTP and WebSocket.\n *\n * Core Features:\n * - Identity-authenticated message transport (BRC-2)\n * - AES-256-GCM end-to-end encryption with BRC-42/BRC-43 key derivation\n * - HMAC-based message ID generation for deduplication\n * - Live WebSocket messaging with room-based subscription management\n * - Overlay network discovery and host advertisement broadcasting (SHIP protocol)\n * - Fallback to HTTP messaging when WebSocket is unavailable\n *\n * **Important:**\n * The MessageBoxClient automatically calls `await init()` if needed.\n * Manual initialization is optional but still supported.\n *\n * You may call `await init()` manually for explicit control, but you can also use methods\n * like `sendMessage()` or `listenForLiveMessages()` directly — the client will initialize itself\n * automatically if not yet ready.\n *\n * @example\n * const client = new MessageBoxClient({ walletClient, enableLogging: true })\n * await client.init() // <- Required before using the client\n * await client.sendMessage({ recipient, messageBox: 'payment_inbox', body: 'Hello world' })\n */\nexport class MessageBoxClient {\n  private host: string\n  public readonly authFetch: AuthFetch\n  private readonly walletClient: WalletClient\n  private socket?: ReturnType<typeof AuthSocketClient>\n  private myIdentityKey?: string\n  private readonly joinedRooms: Set<string> = new Set()\n  private readonly lookupResolver: LookupResolver\n  private readonly networkPreset: 'local' | 'mainnet' | 'testnet'\n  private initialized = false\n\n  /**\n   * @constructor\n   * @param {Object} options - Initialization options for the MessageBoxClient.\n   * @param {string} [options.host] - The base URL of the MessageBox server. If omitted, defaults to mainnet/testnet hosts.\n   * @param {WalletClient} options.walletClient - Wallet instance used for authentication, signing, and encryption.\n   * @param {boolean} [options.enableLogging=false] - Whether to enable detailed debug logging to the console.\n   * @param {'local' | 'mainnet' | 'testnet'} [options.networkPreset='mainnet'] - Overlay network preset used for routing and advertisement lookup.\n   *\n   * @description\n   * Constructs a new MessageBoxClient.\n   *\n   * **Note:**\n   * Passing a `host` during construction sets the default server.\n   * If you do not manually call `await init()`, the client will automatically initialize itself on first use.\n   *\n   * @example\n   * const client = new MessageBoxClient({\n   *   host: 'https://messagebox.example',\n   *   walletClient,\n   *   enableLogging: true,\n   *   networkPreset: 'testnet'\n   * })\n   * await client.init()\n   */\n  constructor(options: MessageBoxClientOptions = {}) {\n    const {\n      host,\n      walletClient,\n      enableLogging = false,\n      networkPreset = 'mainnet'\n    } = options\n\n    const defaultHost =\n      this.networkPreset === 'testnet'\n        ? DEFAULT_TESTNET_HOST\n        : DEFAULT_MAINNET_HOST\n\n    this.host = host?.trim() ?? defaultHost\n\n    this.walletClient = walletClient ?? new WalletClient()\n    this.authFetch = new AuthFetch(this.walletClient)\n    this.networkPreset = networkPreset\n\n    this.lookupResolver = new LookupResolver({\n      networkPreset\n    })\n\n    if (enableLogging) {\n      Logger.enable()\n    }\n  }\n\n  /**\n   * @method init\n   * @async\n   * @param {string} [targetHost] - Optional host to set or override the default host.\n   * @returns {Promise<void>}\n   *\n   * @description\n   * Initializes the MessageBoxClient by setting or anointing a MessageBox host.\n   *\n   * - If the client was constructed with a host, it uses that unless a different targetHost is provided.\n   * - If no prior advertisement exists for the identity key and host, it automatically broadcasts a new advertisement.\n   * - After calling init(), the client becomes ready to send, receive, and acknowledge messages.\n   *\n   * This method can be called manually for explicit control,\n   * but will be automatically invoked if omitted.\n   * @throws {Error} If no valid host is provided, or anointing fails.\n   *\n   * @example\n   * const client = new MessageBoxClient({ host: 'https://mybox.example', walletClient })\n   * await client.init()\n   * await client.sendMessage({ recipient, messageBox: 'inbox', body: 'Hello' })\n   */\n  async init(targetHost: string = this.host): Promise<void> {\n    const normalizedHost = targetHost?.trim()\n    if (normalizedHost === '') {\n      throw new Error('Cannot anoint host: No valid host provided')\n    }\n\n    // Check if this is an override host\n    if (normalizedHost !== this.host) {\n      this.initialized = false\n      this.host = normalizedHost\n    }\n\n    if (this.initialized) return\n\n    // 1. Get our identity key\n    const identityKey = await this.getIdentityKey()\n    // 2. Check for any matching advertisements for the given host\n    const [firstAdvertisement] = await this.queryAdvertisements(identityKey, normalizedHost)\n    // 3. If none our found, anoint this host\n    if (firstAdvertisement == null || firstAdvertisement?.host?.trim() === '' || firstAdvertisement?.host !== normalizedHost) {\n      Logger.log('[MB CLIENT] Anointing host:', normalizedHost)\n      const { txid } = await this.anointHost(normalizedHost)\n      if (txid == null || txid.trim() === '') {\n        throw new Error('Failed to anoint host: No transaction ID returned')\n      }\n    }\n    this.initialized = true\n  }\n\n  /**\n   * @method assertInitialized\n   * @private\n   * @description\n   * Ensures that the MessageBoxClient has completed initialization before performing sensitive operations\n   * like sending, receiving, or acknowledging messages.\n   *\n   * If the client is not yet initialized, it will automatically call `await init()` to complete setup.\n   *\n   * Used automatically by all public methods that require initialization.\n   */\n  private async assertInitialized(): Promise<void> {\n    if (!this.initialized || this.host == null || this.host.trim() === '') {\n      await this.init()\n    }\n  }\n\n  /**\n   * @method getJoinedRooms\n   * @returns {Set<string>} A set of currently joined WebSocket room IDs\n   * @description\n   * Returns a live list of WebSocket rooms the client is subscribed to.\n   * Useful for inspecting state or ensuring no duplicates are joined.\n   */\n  public getJoinedRooms(): Set<string> {\n    return this.joinedRooms\n  }\n\n  /**\n * @method getIdentityKey\n * @returns {Promise<string>} The identity public key of the user\n * @description\n * Returns the client's identity key, used for signing, encryption, and addressing.\n * If not already loaded, it will fetch and cache it.\n */\n  public async getIdentityKey(): Promise<string> {\n    if (this.myIdentityKey != null && this.myIdentityKey.trim() !== '') {\n      return this.myIdentityKey\n    }\n\n    Logger.log('[MB CLIENT] Fetching identity key...')\n    try {\n      const keyResult = await this.walletClient.getPublicKey({ identityKey: true })\n      this.myIdentityKey = keyResult.publicKey\n      Logger.log(`[MB CLIENT] Identity key fetched: ${this.myIdentityKey}`)\n      return this.myIdentityKey\n    } catch (error) {\n      Logger.error('[MB CLIENT ERROR] Failed to fetch identity key:', error)\n      throw new Error('Identity key retrieval failed')\n    }\n  }\n\n  /**\n   * @property testSocket\n   * @readonly\n   * @returns {AuthSocketClient | undefined} The internal WebSocket client (or undefined if not connected).\n   * @description\n   * Exposes the underlying Authenticated WebSocket client used for live messaging.\n   * This is primarily intended for debugging, test frameworks, or direct inspection.\n   *\n   * Note: Do not interact with the socket directly unless necessary.\n   * Use the provided `sendLiveMessage`, `listenForLiveMessages`, and related methods.\n   */\n  public get testSocket(): ReturnType<typeof AuthSocketClient> | undefined {\n    return this.socket\n  }\n\n  /**\n   * @method initializeConnection\n   * @async\n   * @returns {Promise<void>}\n   * @description\n   * Establishes an authenticated WebSocket connection to the configured MessageBox server.\n   * Enables live message streaming via room-based channels tied to identity keys.\n   *\n   * This method:\n   * 1. Retrieves the user’s identity key if not already set\n   * 2. Initializes a secure AuthSocketClient WebSocket connection\n   * 3. Authenticates the connection using the identity key\n   * 4. Waits up to 5 seconds for authentication confirmation\n   *\n   * If authentication fails or times out, the connection is rejected.\n   *\n   * @throws {Error} If the identity key is unavailable or authentication fails\n   *\n   * @example\n   * const mb = new MessageBoxClient({ walletClient })\n   * await mb.initializeConnection()\n   * // WebSocket is now ready for use\n   */\n  async initializeConnection(): Promise<void> {\n    await this.assertInitialized()\n    Logger.log('[MB CLIENT] initializeConnection() STARTED')\n\n    if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n      Logger.log('[MB CLIENT] Fetching identity key...')\n      try {\n        const keyResult = await this.walletClient.getPublicKey({ identityKey: true })\n        this.myIdentityKey = keyResult.publicKey\n        Logger.log(`[MB CLIENT] Identity key fetched successfully: ${this.myIdentityKey}`)\n      } catch (error) {\n        Logger.error('[MB CLIENT ERROR] Failed to fetch identity key:', error)\n        throw new Error('Identity key retrieval failed')\n      }\n    }\n\n    if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n      Logger.error('[MB CLIENT ERROR] Identity key is still missing after retrieval!')\n      throw new Error('Identity key is missing')\n    }\n\n    Logger.log('[MB CLIENT] Setting up WebSocket connection...')\n\n    if (this.socket == null) {\n      if (typeof this.host !== 'string' || this.host.trim() === '') {\n        throw new Error('Cannot initialize WebSocket: Host is not set')\n      }\n      this.socket = AuthSocketClient(this.host, { wallet: this.walletClient })\n\n      let identitySent = false\n      let authenticated = false\n\n      this.socket.on('connect', () => {\n        Logger.log('[MB CLIENT] Connected to WebSocket.')\n\n        if (!identitySent) {\n          Logger.log('[MB CLIENT] Sending authentication data:', this.myIdentityKey)\n          if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n            Logger.error('[MB CLIENT ERROR] Cannot send authentication: Identity key is missing!')\n          } else {\n            this.socket?.emit('authenticated', { identityKey: this.myIdentityKey })\n            identitySent = true\n          }\n        }\n      })\n\n      // Listen for authentication success from the server\n      this.socket.on('authenticationSuccess', (data) => {\n        Logger.log(`[MB CLIENT] WebSocket authentication successful: ${JSON.stringify(data)}`)\n        authenticated = true\n      })\n\n      // Handle authentication failures\n      this.socket.on('authenticationFailed', (data) => {\n        Logger.error(`[MB CLIENT ERROR] WebSocket authentication failed: ${JSON.stringify(data)}`)\n        authenticated = false\n      })\n\n      this.socket.on('disconnect', () => {\n        Logger.log('[MB CLIENT] Disconnected from MessageBox server')\n        this.socket = undefined\n        identitySent = false\n        authenticated = false\n      })\n\n      this.socket.on('error', (error) => {\n        Logger.error('[MB CLIENT ERROR] WebSocket error:', error)\n      })\n\n      // Wait for authentication confirmation before proceeding\n      await new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n          if (authenticated) {\n            Logger.log('[MB CLIENT] WebSocket fully authenticated and ready!')\n            resolve()\n          } else {\n            reject(new Error('[MB CLIENT ERROR] WebSocket authentication timed out!'))\n          }\n        }, 5000) // Timeout after 5 seconds\n      })\n    }\n  }\n\n  /**\n   * @method resolveHostForRecipient\n   * @async\n   * @param {string} identityKey - The public identity key of the intended recipient.\n   * @returns {Promise<string>} - A fully qualified host URL for the recipient's MessageBox server.\n   *\n   * @description\n   * Attempts to resolve the most recently anointed MessageBox host for the given identity key\n   * using the BSV overlay network and the `ls_messagebox` LookupResolver.\n   *\n   * If no advertisements are found, or if resolution fails, the client will fall back\n   * to its own configured `host`. This allows seamless operation in both overlay and non-overlay environments.\n   *\n   * This method guarantees a non-null return value and should be used directly when routing messages.\n   *\n   * @example\n   * const host = await resolveHostForRecipient('028d...') // → returns either overlay host or this.host\n   */\n  async resolveHostForRecipient(identityKey: string): Promise<string> {\n    const advertisementTokens = await this.queryAdvertisements(identityKey)\n    if (advertisementTokens.length === 0) {\n      Logger.warn(`[MB CLIENT] No advertisements for ${identityKey}, using default host ${this.host}`)\n      return this.host\n    }\n    // Return the first host found\n    return advertisementTokens[0].host\n  }\n\n  /**\n   * Core lookup: ask the LookupResolver (optionally filtered by host),\n   * decode every PushDrop output, and collect all the host URLs you find.\n   *\n   * @param identityKey  the recipient’s public key\n   * @param host?        if passed, only look for adverts anointed at that host\n   * @returns            0-length array if nothing valid was found\n   */\n  async queryAdvertisements(\n    identityKey?: string,\n    host?: string\n  ): Promise<AdvertisementToken[]> {\n    const hosts: AdvertisementToken[] = []\n    try {\n      const query: Record<string, string> = { identityKey: identityKey ?? await this.getIdentityKey() }\n      if (host != null && host.trim() !== '') query.host = host\n\n      const result = await this.lookupResolver.query({\n        service: 'ls_messagebox',\n        query\n      })\n      if (result.type !== 'output-list') {\n        throw new Error(`Unexpected result type: ${result.type}`)\n      }\n\n      for (const output of result.outputs) {\n        try {\n          const tx = Transaction.fromBEEF(output.beef)\n          const script = tx.outputs[output.outputIndex].lockingScript\n          const token = PushDrop.decode(script)\n          const [, hostBuf] = token.fields\n\n          if (hostBuf == null || hostBuf.length === 0) {\n            throw new Error('Empty host field')\n          }\n\n          hosts.push({\n            host: Utils.toUTF8(hostBuf),\n            txid: tx.id('hex'),\n            outputIndex: output.outputIndex,\n            lockingScript: script,\n            beef: output.beef\n          })\n        } catch {\n          // skip any malformed / non-PushDrop outputs\n        }\n      }\n    } catch (err) {\n      Logger.error('[MB CLIENT ERROR] _queryAdvertisements failed:', err)\n    }\n    return hosts\n  }\n\n  /**\n   * @method joinRoom\n   * @async\n   * @param {string} messageBox - The name of the WebSocket room to join (e.g., \"payment_inbox\").\n   * @returns {Promise<void>}\n   *\n   * @description\n   * Joins a WebSocket room that corresponds to the user’s identity key and the specified message box.\n   * This is required to receive real-time messages via WebSocket for a specific type of communication.\n   *\n   * If the WebSocket connection is not already established, this method will first initialize the connection.\n   * It also ensures the room is only joined once, and tracks all joined rooms in an internal set.\n   *\n   * Room ID format: `${identityKey}-${messageBox}`\n   *\n   * @example\n   * await client.joinRoom('payment_inbox')\n   * // Now listening for real-time messages in room '028d...-payment_inbox'\n   */\n  async joinRoom(messageBox: string): Promise<void> {\n    await this.assertInitialized()\n    Logger.log(`[MB CLIENT] Attempting to join WebSocket room: ${messageBox}`)\n\n    // Ensure WebSocket connection is established first\n    if (this.socket == null) {\n      Logger.log('[MB CLIENT] No WebSocket connection. Initializing...')\n      await this.initializeConnection()\n    }\n\n    if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n      throw new Error('[MB CLIENT ERROR] Identity key is not defined')\n    }\n\n    const roomId = `${this.myIdentityKey ?? ''}-${messageBox}`\n\n    if (this.joinedRooms.has(roomId)) {\n      Logger.log(`[MB CLIENT] Already joined WebSocket room: ${roomId}`)\n      return\n    }\n\n    try {\n      Logger.log(`[MB CLIENT] Joining WebSocket room: ${roomId}`)\n      await this.socket?.emit('joinRoom', roomId)\n      this.joinedRooms.add(roomId)\n      Logger.log(`[MB CLIENT] Successfully joined room: ${roomId}`)\n    } catch (error) {\n      Logger.error(`[MB CLIENT ERROR] Failed to join WebSocket room: ${roomId}`, error)\n    }\n  }\n\n  /**\n   * @method listenForLiveMessages\n   * @async\n   * @param {Object} params - Configuration for the live message listener.\n   * @param {function} params.onMessage - A callback function that will be triggered when a new message arrives.\n   * @param {string} params.messageBox - The messageBox name (e.g., `payment_inbox`) to listen for.\n   * @returns {Promise<void>}\n   *\n   * @description\n   * Subscribes the client to live messages over WebSocket for a specific messageBox.\n   *\n   * This method:\n   * - Ensures the WebSocket connection is initialized and authenticated.\n   * - Joins the correct room formatted as `${identityKey}-${messageBox}`.\n   * - Listens for messages broadcast to the room.\n   * - Automatically attempts to parse and decrypt message bodies.\n   * - Emits the final message (as a `PeerMessage`) to the supplied `onMessage` handler.\n   *\n   * If the incoming message is encrypted, the client decrypts it using AES-256-GCM via\n   * ECDH shared secrets derived from identity keys as defined in [BRC-2](https://github.com/bitcoin-sv/BRCs/blob/master/wallet/0002.md).\n   * Messages sent by the client to itself are decrypted using `counterparty = 'self'`.\n   *\n   * @example\n   * await client.listenForLiveMessages({\n   *   messageBox: 'payment_inbox',\n   *   onMessage: (msg) => console.log('Received live message:', msg)\n   * })\n   */\n  async listenForLiveMessages({\n    onMessage,\n    messageBox\n  }: {\n    onMessage: (message: PeerMessage) => void\n    messageBox: string\n  }): Promise<void> {\n    await this.assertInitialized()\n    Logger.log(`[MB CLIENT] Setting up listener for WebSocket room: ${messageBox}`)\n\n    // Ensure WebSocket connection and room join\n    await this.joinRoom(messageBox)\n\n    // Ensure identity key is available before creating roomId\n    if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n      throw new Error('[MB CLIENT ERROR] Identity key is missing. Cannot construct room ID.')\n    }\n\n    const roomId = `${this.myIdentityKey}-${messageBox}`\n\n    Logger.log(`[MB CLIENT] Listening for messages in room: ${roomId}`)\n\n    this.socket?.on(`sendMessage-${roomId}`, (message: PeerMessage) => {\n      void (async () => {\n        Logger.log(`[MB CLIENT] Received message in room ${roomId}:`, message)\n\n        try {\n          let parsedBody: unknown = message.body\n\n          if (typeof parsedBody === 'string') {\n            try {\n              parsedBody = JSON.parse(parsedBody)\n            } catch {\n              // Leave it as-is (plain text)\n            }\n          }\n\n          if (\n            parsedBody != null &&\n            typeof parsedBody === 'object' &&\n            typeof (parsedBody as any).encryptedMessage === 'string'\n          ) {\n            Logger.log(`[MB CLIENT] Decrypting message from ${String(message.sender)}...`)\n            const decrypted = await this.walletClient.decrypt({\n              protocolID: [1, 'messagebox'],\n              keyID: '1',\n              counterparty: message.sender,\n              ciphertext: Utils.toArray((parsedBody as any).encryptedMessage, 'base64')\n            })\n\n            message.body = Utils.toUTF8(decrypted.plaintext)\n          } else {\n            Logger.log('[MB CLIENT] Message is not encrypted.')\n            message.body = typeof parsedBody === 'string'\n              ? parsedBody\n              : (() => { try { return JSON.stringify(parsedBody) } catch { return '[Error: Unstringifiable message]' } })()\n          }\n        } catch (err) {\n          Logger.error('[MB CLIENT ERROR] Failed to parse or decrypt live message:', err)\n          message.body = '[Error: Failed to decrypt or parse message]'\n        }\n\n        onMessage(message)\n      })()\n    })\n  }\n\n  /**\n   * @method sendLiveMessage\n   * @async\n   * @param {SendMessageParams} param0 - The message parameters including recipient, box name, body, and options.\n   * @returns {Promise<SendMessageResponse>} A success response with the generated messageId.\n   *\n   * @description\n   * Sends a message in real time using WebSocket with authenticated delivery and overlay fallback.\n   *\n   * This method:\n   * - Ensures the WebSocket connection is open and joins the correct room.\n   * - Derives a unique message ID using an HMAC of the message body and counterparty identity key.\n   * - Encrypts the message body using AES-256-GCM based on the ECDH shared secret between derived keys, per [BRC-2](https://github.com/bitcoin-sv/BRCs/blob/master/wallet/0002.md),\n   *   unless `skipEncryption` is explicitly set to `true`.\n   * - Sends the message to a WebSocket room in the format `${recipient}-${messageBox}`.\n   * - Waits for acknowledgment (`sendMessageAck-${roomId}`).\n   * - If no acknowledgment is received within 10 seconds, falls back to `sendMessage()` over HTTP.\n   *\n   * This hybrid delivery strategy ensures reliability in both real-time and offline-capable environments.\n   *\n   * @throws {Error} If message validation fails, HMAC generation fails, or both WebSocket and HTTP fail to deliver.\n   *\n   * @example\n   * await client.sendLiveMessage({\n   *   recipient: '028d...',\n   *   messageBox: 'payment_inbox',\n   *   body: { amount: 1000 }\n   * })\n   */\n  async sendLiveMessage({\n    recipient,\n    messageBox,\n    body,\n    messageId,\n    skipEncryption\n  }: SendMessageParams): Promise<SendMessageResponse> {\n    await this.assertInitialized()\n    if (recipient == null || recipient.trim() === '') {\n      throw new Error('[MB CLIENT ERROR] Recipient identity key is required')\n    }\n    if (messageBox == null || messageBox.trim() === '') {\n      throw new Error('[MB CLIENT ERROR] MessageBox is required')\n    }\n    if (body == null || (typeof body === 'string' && body.trim() === '')) {\n      throw new Error('[MB CLIENT ERROR] Message body cannot be empty')\n    }\n\n    // Ensure room is joined before sending\n    await this.joinRoom(messageBox)\n\n    // Fallback to HTTP if WebSocket is not connected\n    if (this.socket == null || !this.socket.connected) {\n      Logger.warn('[MB CLIENT WARNING] WebSocket not connected, falling back to HTTP')\n      const targetHost = await this.resolveHostForRecipient(recipient)\n      return await this.sendMessage({ recipient, messageBox, body }, targetHost)\n    }\n\n    let finalMessageId: string\n    try {\n      const hmac = await this.walletClient.createHmac({\n        data: Array.from(new TextEncoder().encode(JSON.stringify(body))),\n        protocolID: [1, 'messagebox'],\n        keyID: '1',\n        counterparty: recipient\n      })\n      finalMessageId = messageId ?? Array.from(hmac.hmac).map(b => b.toString(16).padStart(2, '0')).join('')\n    } catch (error) {\n      Logger.error('[MB CLIENT ERROR] Failed to generate HMAC:', error)\n      throw new Error('Failed to generate message identifier.')\n    }\n\n    const roomId = `${recipient}-${messageBox}`\n    Logger.log(`[MB CLIENT] Sending WebSocket message to room: ${roomId}`)\n\n    let outgoingBody: string\n    if (skipEncryption === true) {\n      outgoingBody = typeof body === 'string' ? body : JSON.stringify(body)\n    } else {\n      const encryptedMessage = await this.walletClient.encrypt({\n        protocolID: [1, 'messagebox'],\n        keyID: '1',\n        counterparty: recipient,\n        plaintext: Utils.toArray(typeof body === 'string' ? body : JSON.stringify(body), 'utf8')\n      })\n\n      outgoingBody = JSON.stringify({\n        encryptedMessage: Utils.toBase64(encryptedMessage.ciphertext)\n      })\n    }\n\n    return await new Promise((resolve, reject) => {\n      const ackEvent = `sendMessageAck-${roomId}`\n      let handled = false\n\n      const ackHandler = (response?: SendMessageResponse): void => {\n        if (handled) return\n        handled = true\n\n        const socketAny = this.socket as any\n        if (typeof socketAny?.off === 'function') {\n          socketAny.off(ackEvent, ackHandler)\n        }\n\n        Logger.log('[MB CLIENT] Received WebSocket acknowledgment:', response)\n\n        if (response == null || response.status !== 'success') {\n          Logger.warn('[MB CLIENT] WebSocket message failed or returned unexpected response. Falling back to HTTP.')\n          const fallbackMessage: SendMessageParams = {\n            recipient,\n            messageBox,\n            body,\n            messageId: finalMessageId,\n            skipEncryption\n          }\n\n          this.resolveHostForRecipient(recipient)\n            .then(async (host) => {\n              return await this.sendMessage(fallbackMessage, host)\n            })\n            .then(resolve)\n            .catch(reject)\n        } else {\n          Logger.log('[MB CLIENT] Message sent successfully via WebSocket:', response)\n          resolve(response)\n        }\n      }\n\n      // Attach acknowledgment listener\n      this.socket?.on(ackEvent, ackHandler)\n\n      // Emit message to room\n      this.socket?.emit('sendMessage', {\n        roomId,\n        message: {\n          messageId: finalMessageId,\n          recipient,\n          body: outgoingBody\n        }\n      })\n\n      // Timeout: Fallback to HTTP if no acknowledgment received\n      setTimeout(() => {\n        if (!handled) {\n          handled = true\n          const socketAny = this.socket as any\n          if (typeof socketAny?.off === 'function') {\n            socketAny.off(ackEvent, ackHandler)\n          }\n          Logger.warn('[CLIENT] WebSocket acknowledgment timed out, falling back to HTTP')\n          const fallbackMessage: SendMessageParams = {\n            recipient,\n            messageBox,\n            body,\n            messageId: finalMessageId,\n            skipEncryption\n          }\n\n          this.resolveHostForRecipient(recipient)\n            .then(async (host) => {\n              return await this.sendMessage(fallbackMessage, host)\n            })\n            .then(resolve)\n            .catch(reject)\n        }\n      }, 10000)\n    })\n  }\n\n  /**\n   * @method leaveRoom\n   * @async\n   * @param {string} messageBox - The name of the WebSocket room to leave (e.g., `payment_inbox`).\n   * @returns {Promise<void>}\n   *\n   * @description\n   * Leaves a previously joined WebSocket room associated with the authenticated identity key.\n   * This helps reduce unnecessary message traffic and memory usage.\n   *\n   * If the WebSocket is not connected or the identity key is missing, the method exits gracefully.\n   *\n   * @example\n   * await client.leaveRoom('payment_inbox')\n   */\n  async leaveRoom(messageBox: string): Promise<void> {\n    await this.assertInitialized()\n    if (this.socket == null) {\n      Logger.warn('[MB CLIENT] Attempted to leave a room but WebSocket is not connected.')\n      return\n    }\n\n    if (this.myIdentityKey == null || this.myIdentityKey.trim() === '') {\n      throw new Error('[MB CLIENT ERROR] Identity key is not defined')\n    }\n\n    const roomId = `${this.myIdentityKey}-${messageBox}`\n    Logger.log(`[MB CLIENT] Leaving WebSocket room: ${roomId}`)\n    this.socket.emit('leaveRoom', roomId)\n\n    // Ensure the room is removed from tracking\n    this.joinedRooms.delete(roomId)\n  }\n\n  /**\n   * @method disconnectWebSocket\n   * @async\n   * @returns {Promise<void>} Resolves when the WebSocket connection is successfully closed.\n   *\n   * @description\n   * Gracefully disconnects the WebSocket connection to the MessageBox server.\n   * This should be called when the client is shutting down, logging out, or no longer\n   * needs real-time communication to conserve system resources.\n   *\n   * @example\n   * await client.disconnectWebSocket()\n   */\n  async disconnectWebSocket(): Promise<void> {\n    await this.assertInitialized()\n    if (this.socket != null) {\n      Logger.log('[MB CLIENT] Closing WebSocket connection...')\n      this.socket.disconnect()\n      this.socket = undefined\n    } else {\n      Logger.log('[MB CLIENT] No active WebSocket connection to close.')\n    }\n  }\n\n  /**\n   * @method sendMessage\n   * @async\n   * @param {SendMessageParams} message - Contains recipient, messageBox name, message body, optional messageId, and skipEncryption flag.\n   * @param {string} [overrideHost] - Optional host to override overlay resolution (useful for testing or private routing).\n   * @returns {Promise<SendMessageResponse>} - Resolves with `{ status, messageId }` on success.\n   *\n   * @description\n   * Sends a message over HTTP to a recipient's messageBox. This method:\n   *\n   * - Derives a deterministic `messageId` using an HMAC of the message body and recipient key.\n   * - Encrypts the message body using AES-256-GCM, derived from a shared secret using BRC-2-compliant key derivation and ECDH, unless `skipEncryption` is set to true.\n   * - Automatically resolves the host via overlay LookupResolver unless an override is provided.\n   * - Authenticates the request using the current identity key with `AuthFetch`.\n   *\n   * This is the fallback mechanism for `sendLiveMessage` when WebSocket delivery fails.\n   * It is also used for message types that do not require real-time delivery.\n   *\n   * @throws {Error} If validation, encryption, HMAC, or network request fails.\n   *\n   * @example\n   * await client.sendMessage({\n   *   recipient: '03abc...',\n   *   messageBox: 'notifications',\n   *   body: { type: 'ping' }\n   * })\n   */\n  async sendMessage(\n    message: SendMessageParams,\n    overrideHost?: string\n  ): Promise<SendMessageResponse> {\n    await this.assertInitialized()\n    if (message.recipient == null || message.recipient.trim() === '') {\n      throw new Error('You must provide a message recipient!')\n    }\n    if (message.messageBox == null || message.messageBox.trim() === '') {\n      throw new Error('You must provide a messageBox to send this message into!')\n    }\n    if (message.body == null || (typeof message.body === 'string' && message.body.trim().length === 0)) {\n      throw new Error('Every message must have a body!')\n    }\n\n    let messageId: string\n    try {\n      const hmac = await this.walletClient.createHmac({\n        data: Array.from(new TextEncoder().encode(JSON.stringify(message.body))),\n        protocolID: [1, 'messagebox'],\n        keyID: '1',\n        counterparty: message.recipient\n      })\n      messageId = message.messageId ?? Array.from(hmac.hmac).map(b => b.toString(16).padStart(2, '0')).join('')\n    } catch (error) {\n      Logger.error('[MB CLIENT ERROR] Failed to generate HMAC:', error)\n      throw new Error('Failed to generate message identifier.')\n    }\n\n    let finalBody: string | EncryptedMessage\n    if (message.skipEncryption === true) {\n      finalBody = typeof message.body === 'string' ? message.body : JSON.stringify(message.body)\n    } else {\n      const encryptedMessage = await this.walletClient.encrypt({\n        protocolID: [1, 'messagebox'],\n        keyID: '1',\n        counterparty: message.recipient,\n        plaintext: Utils.toArray(typeof message.body === 'string' ? message.body : JSON.stringify(message.body), 'utf8')\n      })\n\n      finalBody = JSON.stringify({ encryptedMessage: Utils.toBase64(encryptedMessage.ciphertext) })\n    }\n\n    const requestBody = {\n      message: {\n        ...message,\n        messageId,\n        body: finalBody\n      }\n    }\n\n    try {\n      const finalHost = overrideHost ?? await this.resolveHostForRecipient(message.recipient)\n\n      Logger.log('[MB CLIENT] Sending HTTP request to:', `${finalHost}/sendMessage`)\n      Logger.log('[MB CLIENT] Request Body:', JSON.stringify(requestBody, null, 2))\n\n      if (this.myIdentityKey == null || this.myIdentityKey === '') {\n        try {\n          const keyResult = await this.walletClient.getPublicKey({ identityKey: true })\n          this.myIdentityKey = keyResult.publicKey\n          Logger.log(`[MB CLIENT] Fetched identity key before sending request: ${this.myIdentityKey}`)\n        } catch (error) {\n          Logger.error('[MB CLIENT ERROR] Failed to fetch identity key:', error)\n          throw new Error('Identity key retrieval failed')\n        }\n      }\n\n      const response = await this.authFetch.fetch(`${finalHost}/sendMessage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (response.bodyUsed) {\n        throw new Error('[MB CLIENT ERROR] Response body has already been used!')\n      }\n\n      const parsedResponse = await response.json()\n      Logger.log('[MB CLIENT] Raw Response Body:', parsedResponse)\n\n      if (!response.ok) {\n        Logger.error(`[MB CLIENT ERROR] Failed to send message. HTTP ${response.status}: ${response.statusText}`)\n        throw new Error(`Message sending failed: HTTP ${response.status} - ${response.statusText}`)\n      }\n\n      if (parsedResponse.status !== 'success') {\n        Logger.error(`[MB CLIENT ERROR] Server returned an error: ${String(parsedResponse.description)}`)\n        throw new Error(parsedResponse.description ?? 'Unknown error from server.')\n      }\n\n      Logger.log('[MB CLIENT] Message successfully sent.')\n      return { ...parsedResponse, messageId }\n    } catch (error) {\n      Logger.error('[MB CLIENT ERROR] Network or timeout error:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\n      throw new Error(`Failed to send message: ${errorMessage}`)\n    }\n  }\n\n  /**\n   * @method anointHost\n   * @async\n   * @param {string} host - The full URL of the server you want to designate as your MessageBox host (e.g., \"https://mybox.com\").\n   * @returns {Promise<{ txid: string }>} - The transaction ID of the advertisement broadcast to the overlay network.\n   *\n   * @description\n   * Broadcasts a signed overlay advertisement using a PushDrop output under the `tm_messagebox` topic.\n   * This advertisement announces that the specified `host` is now authorized to receive and route\n   * messages for the sender’s identity key.\n   *\n   * The broadcasted message includes:\n   * - The identity key\n   * - The chosen host URL\n   *\n   * This is essential for enabling overlay-based message delivery via SHIP and LookupResolver.\n   * The recipient’s host must advertise itself for message routing to succeed in a decentralized manner.\n   *\n   * @throws {Error} If the URL is invalid, the PushDrop creation fails, or the overlay broadcast does not succeed.\n   *\n   * @example\n   * const { txid } = await client.anointHost('https://my-messagebox.io')\n   */\n  async anointHost(host: string): Promise<{ txid: string }> {\n    Logger.log('[MB CLIENT] Starting anointHost...')\n    try {\n      if (!host.startsWith('http')) {\n        throw new Error('Invalid host URL')\n      }\n\n      const identityKey = await this.getIdentityKey()\n\n      Logger.log('[MB CLIENT] Fields - Identity:', identityKey, 'Host:', host)\n\n      const fields: number[][] = [\n        Utils.toArray(identityKey, 'hex'),\n        Utils.toArray(host, 'utf8')\n      ]\n\n      const pushdrop = new PushDrop(this.walletClient)\n      Logger.log('Fields:', fields.map(a => Utils.toHex(a)))\n      Logger.log('ProtocolID:', [1, 'messagebox advertisement'])\n      Logger.log('KeyID:', '1')\n      Logger.log('SignAs:', 'self')\n      Logger.log('anyoneCanSpend:', false)\n      Logger.log('forSelf:', true)\n      const script = await pushdrop.lock(\n        fields,\n        [1, 'messagebox advertisement'],\n        '1',\n        'anyone',\n        true\n      )\n\n      Logger.log('[MB CLIENT] PushDrop script:', script.toASM())\n\n      const { tx, txid } = await this.walletClient.createAction({\n        description: 'Anoint host for overlay routing',\n        outputs: [{\n          basket: 'overlay advertisements',\n          lockingScript: script.toHex(),\n          satoshis: 1,\n          outputDescription: 'Overlay advertisement output'\n        }],\n        options: { randomizeOutputs: false, acceptDelayedBroadcast: false }\n      })\n\n      Logger.log('[MB CLIENT] Transaction created:', txid)\n\n      if (tx !== undefined) {\n        const broadcaster = new TopicBroadcaster(['tm_messagebox'], {\n          networkPreset: this.networkPreset\n        })\n\n        const result = await broadcaster.broadcast(Transaction.fromAtomicBEEF(tx))\n        Logger.log('[MB CLIENT] Advertisement broadcast succeeded. TXID:', result.txid)\n\n        if (typeof result.txid !== 'string') {\n          throw new Error('Anoint failed: broadcast did not return a txid')\n        }\n\n        return { txid: result.txid }\n      }\n\n      throw new Error('Anoint failed: failed to create action!')\n    } catch (err) {\n      Logger.error('[MB CLIENT ERROR] anointHost threw:', err)\n      throw err\n    }\n  }\n\n  /**\n   * @method revokeHostAdvertisement\n   * @async\n   * @param {AdvertisementToken} advertisementToken - The advertisement token containing the messagebox host to revoke.\n   * @returns {Promise<{ txid: string }>} - The transaction ID of the revocation broadcast to the overlay network.\n   *\n   * @description\n   * Broadcasts a signed revocation transaction indicating the advertisement token should be removed\n   * and no longer tracked by lookup services.\n   *\n   * @example\n   * const { txid } = await client.revokeHost('https://my-messagebox.io')\n   */\n  async revokeHostAdvertisement(advertisementToken: AdvertisementToken): Promise<{ txid: string }> {\n    Logger.log('[MB CLIENT] Starting revokeHost...')\n    const outpoint = `${advertisementToken.txid}.${advertisementToken.outputIndex}`\n    try {\n      const { signableTransaction } = await this.walletClient.createAction({\n        description: 'Revoke MessageBox host advertisement',\n        inputBEEF: advertisementToken.beef,\n        inputs: [\n          {\n            outpoint,\n            unlockingScriptLength: 73,\n            inputDescription: 'Revoking host advertisement token'\n          }\n        ]\n      })\n\n      if (signableTransaction === undefined) {\n        throw new Error('Failed to create signable transaction.')\n      }\n\n      const partialTx = Transaction.fromBEEF(signableTransaction.tx)\n\n      // Prepare the unlocker\n      const pushdrop = new PushDrop(this.walletClient)\n      const unlocker = await pushdrop.unlock(\n        [1, 'messagebox advertisement'],\n        '1',\n        'anyone',\n        'all',\n        false,\n        advertisementToken.outputIndex,\n        advertisementToken.lockingScript\n      )\n\n      // Convert to Transaction, apply signature\n      const finalUnlockScript = await unlocker.sign(partialTx, advertisementToken.outputIndex)\n\n      // Complete signing with the final unlock script\n      const { tx: signedTx } = await this.walletClient.signAction({\n        reference: signableTransaction.reference,\n        spends: {\n          [advertisementToken.outputIndex]: {\n            unlockingScript: finalUnlockScript.toHex()\n          }\n        },\n        options: {\n          acceptDelayedBroadcast: false\n        }\n      })\n\n      if (signedTx === undefined) {\n        throw new Error('Failed to finalize the transaction signature.')\n      }\n\n      const broadcaster = new TopicBroadcaster(['tm_messagebox'], {\n        networkPreset: this.networkPreset\n      })\n\n      const result = await broadcaster.broadcast(Transaction.fromAtomicBEEF(signedTx))\n      Logger.log('[MB CLIENT] Revocation broadcast succeeded. TXID:', result.txid)\n\n      if (typeof result.txid !== 'string') {\n        throw new Error('Revoke failed: broadcast did not return a txid')\n      }\n\n      return { txid: result.txid }\n    } catch (err) {\n      Logger.error('[MB CLIENT ERROR] revokeHost threw:', err)\n      throw err\n    }\n  }\n\n  /**\n   * @method listMessages\n   * @async\n   * @param {ListMessagesParams} params - Contains the name of the messageBox to read from.\n   * @returns {Promise<PeerMessage[]>} - Returns an array of decrypted `PeerMessage` objects.\n   *\n   * @description\n   * Retrieves all messages from the specified `messageBox` assigned to the current identity key.\n   * Unless a host override is provided, messages are fetched from the resolved overlay host (via LookupResolver) or the default host if no advertisement is found.\n   *\n   * Each message is:\n   * - Parsed and, if encrypted, decrypted using AES-256-GCM via BRC-2-compliant ECDH key derivation and symmetric encryption.\n   * - Returned as a normalized `PeerMessage` with readable string body content.\n   *\n   * Decryption automatically derives a shared secret using the sender’s identity key and the receiver’s child private key.\n   * If the sender is the same as the recipient, the `counterparty` is set to `'self'`.\n   *\n   * @throws {Error} If no messageBox is specified, the request fails, or the server returns an error.\n   *\n   * @example\n   * const messages = await client.listMessages({ messageBox: 'inbox' })\n   * messages.forEach(msg => console.log(msg.sender, msg.body))\n   */\n  async listMessages({ messageBox, host }: ListMessagesParams): Promise<PeerMessage[]> {\n    await this.assertInitialized()\n    if (messageBox.trim() === '') {\n      throw new Error('MessageBox cannot be empty')\n    }\n\n    let hosts: string[] = host != null ? [host] : []\n    if (hosts.length === 0) {\n      const advertisedHosts = await this.queryAdvertisements(await this.getIdentityKey())\n      hosts = Array.from(new Set([this.host, ...advertisedHosts.map(h => h.host)]))\n    }\n\n    // Query each host in parallel\n    const fetchFromHost = async (host: string): Promise<PeerMessage[]> => {\n      try {\n        Logger.log(`[MB CLIENT] Listing messages from ${host}…`)\n        const res = await this.authFetch.fetch(`${host}/listMessages`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ messageBox })\n        })\n        if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`)\n        const data = await res.json()\n        if (data.status === 'error') throw new Error(data.description ?? 'Unknown server error')\n        return data.messages as PeerMessage[]\n      } catch (err) {\n        Logger.log(`[MB CLIENT DEBUG] listMessages failed for ${host}:`, err)\n        throw err // re-throw to be caught in the settled promise\n      }\n    }\n\n    const settled = await Promise.allSettled(hosts.map(fetchFromHost))\n\n    // 3. Split successes / failures\n    const messagesByHost: PeerMessage[][] = []\n    const errors: any[] = []\n\n    for (const r of settled) {\n      if (r.status === 'fulfilled') {\n        messagesByHost.push(r.value)\n      } else {\n        errors.push(r.reason)\n      }\n    }\n\n    // 4. If *every* host failed – throw aggregated error\n    if (messagesByHost.length === 0) {\n      throw new Error('Failed to retrieve messages from any host')\n    }\n\n    // 5. Merge & de‑duplicate (first‑seen wins)\n    const dedupMap = new Map<string, PeerMessage>()\n    for (const messageList of messagesByHost) {\n      for (const m of messageList) {\n        if (!dedupMap.has(m.messageId)) dedupMap.set(m.messageId, m)\n      }\n    }\n\n    // 6. Early‑out: no messages but at least one host succeeded → []\n    if (dedupMap.size === 0) return []\n\n    const tryParse = (raw: string): any => {\n      try {\n        return JSON.parse(raw)\n      } catch {\n        return raw\n      }\n    }\n\n    const messages: PeerMessage[] = Array.from(dedupMap.values())\n\n    for (const message of messages) {\n      try {\n        const parsedBody: unknown =\n          typeof message.body === 'string' ? tryParse(message.body) : message.body\n\n        if (\n          parsedBody != null &&\n          typeof parsedBody === 'object' &&\n          typeof (parsedBody as any).encryptedMessage === 'string'\n        ) {\n          Logger.log(\n            `[MB CLIENT] Decrypting message from ${String(message.sender)}…`\n          )\n\n          const decrypted = await this.walletClient.decrypt({\n            protocolID: [1, 'messagebox'],\n            keyID: '1',\n            counterparty: message.sender,\n            ciphertext: Utils.toArray(\n              (parsedBody as any).encryptedMessage,\n              'base64'\n            )\n          })\n\n          const decryptedText = Utils.toUTF8(decrypted.plaintext)\n          message.body = tryParse(decryptedText)\n        } else {\n          message.body = parsedBody as string | Record<string, any>\n        }\n      } catch (err) {\n        Logger.error(\n          '[MB CLIENT ERROR] Failed to parse or decrypt message in list:',\n          err\n        )\n        message.body = '[Error: Failed to decrypt or parse message]'\n      }\n    }\n\n    // Sort newest‑first for a deterministic order\n    messages.sort(\n      (a, b) =>\n        Number((b as any).timestamp ?? 0) - Number((a as any).timestamp ?? 0)\n    )\n\n    return messages\n  }\n\n  /**\n   * @method acknowledgeMessage\n   * @async\n   * @param {AcknowledgeMessageParams} params - An object containing an array of message IDs to acknowledge.\n   * @returns {Promise<string>} - A string indicating the result, typically `'success'`.\n   *\n   * @description\n   * Notifies the MessageBox server(s) that one or more messages have been\n   * successfully received and processed by the client. Once acknowledged, these messages are removed\n   * from the recipient's inbox on the server(s).\n   *\n   * This operation is essential for proper message lifecycle management and prevents duplicate\n   * processing or delivery.\n   *\n   * Acknowledgment supports providing a host override, or will use overlay routing to find the appropriate server the received the given message.\n   *\n   * @throws {Error} If the message ID array is missing or empty, or if the request to the server fails.\n   *\n   * @example\n   * await client.acknowledgeMessage({ messageIds: ['msg123', 'msg456'] })\n   */\n  async acknowledgeMessage({ messageIds, host }: AcknowledgeMessageParams): Promise<string> {\n    await this.assertInitialized()\n    if (!Array.isArray(messageIds) || messageIds.length === 0) {\n      throw new Error('Message IDs array cannot be empty')\n    }\n\n    Logger.log(`[MB CLIENT] Acknowledging messages ${JSON.stringify(messageIds)}…`)\n\n    let hosts: string[] = host != null ? [host] : []\n    if (hosts.length === 0) {\n      // 1. Determine all hosts (advertised + default)\n      const identityKey = await this.getIdentityKey()\n      const advertisedHosts = await this.queryAdvertisements(identityKey)\n      hosts = Array.from(new Set([this.host, ...advertisedHosts.map(h => h.host)]))\n    }\n\n    // 2. Dispatch parallel acknowledge requests\n    const ackFromHost = async (host: string): Promise<string | null> => {\n      try {\n        const res = await this.authFetch.fetch(`${host}/acknowledgeMessage`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ messageIds })\n        })\n        if (!res.ok) throw new Error(`HTTP ${res.status}`)\n        const data = await res.json()\n        if (data.status === 'error') throw new Error(data.description)\n        Logger.log(`[MB CLIENT] Acknowledged on ${host}`)\n        return data.status as string\n      } catch (err) {\n        Logger.warn(`[MB CLIENT WARN] acknowledgeMessage failed for ${host}:`, err)\n        return null\n      }\n    }\n\n    const settled = await Promise.allSettled(hosts.map(ackFromHost))\n\n    const successes = settled.filter(\n      (r): r is PromiseFulfilledResult<string | null> => r.status === 'fulfilled'\n    )\n\n    const firstSuccess = successes.find(s => s.value != null)?.value\n\n    if (firstSuccess != null) {\n      return firstSuccess\n    }\n\n    // No host accepted the acknowledgement\n    const errs: any[] = []\n    for (const r of settled) {\n      if (r.status === 'rejected') errs.push(r.reason)\n    }\n    throw new Error(\n      `Failed to acknowledge messages on all hosts: ${errs.map(e => String(e)).join('; ')}`\n    )\n  }\n}\n", "/**\n * PeerPayClient\n *\n * Extends `MessageBoxClient` to enable Bitcoin payments using the MetaNet identity system.\n *\n * This client handles payment token creation, message transmission over HTTP/WebSocket,\n * payment reception (including acceptance and rejection logic), and listing of pending payments.\n *\n * It uses authenticated and encrypted message transmission to ensure secure payment flows\n * between identified peers on the BSV network.\n */\n\nimport { MessageBoxClient } from './MessageBoxClient.js'\nimport { PeerMessage } from './types.js'\nimport { WalletClient, P2PKH, PublicKey, createNonce, AtomicBEEF, AuthFetch, Base64String } from '@bsv/sdk'\nimport { Logger } from './Utils/logger.js'\n\nfunction safeParse<T> (input: any): T {\n  try {\n    return typeof input === 'string' ? JSON.parse(input) : input\n  } catch (e) {\n    Logger.error('[PP CLIENT] Failed to parse input in safeParse:', input)\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const fallback = {} as T\n    return fallback\n  }\n}\n\nexport const STANDARD_PAYMENT_MESSAGEBOX = 'payment_inbox'\nconst STANDARD_PAYMENT_OUTPUT_INDEX = 0\n\n/**\n * Configuration options for initializing PeerPayClient.\n */\nexport interface PeerPayClientConfig {\n  messageBoxHost?: string\n  walletClient: WalletClient\n  enableLogging?: boolean // Added optional logging flag\n}\n\n/**\n * Represents the parameters required to initiate a payment.\n */\nexport interface PaymentParams {\n  recipient: string\n  amount: number\n}\n\n/**\n * Represents a structured payment token.\n */\nexport interface PaymentToken {\n  customInstructions: {\n    derivationPrefix: Base64String\n    derivationSuffix: Base64String\n  }\n  transaction: AtomicBEEF\n  amount: number\n}\n\n/**\n * Represents an incoming payment received via MessageBox.\n */\nexport interface IncomingPayment {\n  messageId: string\n  sender: string\n  token: PaymentToken\n}\n\n/**\n * PeerPayClient enables peer-to-peer Bitcoin payments using MessageBox.\n */\nexport class PeerPayClient extends MessageBoxClient {\n  private readonly peerPayWalletClient: WalletClient\n  private _authFetchInstance?: AuthFetch\n\n  constructor (config: PeerPayClientConfig) {\n    const { messageBoxHost = 'https://messagebox.babbage.systems', walletClient, enableLogging = false } = config\n\n    // 🔹 Pass enableLogging to MessageBoxClient\n    super({ host: messageBoxHost, walletClient, enableLogging })\n\n    this.peerPayWalletClient = walletClient\n  }\n\n  private get authFetchInstance (): AuthFetch {\n    if (this._authFetchInstance === null || this._authFetchInstance === undefined) {\n      this._authFetchInstance = new AuthFetch(this.peerPayWalletClient)\n    }\n    return this._authFetchInstance\n  }\n\n  /**\n   * Generates a valid payment token for a recipient.\n   *\n   * This function derives a unique public key for the recipient, constructs a P2PKH locking script,\n   * and creates a payment action with the specified amount.\n   *\n   * @param {PaymentParams} payment - The payment details.\n   * @param {string} payment.recipient - The recipient's identity key.\n   * @param {number} payment.amount - The amount in satoshis to send.\n   * @returns {Promise<PaymentToken>} A valid payment token containing transaction details.\n   * @throws {Error} If the recipient's public key cannot be derived.\n   */\n  async createPaymentToken (payment: PaymentParams): Promise<PaymentToken> {\n    if (payment.amount <= 0) {\n      throw new Error('Invalid payment details: recipient and valid amount are required')\n    };\n\n    // Generate derivation paths using correct nonce function\n    const derivationPrefix = await createNonce(this.peerPayWalletClient)\n    const derivationSuffix = await createNonce(this.peerPayWalletClient)\n\n    Logger.log(`[PP CLIENT] Derivation Prefix: ${derivationPrefix}`)\n    Logger.log(`[PP CLIENT] Derivation Suffix: ${derivationSuffix}`)\n\n    // Get recipient's derived public key\n    const { publicKey: derivedKeyResult } = await this.peerPayWalletClient.getPublicKey({\n      protocolID: [2, '3241645161d8'],\n      keyID: `${derivationPrefix} ${derivationSuffix}`,\n      counterparty: payment.recipient\n    })\n\n    Logger.log(`[PP CLIENT] Derived Public Key: ${derivedKeyResult}`)\n\n    if (derivedKeyResult == null || derivedKeyResult.trim() === '') {\n      throw new Error('Failed to derive recipient’s public key')\n    }\n\n    // Create locking script using recipient's public key\n    const lockingScript = new P2PKH().lock(PublicKey.fromString(derivedKeyResult).toAddress()).toHex()\n\n    Logger.log(`[PP CLIENT] Locking Script: ${lockingScript}`)\n\n    // Create the payment action\n    const paymentAction = await this.peerPayWalletClient.createAction({\n      description: 'PeerPay payment',\n      outputs: [{\n        satoshis: payment.amount,\n        lockingScript,\n        customInstructions: JSON.stringify({\n          derivationPrefix,\n          derivationSuffix,\n          payee: payment.recipient\n        }),\n        outputDescription: 'Payment for PeerPay transaction'\n      }],\n      options: {\n        randomizeOutputs: false\n      }\n    })\n\n    if (paymentAction.tx === undefined) {\n      throw new Error('Transaction creation failed!')\n    }\n\n    Logger.log('[PP CLIENT] Payment Action:', paymentAction)\n\n    return {\n      customInstructions: {\n        derivationPrefix,\n        derivationSuffix\n      },\n      transaction: paymentAction.tx,\n      amount: payment.amount\n    }\n  }\n\n  /**\n   * Sends Bitcoin to a PeerPay recipient.\n   *\n   * This function validates the payment details and delegates the transaction\n   * to `sendLivePayment` for processing.\n   *\n   * @param {PaymentParams} payment - The payment details.\n   * @param {string} payment.recipient - The recipient's identity key.\n   * @param {number} payment.amount - The amount in satoshis to send.\n   * @returns {Promise<any>} Resolves with the payment result.\n   * @throws {Error} If the recipient is missing or the amount is invalid.\n   */\n  async sendPayment (payment: PaymentParams): Promise<any> {\n    if (payment.recipient == null || payment.recipient.trim() === '' || payment.amount <= 0) {\n      throw new Error('Invalid payment details: recipient and valid amount are required')\n    }\n\n    const paymentToken = await this.createPaymentToken(payment)\n\n    // Ensure the recipient is included before sending\n    await this.sendMessage({\n      recipient: payment.recipient,\n      messageBox: STANDARD_PAYMENT_MESSAGEBOX,\n      body: JSON.stringify(paymentToken)\n    })\n  }\n\n  /**\n   * Sends Bitcoin to a PeerPay recipient over WebSockets.\n   *\n   * This function generates a payment token and transmits it over WebSockets\n   * using `sendLiveMessage`. The recipient’s identity key is explicitly included\n   * to ensure proper message routing.\n   *\n   * @param {PaymentParams} payment - The payment details.\n   * @param {string} payment.recipient - The recipient's identity key.\n   * @param {number} payment.amount - The amount in satoshis to send.\n   * @returns {Promise<void>} Resolves when the payment has been sent.\n   * @throws {Error} If payment token generation fails.\n   */\n  async sendLivePayment (payment: PaymentParams): Promise<void> {\n    const paymentToken = await this.createPaymentToken(payment)\n\n    try {\n      // Attempt WebSocket first\n      await this.sendLiveMessage({\n        recipient: payment.recipient,\n        messageBox: STANDARD_PAYMENT_MESSAGEBOX,\n        body: JSON.stringify(paymentToken)\n      })\n    } catch (err) {\n      Logger.warn('[PP CLIENT] sendLiveMessage failed, falling back to HTTP:', err)\n\n      // Fallback to HTTP if WebSocket fails\n      await this.sendMessage({\n        recipient: payment.recipient,\n        messageBox: STANDARD_PAYMENT_MESSAGEBOX,\n        body: JSON.stringify(paymentToken)\n      })\n    }\n  }\n\n  /**\n   * Listens for incoming Bitcoin payments over WebSockets.\n   *\n   * This function listens for messages in the standard payment message box and\n   * converts incoming `PeerMessage` objects into `IncomingPayment` objects\n   * before invoking the `onPayment` callback.\n   *\n   * @param {Object} obj - The configuration object.\n   * @param {Function} obj.onPayment - Callback function triggered when a payment is received.\n   * @returns {Promise<void>} Resolves when the listener is successfully set up.\n   */\n  async listenForLivePayments ({\n    onPayment\n  }: { onPayment: (payment: IncomingPayment) => void }): Promise<void> {\n    await this.listenForLiveMessages({\n      messageBox: STANDARD_PAYMENT_MESSAGEBOX,\n\n      // Convert PeerMessage → IncomingPayment before calling onPayment\n      onMessage: (message: PeerMessage) => {\n        Logger.log('[MB CLIENT] Received Live Payment:', message)\n        const incomingPayment: IncomingPayment = {\n          messageId: message.messageId,\n          sender: message.sender,\n          token: safeParse<PaymentToken>(message.body)\n        }\n        Logger.log('[PP CLIENT] Converted PeerMessage to IncomingPayment:', incomingPayment)\n        onPayment(incomingPayment)\n      }\n    })\n  }\n\n  /**\n   * Accepts an incoming Bitcoin payment and moves it into the default wallet basket.\n   *\n   * This function processes a received payment by submitting it for internalization\n   * using the wallet client's `internalizeAction` method. The payment details\n   * are extracted from the `IncomingPayment` object.\n   *\n   * @param {IncomingPayment} payment - The payment object containing transaction details.\n   * @returns {Promise<any>} Resolves with the payment result if successful.\n   * @throws {Error} If payment processing fails.\n   */\n  async acceptPayment (payment: IncomingPayment): Promise<any> {\n    try {\n      Logger.log(`[PP CLIENT] Processing payment: ${JSON.stringify(payment, null, 2)}`)\n\n      const paymentResult = await this.peerPayWalletClient.internalizeAction({\n        tx: payment.token.transaction,\n        outputs: [{\n          paymentRemittance: {\n            derivationPrefix: payment.token.customInstructions.derivationPrefix,\n            derivationSuffix: payment.token.customInstructions.derivationSuffix,\n            senderIdentityKey: payment.sender\n          },\n          outputIndex: STANDARD_PAYMENT_OUTPUT_INDEX,\n          protocol: 'wallet payment'\n        }],\n        description: 'PeerPay Payment'\n      })\n\n      Logger.log(`[PP CLIENT] Payment internalized successfully: ${JSON.stringify(paymentResult, null, 2)}`)\n      Logger.log(`[PP CLIENT] Acknowledging payment with messageId: ${payment.messageId}`)\n\n      await this.acknowledgeMessage({ messageIds: [payment.messageId] })\n\n      return { payment, paymentResult }\n    } catch (error) {\n      Logger.error(`[PP CLIENT] Error accepting payment: ${String(error)}`)\n      return 'Unable to receive payment!'\n    }\n  }\n\n  /**\n   * Rejects an incoming Bitcoin payment by refunding it to the sender, minus a fee.\n   *\n   * If the payment amount is too small (less than 1000 satoshis after deducting the fee),\n   * the payment is simply acknowledged and ignored. Otherwise, the function first accepts\n   * the payment, then sends a new transaction refunding the sender.\n   *\n   * @param {IncomingPayment} payment - The payment object containing transaction details.\n   * @returns {Promise<void>} Resolves when the payment is either acknowledged or refunded.\n   */\n  async rejectPayment (payment: IncomingPayment): Promise<void> {\n    Logger.log(`[PP CLIENT] Rejecting payment: ${JSON.stringify(payment, null, 2)}`)\n\n    if (payment.token.amount - 1000 < 1000) {\n      Logger.log('[PP CLIENT] Payment amount too small after fee, just acknowledging.')\n\n      try {\n        Logger.log(`[PP CLIENT] Attempting to acknowledge message ${payment.messageId}...`)\n        if (this.authFetch === null || this.authFetch === undefined) {\n          Logger.warn('[PP CLIENT] Warning: authFetch is undefined! Ensure PeerPayClient is initialized correctly.')\n        }\n        Logger.log('[PP CLIENT] authFetch instance:', this.authFetch)\n        const response = await this.acknowledgeMessage({ messageIds: [payment.messageId] })\n        Logger.log(`[PP CLIENT] Acknowledgment response: ${response}`)\n      } catch (error: any) {\n        if (\n          error != null &&\n          typeof error === 'object' &&\n          'message' in error &&\n          typeof (error as { message: unknown }).message === 'string' &&\n          (error as { message: string }).message.includes('401')\n        ) {\n          Logger.warn(`[PP CLIENT] Authentication issue while acknowledging: ${(error as { message: string }).message}`)\n        } else {\n          Logger.error(`[PP CLIENT] Error acknowledging message: ${(error as { message: string }).message}`)\n          throw error // Only throw if it's another type of error\n        }\n      }\n\n      return\n    }\n\n    Logger.log('[PP CLIENT] Accepting payment before refunding...')\n    await this.acceptPayment(payment)\n\n    Logger.log(`[PP CLIENT] Sending refund of ${payment.token.amount - 1000} to ${payment.sender}...`)\n    await this.sendPayment({\n      recipient: payment.sender,\n      amount: payment.token.amount - 1000 // Deduct fee\n    })\n\n    Logger.log('[PP CLIENT] Payment successfully rejected and refunded.')\n\n    try {\n      Logger.log(`[PP CLIENT] Acknowledging message ${payment.messageId} after refunding...`)\n      await this.acknowledgeMessage({ messageIds: [payment.messageId] })\n      Logger.log('[PP CLIENT] Acknowledgment after refund successful.')\n    } catch (error: any) {\n      Logger.error(`[PP CLIENT] Error acknowledging message after refund: ${(error as { message: string }).message}`)\n    }\n  }\n\n  /**\n   * Retrieves a list of incoming Bitcoin payments from the message box.\n   *\n   * This function queries the message box for new messages and transforms\n   * them into `IncomingPayment` objects by extracting relevant fields.\n   *\n   * @returns {Promise<IncomingPayment[]>} Resolves with an array of pending payments.\n   */\n  async listIncomingPayments (): Promise<IncomingPayment[]> {\n    const messages = await this.listMessages({ messageBox: STANDARD_PAYMENT_MESSAGEBOX })\n\n    return messages.map((msg: any) => {\n      const parsedToken = safeParse<PaymentToken>(msg.body)\n\n      return {\n        messageId: msg.messageId,\n        sender: msg.sender,\n        token: parsedToken\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["withNativeArrayBuffer", "isBinary", "on", "decode", "_a", "value", "decode", "protocol", "protocol", "withNativeArrayBuffer", "isView", "withNativeBlob", "protocol", "PacketType", "value", "RESERVED_EVENTS", "Socket", "self", "self", "Socket", "socket", "lookup", "Socket", "url", "lookup", "host"]
}
