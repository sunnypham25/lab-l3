import { WalletInterface } from '../wallet/Wallet.interfaces.js';
export interface UploaderConfig {
    storageURL: string;
    wallet: WalletInterface;
}
export interface UploadableFile {
    data: number[];
    type: string;
}
export interface UploadFileResult {
    published: boolean;
    uhrpURL: string;
}
export interface FindFileData {
    name: string;
    size: string;
    mimeType: string;
    expiryTime: number;
}
export interface RenewFileResult {
    status: string;
    prevExpiryTime?: number;
    newExpiryTime?: number;
    amount?: number;
}
/**
 * The StorageUploader class provides client-side methods for:
 * - Uploading files with a specified retention period
 * - Finding file metadata by UHRP URL
 * - Listing all user uploads
 * - Renewing an existing advertisement's expiry time
 */
export declare class StorageUploader {
    private readonly authFetch;
    private readonly baseURL;
    /**
     * Creates a new StorageUploader instance.
     * @param {UploaderConfig} config - An object containing the storage server's URL and a wallet interface
     */
    constructor(config: UploaderConfig);
    /**
     * Requests information from the server to upload a file (including presigned URL and headers).
     * @private
     * @param {number} fileSize - The size of the file, in bytes
     * @param {number} retentionPeriod - The desired hosting time, in minutes
     * @returns {Promise<{ uploadURL: string; requiredHeaders: Record<string, string>; amount?: number }>}
     * @throws {Error} If the server returns a non-OK response or an error status
     */
    private getUploadInfo;
    /**
     * Performs the actual file upload (HTTP PUT) to the presigned URL returned by the server.
     * @private
     * @param {string} uploadURL - The presigned URL where the file is to be uploaded
     * @param {UploadableFile} file - The file to upload, including its raw data and MIME type
     * @param {Record<string, string>} requiredHeaders - Additional headers required by the server (e.g. content-length)
     * @returns {Promise<UploadFileResult>} An object indicating whether publishing was successful and the resulting UHRP URL
     * @throws {Error} If the server returns a non-OK response
     */
    private uploadFile;
    /**
     * Publishes a file to the storage server with the specified retention period.
     *
     * This will:
     * 1. Request an upload URL from the server.
     * 2. Perform an HTTP PUT to upload the fileâ€™s raw bytes.
     * 3. Return a UHRP URL referencing the file once published.
     *
     * @param {Object} params
     * @param {UploadableFile} params.file - The file data + type
     * @param {number} params.retentionPeriod - Number of minutes to host the file
     * @returns {Promise<UploadFileResult>} An object with the file's UHRP URL
     * @throws {Error} If the server or upload step returns a non-OK response
     */
    publishFile(params: {
        file: UploadableFile;
        retentionPeriod: number;
    }): Promise<UploadFileResult>;
    /**
     * Retrieves metadata for a file matching the given UHRP URL from the `/find` route.
     * @param {string} uhrpUrl - The UHRP URL, e.g. "uhrp://abcd..."
     * @returns {Promise<FindFileData>} An object with file name, size, MIME type, and expiry time
     * @throws {Error} If the server or the route returns an error
     */
    findFile(uhrpUrl: string): Promise<FindFileData>;
    /**
     * Lists all advertisements belonging to the user from the `/list` route.
     * @returns {Promise<any>} The array of uploads returned by the server
     * @throws {Error} If the server or the route returns an error
     */
    listUploads(): Promise<any>;
    /**
     * Renews the hosting time for an existing file advertisement identified by uhrpUrl.
     * Calls the `/renew` route to add `additionalMinutes` to the GCS customTime
     * and re-mint the advertisement token on-chain.
     *
     * @param {string} uhrpUrl - The UHRP URL of the file (e.g., "uhrp://abcd1234...")
     * @param {number} additionalMinutes - The number of minutes to extend
     * @returns {Promise<RenewFileResult>} An object with the new and previous expiry times, plus any cost
     * @throws {Error} If the request fails or the server returns an error
     */
    renewFile(uhrpUrl: string, additionalMinutes: number): Promise<RenewFileResult>;
}
//# sourceMappingURL=StorageUploader.d.ts.map