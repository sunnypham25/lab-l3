import { VerifiableCertificate } from './certificates/VerifiableCertificate.js';
export interface RequestedCertificateTypeIDAndFieldList {
    [certificateTypeID: string]: string[];
}
export interface RequestedCertificateSet {
    certifiers: string[];
    types: RequestedCertificateTypeIDAndFieldList;
}
export interface AuthMessage {
    version: string;
    messageType: 'initialRequest' | 'initialResponse' | 'certificateRequest' | 'certificateResponse' | 'general';
    identityKey: string;
    nonce?: string;
    initialNonce?: string;
    yourNonce?: string;
    certificates?: VerifiableCertificate[];
    requestedCertificates?: RequestedCertificateSet;
    payload?: number[];
    signature?: number[];
}
export interface Transport {
    send: (message: AuthMessage) => Promise<void>;
    onData: (callback: (message: AuthMessage) => Promise<void>) => Promise<void>;
}
export interface PeerSession {
    isAuthenticated: boolean;
    sessionNonce?: string;
    peerNonce?: string;
    peerIdentityKey?: string;
    lastUpdate: number;
}
//# sourceMappingURL=types.d.ts.map