import ChainTracker from '../ChainTracker.js';
import { HttpClient } from '../http/HttpClient.js';
/** Configuration options for the BlockHeadersService ChainTracker. */
export interface BlockHeadersServiceConfig {
    /** The HTTP client used to make requests to the API. */
    httpClient?: HttpClient;
    /** The API key used to authenticate requests to the BlockHeadersService API. */
    apiKey?: string;
}
/**
 * Represents a chain tracker based on a BlockHeadersService API.
 *
 * @example
 * ```typescript
 * const chainTracker = new BlockHeadersService('https://headers.spv.money', {
 *   apiKey: '17JxRHcJerGBEbusx56W8o1m8Js73TFGo'
 * })
 * ```
 */
export declare class BlockHeadersService implements ChainTracker {
    protected readonly baseUrl: string;
    protected readonly httpClient: HttpClient;
    protected readonly apiKey: string;
    /**
     * Constructs an instance of the BlockHeadersService ChainTracker.
     *
     * @param {string} baseUrl - The base URL for the BlockHeadersService API (e.g. https://headers.spv.money)
     * @param {BlockHeadersServiceConfig} config - Configuration options for the BlockHeadersService ChainTracker.
     */
    constructor(baseUrl: string, config?: BlockHeadersServiceConfig);
    /**
     * Verifies if a given merkle root is valid for a specific block height.
     *
     * @param {string} root - The merkle root to verify.
     * @param {number} height - The block height to check against.
     * @returns {Promise<boolean>} - A promise that resolves to true if the merkle root is valid for the specified block height, false otherwise.
     */
    isValidRootForHeight(root: string, height: number): Promise<boolean>;
    /**
     * Gets the current block height from the BlockHeadersService API.
     *
     * @returns {Promise<number>} - A promise that resolves to the current block height.
     */
    currentHeight(): Promise<number>;
}
//# sourceMappingURL=BlockHeadersService.d.ts.map