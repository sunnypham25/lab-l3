/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { HttpClient, HttpClientRequestOptions, HttpClientResponse } from './HttpClient.js';
/** Node Https module interface limited to options needed by ts-sdk */
export interface BinaryHttpsNodejs {
    request: (url: string, options: HttpClientRequestOptions, callback: (res: any) => void) => BinaryNodejsHttpClientRequest;
}
/** Nodejs result of the Node https.request call limited to options needed by ts-sdk */
export interface BinaryNodejsHttpClientRequest {
    write: (chunk: Buffer) => void;
    on: (event: string, callback: (data: any) => void) => void;
    end: (() => void) & (() => void);
}
/**
 * Adapter for Node Https module to be used as HttpClient
 */
export declare class BinaryNodejsHttpClient implements HttpClient {
    private readonly https;
    constructor(https: BinaryHttpsNodejs);
    request(url: string, requestOptions: HttpClientRequestOptions): Promise<HttpClientResponse>;
}
/** fetch function interface limited to options needed by ts-sdk */
/**
 * Makes a request to the server.
 * @param url The URL to make the request to.
 * @param options The request configuration.
 */
export type Fetch = (url: string, options: FetchOptions) => Promise<Response>;
/**
 * An interface for configuration of the request to be passed to the fetch method
 * limited to options needed by ts-sdk.
 */
export interface FetchOptions {
    /** A string to set request's method. */
    method?: string;
    /** An object literal set request's headers. */
    headers?: Record<string, string>;
    /** An object or null to set request's body. */
    body?: Buffer | Uint8Array | Blob | null;
}
/**
 * Adapter for Node Https module to be used as HttpClient
 */
export declare class BinaryFetchClient implements HttpClient {
    private readonly fetch;
    constructor(fetch: Fetch);
    request<D>(url: string, options: HttpClientRequestOptions): Promise<HttpClientResponse<D>>;
}
export declare function binaryHttpClient(): HttpClient;
//# sourceMappingURL=BinaryFetchClient.d.ts.map