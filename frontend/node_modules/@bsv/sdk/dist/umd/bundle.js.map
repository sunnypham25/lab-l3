{"version":3,"file":"bundle.js","sources":["webpack://bsv/./dist/esm/src/primitives/Curve.js","webpack://bsv/./dist/esm/src/transaction/Beef.js","webpack://bsv/./dist/esm/src/wallet/Wallet.interfaces.js","webpack://bsv/./dist/esm/src/wallet/WalletError.js","webpack://bsv/./dist/esm/src/wallet/substrates/WalletWireCalls.js","webpack://bsv/webpack/runtime/define_property_getters","webpack://bsv/webpack/runtime/has_own_property","webpack://bsv/webpack/runtime/make_namespace_object","webpack://bsv/./dist/esm/src/primitives/BigNumber.js","webpack://bsv/./dist/esm/src/primitives/Mersenne.js","webpack://bsv/./dist/esm/src/primitives/K256.js","webpack://bsv/./dist/esm/src/primitives/ReductionContext.js","webpack://bsv/./dist/esm/src/primitives/MontgomoryMethod.js","webpack://bsv/./dist/esm/src/primitives/BasePoint.js","webpack://bsv/./dist/esm/src/primitives/JacobianPoint.js","webpack://bsv/./dist/esm/src/primitives/Hash.js","webpack://bsv/./dist/esm/src/primitives/utils.js","webpack://bsv/./dist/esm/src/primitives/Point.js","webpack://bsv/./dist/esm/src/primitives/Signature.js","webpack://bsv/./dist/esm/src/primitives/DRBG.js","webpack://bsv/./dist/esm/src/primitives/ECDSA.js","webpack://bsv/./dist/esm/src/primitives/PublicKey.js","webpack://bsv/./dist/esm/src/primitives/Random.js","webpack://bsv/./dist/esm/src/primitives/Polynomial.js","webpack://bsv/./dist/esm/src/primitives/PrivateKey.js","webpack://bsv/./dist/esm/src/primitives/AESGCM.js","webpack://bsv/./dist/esm/src/primitives/SymmetricKey.js","webpack://bsv/./dist/esm/src/primitives/TransactionSignature.js","webpack://bsv/./dist/esm/src/primitives/Schnorr.js","webpack://bsv/./dist/esm/src/script/OP.js","webpack://bsv/./dist/esm/src/script/Script.js","webpack://bsv/./dist/esm/src/script/LockingScript.js","webpack://bsv/./dist/esm/src/script/UnlockingScript.js","webpack://bsv/./dist/esm/src/script/ScriptEvaluationError.js","webpack://bsv/./dist/esm/src/script/Spend.js","webpack://bsv/./dist/esm/src/script/templates/P2PKH.js","webpack://bsv/./dist/esm/src/script/templates/RPuzzle.js","webpack://bsv/./dist/esm/src/script/templates/PushDrop.js","webpack://bsv/./dist/esm/src/transaction/fee-models/SatoshisPerKilobyte.js","webpack://bsv/./dist/esm/src/transaction/http/NodejsHttpClient.js","webpack://bsv/./dist/esm/src/transaction/http/FetchHttpClient.js","webpack://bsv/./dist/esm/src/transaction/http/DefaultHttpClient.js","webpack://bsv/./dist/esm/src/transaction/broadcasters/ARC.js","webpack://bsv/./dist/esm/src/transaction/broadcasters/DefaultBroadcaster.js","webpack://bsv/./dist/esm/src/transaction/chaintrackers/WhatsOnChain.js","webpack://bsv/./dist/esm/src/transaction/chaintrackers/DefaultChainTracker.js","webpack://bsv/./dist/esm/src/transaction/MerklePath.js","webpack://bsv/./dist/esm/src/transaction/BeefTx.js","webpack://bsv/./dist/esm/src/transaction/Transaction.js","webpack://bsv/./dist/esm/src/transaction/Broadcaster.js","webpack://bsv/./dist/esm/src/transaction/BeefParty.js","webpack://bsv/./dist/esm/src/transaction/broadcasters/WhatsOnChainBroadcaster.js","webpack://bsv/./dist/esm/src/transaction/http/BinaryFetchClient.js","webpack://bsv/./dist/esm/src/transaction/broadcasters/Teranode.js","webpack://bsv/./dist/esm/src/transaction/chaintrackers/BlockHeadersService.js","webpack://bsv/./dist/esm/src/messages/SignedMessage.js","webpack://bsv/./dist/esm/src/messages/EncryptedMessage.js","webpack://bsv/./dist/esm/src/compat/BSM.js","webpack://bsv/./dist/esm/src/compat/HD.js","webpack://bsv/./dist/esm/src/compat/bip-39-wordlist-en.js","webpack://bsv/./dist/esm/src/compat/Mnemonic.js","webpack://bsv/./dist/esm/src/compat/ECIES.js","webpack://bsv/./dist/esm/src/compat/Utxo.js","webpack://bsv/./dist/esm/src/totp/totp.js","webpack://bsv/./dist/esm/src/wallet/KeyDeriver.js","webpack://bsv/./dist/esm/src/wallet/CachedKeyDeriver.js","webpack://bsv/./dist/esm/src/wallet/ProtoWallet.js","webpack://bsv/./dist/esm/src/wallet/substrates/window.CWI.js","webpack://bsv/./dist/esm/src/wallet/substrates/XDM.js","webpack://bsv/./dist/esm/src/auth/certificates/Certificate.js","webpack://bsv/./dist/esm/src/wallet/substrates/WalletWireTransceiver.js","webpack://bsv/./dist/esm/src/wallet/substrates/HTTPWalletWire.js","webpack://bsv/./dist/esm/src/wallet/WERR_REVIEW_ACTIONS.js","webpack://bsv/./dist/esm/src/wallet/substrates/HTTPWalletJSON.js","webpack://bsv/./dist/esm/src/wallet/substrates/utils/toOriginHeader.js","webpack://bsv/./dist/esm/src/wallet/substrates/ReactNativeWebView.js","webpack://bsv/./dist/esm/src/wallet/WalletClient.js","webpack://bsv/./dist/esm/src/wallet/substrates/WalletWireProcessor.js","webpack://bsv/./dist/esm/src/auth/certificates/MasterCertificate.js","webpack://bsv/./dist/esm/src/auth/certificates/VerifiableCertificate.js","webpack://bsv/./dist/esm/src/auth/certificates/__tests/CompletedProtoWallet.js","webpack://bsv/./dist/esm/src/auth/SessionManager.js","webpack://bsv/./dist/esm/src/auth/utils/verifyNonce.js","webpack://bsv/./dist/esm/src/auth/utils/createNonce.js","webpack://bsv/./dist/esm/src/auth/utils/getVerifiableCertificates.js","webpack://bsv/./dist/esm/src/auth/utils/validateCertificates.js","webpack://bsv/./dist/esm/src/auth/Peer.js","webpack://bsv/./dist/esm/src/auth/transports/SimplifiedFetchTransport.js","webpack://bsv/./dist/esm/src/auth/clients/AuthFetch.js","webpack://bsv/./dist/esm/src/overlay-tools/OverlayAdminTokenTemplate.js","webpack://bsv/./dist/esm/src/overlay-tools/LookupResolver.js","webpack://bsv/./dist/esm/src/overlay-tools/SHIPBroadcaster.js","webpack://bsv/./dist/esm/src/storage/StorageUtils.js","webpack://bsv/./dist/esm/src/storage/StorageUploader.js","webpack://bsv/./dist/esm/src/storage/StorageDownloader.js","webpack://bsv/./dist/esm/src/identity/types/index.js","webpack://bsv/./dist/esm/src/identity/IdentityClient.js","webpack://bsv/./dist/esm/src/registry/RegistryClient.js","webpack://bsv/./dist/esm/src/kvstore/LocalKVStore.js"],"sourcesContent":["import BigNumber from './BigNumber.js';\nimport ReductionContext from './ReductionContext.js';\nimport MontgomoryMethod from './MontgomoryMethod.js';\nimport Point from './Point.js';\nimport { toArray } from './utils.js';\n// This ensures that only one curve is ever created, enhancing performance.\n// This assumes there is never a need to have multiple distinct Curve instances.\n// So far, this assumption has proven to be valid.\nlet globalCurve;\nexport default class Curve {\n    p;\n    red;\n    redN;\n    zero;\n    one;\n    two;\n    g;\n    n;\n    a;\n    b;\n    tinv;\n    zeroA;\n    threeA;\n    endo; // beta, lambda, basis\n    _endoWnafT1;\n    _endoWnafT2;\n    _wnafT1;\n    _wnafT2;\n    _wnafT3;\n    _wnafT4;\n    _bitLength;\n    // Represent num in a w-NAF form\n    static assert(expression, message = 'Elliptic curve assertion failed') {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n    getNAF(num, w, bits) {\n        const naf = new Array(Math.max(num.bitLength(), bits) + 1);\n        naf.fill(0);\n        const ws = 1 << (w + 1);\n        const k = num.clone();\n        for (let i = 0; i < naf.length; i++) {\n            let z;\n            const mod = k.andln(ws - 1);\n            if (k.isOdd()) {\n                if (mod > (ws >> 1) - 1) {\n                    z = (ws >> 1) - mod;\n                }\n                else {\n                    z = mod;\n                }\n                k.isubn(z);\n            }\n            else {\n                z = 0;\n            }\n            naf[i] = z;\n            k.iushrn(1);\n        }\n        return naf;\n    }\n    // Represent k1, k2 in a Joint Sparse Form\n    getJSF(k1, k2) {\n        const jsf = [[], []];\n        k1 = k1.clone();\n        k2 = k2.clone();\n        let d1 = 0;\n        let d2 = 0;\n        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n            // First phase\n            let m14 = (k1.andln(3) + d1) & 3;\n            let m24 = (k2.andln(3) + d2) & 3;\n            if (m14 === 3) {\n                m14 = -1;\n            }\n            if (m24 === 3) {\n                m24 = -1;\n            }\n            let u1;\n            if ((m14 & 1) === 0) {\n                u1 = 0;\n            }\n            else {\n                const m8 = (k1.andln(7) + d1) & 7;\n                if ((m8 === 3 || m8 === 5) && m24 === 2) {\n                    u1 = -m14;\n                }\n                else {\n                    u1 = m14;\n                }\n            }\n            jsf[0].push(u1);\n            let u2;\n            if ((m24 & 1) === 0) {\n                u2 = 0;\n            }\n            else {\n                const m8 = (k2.andln(7) + d2) & 7;\n                if ((m8 === 3 || m8 === 5) && m14 === 2) {\n                    u2 = -m24;\n                }\n                else {\n                    u2 = m24;\n                }\n            }\n            jsf[1].push(u2);\n            // Second phase\n            if (2 * d1 === u1 + 1) {\n                d1 = 1 - d1;\n            }\n            if (2 * d2 === u2 + 1) {\n                d2 = 1 - d2;\n            }\n            k1.iushrn(1);\n            k2.iushrn(1);\n        }\n        return jsf;\n    }\n    static cachedProperty(obj, name, computer) {\n        const key = '_' + name;\n        obj.prototype[name] = function cachedProperty() {\n            const r = this[key] !== undefined ? this[key] : (this[key] = computer.call(this));\n            return r;\n        };\n    }\n    static parseBytes(bytes) {\n        return typeof bytes === 'string' ? toArray(bytes, 'hex') : bytes;\n    }\n    static intFromLE(bytes) {\n        return new BigNumber(bytes, 'hex', 'le');\n    }\n    constructor() {\n        if (typeof globalCurve !== 'undefined') {\n            return globalCurve;\n        }\n        else {\n            /* eslint-disable @typescript-eslint/no-this-alias */\n            globalCurve = this;\n        }\n        const precomputed = {\n            doubles: {\n                step: 4,\n                points: [\n                    [\n                        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n                        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n                    ],\n                    [\n                        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n                        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n                    ],\n                    [\n                        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n                        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n                    ],\n                    [\n                        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n                        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n                    ],\n                    [\n                        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n                        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n                    ],\n                    [\n                        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n                        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n                    ],\n                    [\n                        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n                        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n                    ],\n                    [\n                        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n                        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n                    ],\n                    [\n                        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n                        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n                    ],\n                    [\n                        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n                        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n                    ],\n                    [\n                        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n                        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n                    ],\n                    [\n                        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n                        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n                    ],\n                    [\n                        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n                        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n                    ],\n                    [\n                        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n                        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n                    ],\n                    [\n                        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n                        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n                    ],\n                    [\n                        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n                        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n                    ],\n                    [\n                        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n                        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n                    ],\n                    [\n                        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n                        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n                    ],\n                    [\n                        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n                        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n                    ],\n                    [\n                        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n                        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n                    ],\n                    [\n                        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n                        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n                    ],\n                    [\n                        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n                        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n                    ],\n                    [\n                        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n                        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n                    ],\n                    [\n                        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n                        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n                    ],\n                    [\n                        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n                        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n                    ],\n                    [\n                        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n                        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n                    ],\n                    [\n                        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n                        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n                    ],\n                    [\n                        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n                        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n                    ],\n                    [\n                        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n                        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n                    ],\n                    [\n                        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n                        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n                    ],\n                    [\n                        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n                        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n                    ],\n                    [\n                        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n                        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n                    ],\n                    [\n                        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n                        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n                    ],\n                    [\n                        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n                        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n                    ],\n                    [\n                        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n                        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n                    ],\n                    [\n                        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n                        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n                    ],\n                    [\n                        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n                        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n                    ],\n                    [\n                        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n                        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n                    ],\n                    [\n                        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n                        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n                    ],\n                    [\n                        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n                        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n                    ],\n                    [\n                        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n                        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n                    ],\n                    [\n                        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n                        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n                    ],\n                    [\n                        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n                        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n                    ],\n                    [\n                        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n                        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n                    ],\n                    [\n                        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n                        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n                    ],\n                    [\n                        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n                        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n                    ],\n                    [\n                        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n                        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n                    ],\n                    [\n                        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n                        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n                    ],\n                    [\n                        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n                        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n                    ],\n                    [\n                        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n                        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n                    ],\n                    [\n                        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n                        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n                    ],\n                    [\n                        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n                        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n                    ],\n                    [\n                        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n                        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n                    ],\n                    [\n                        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n                        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n                    ],\n                    [\n                        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n                        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n                    ],\n                    [\n                        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n                        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n                    ],\n                    [\n                        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n                        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n                    ],\n                    [\n                        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n                        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n                    ],\n                    [\n                        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n                        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n                    ],\n                    [\n                        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n                        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n                    ],\n                    [\n                        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n                        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n                    ],\n                    [\n                        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n                        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n                    ],\n                    [\n                        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n                        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n                    ],\n                    [\n                        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n                        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n                    ],\n                    [\n                        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n                        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n                    ]\n                ]\n            },\n            naf: {\n                wnd: 7,\n                points: [\n                    [\n                        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n                        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n                    ],\n                    [\n                        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n                        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n                    ],\n                    [\n                        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n                        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n                    ],\n                    [\n                        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n                        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n                    ],\n                    [\n                        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n                        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n                    ],\n                    [\n                        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n                        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n                    ],\n                    [\n                        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n                        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n                    ],\n                    [\n                        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n                        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n                    ],\n                    [\n                        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n                        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n                    ],\n                    [\n                        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n                        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n                    ],\n                    [\n                        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n                        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n                    ],\n                    [\n                        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n                        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n                    ],\n                    [\n                        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n                        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n                    ],\n                    [\n                        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n                        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n                    ],\n                    [\n                        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n                        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n                    ],\n                    [\n                        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n                        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n                    ],\n                    [\n                        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n                        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n                    ],\n                    [\n                        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n                        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n                    ],\n                    [\n                        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n                        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n                    ],\n                    [\n                        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n                        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n                    ],\n                    [\n                        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n                        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n                    ],\n                    [\n                        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n                        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n                    ],\n                    [\n                        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n                        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n                    ],\n                    [\n                        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n                        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n                    ],\n                    [\n                        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n                        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n                    ],\n                    [\n                        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n                        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n                    ],\n                    [\n                        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n                        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n                    ],\n                    [\n                        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n                        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n                    ],\n                    [\n                        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n                        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n                    ],\n                    [\n                        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n                        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n                    ],\n                    [\n                        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n                        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n                    ],\n                    [\n                        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n                        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n                    ],\n                    [\n                        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n                        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n                    ],\n                    [\n                        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n                        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n                    ],\n                    [\n                        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n                        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n                    ],\n                    [\n                        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n                        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n                    ],\n                    [\n                        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n                        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n                    ],\n                    [\n                        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n                        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n                    ],\n                    [\n                        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n                        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n                    ],\n                    [\n                        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n                        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n                    ],\n                    [\n                        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n                        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n                    ],\n                    [\n                        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n                        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n                    ],\n                    [\n                        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n                        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n                    ],\n                    [\n                        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n                        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n                    ],\n                    [\n                        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n                        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n                    ],\n                    [\n                        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n                        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n                    ],\n                    [\n                        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n                        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n                    ],\n                    [\n                        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n                        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n                    ],\n                    [\n                        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n                        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n                    ],\n                    [\n                        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n                        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n                    ],\n                    [\n                        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n                        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n                    ],\n                    [\n                        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n                        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n                    ],\n                    [\n                        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n                        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n                    ],\n                    [\n                        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n                        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n                    ],\n                    [\n                        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n                        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n                    ],\n                    [\n                        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n                        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n                    ],\n                    [\n                        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n                        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n                    ],\n                    [\n                        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n                        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n                    ],\n                    [\n                        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n                        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n                    ],\n                    [\n                        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n                        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n                    ],\n                    [\n                        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n                        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n                    ],\n                    [\n                        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n                        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n                    ],\n                    [\n                        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n                        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n                    ],\n                    [\n                        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n                        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n                    ],\n                    [\n                        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n                        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n                    ],\n                    [\n                        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n                        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n                    ],\n                    [\n                        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n                        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n                    ],\n                    [\n                        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n                        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n                    ],\n                    [\n                        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n                        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n                    ],\n                    [\n                        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n                        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n                    ],\n                    [\n                        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n                        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n                    ],\n                    [\n                        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n                        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n                    ],\n                    [\n                        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n                        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n                    ],\n                    [\n                        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n                        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n                    ],\n                    [\n                        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n                        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n                    ],\n                    [\n                        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n                        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n                    ],\n                    [\n                        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n                        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n                    ],\n                    [\n                        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n                        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n                    ],\n                    [\n                        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n                        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n                    ],\n                    [\n                        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n                        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n                    ],\n                    [\n                        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n                        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n                    ],\n                    [\n                        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n                        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n                    ],\n                    [\n                        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n                        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n                    ],\n                    [\n                        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n                        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n                    ],\n                    [\n                        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n                        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n                    ],\n                    [\n                        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n                        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n                    ],\n                    [\n                        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n                        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n                    ],\n                    [\n                        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n                        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n                    ],\n                    [\n                        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n                        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n                    ],\n                    [\n                        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n                        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n                    ],\n                    [\n                        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n                        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n                    ],\n                    [\n                        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n                        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n                    ],\n                    [\n                        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n                        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n                    ],\n                    [\n                        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n                        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n                    ],\n                    [\n                        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n                        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n                    ],\n                    [\n                        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n                        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n                    ],\n                    [\n                        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n                        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n                    ],\n                    [\n                        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n                        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n                    ],\n                    [\n                        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n                        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n                    ],\n                    [\n                        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n                        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n                    ],\n                    [\n                        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n                        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n                    ],\n                    [\n                        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n                        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n                    ],\n                    [\n                        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n                        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n                    ],\n                    [\n                        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n                        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n                    ],\n                    [\n                        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n                        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n                    ],\n                    [\n                        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n                        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n                    ],\n                    [\n                        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n                        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n                    ],\n                    [\n                        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n                        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n                    ],\n                    [\n                        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n                        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n                    ],\n                    [\n                        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n                        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n                    ],\n                    [\n                        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n                        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n                    ],\n                    [\n                        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n                        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n                    ],\n                    [\n                        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n                        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n                    ],\n                    [\n                        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n                        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n                    ],\n                    [\n                        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n                        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n                    ],\n                    [\n                        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n                        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n                    ],\n                    [\n                        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n                        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n                    ],\n                    [\n                        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n                        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n                    ],\n                    [\n                        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n                        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n                    ],\n                    [\n                        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n                        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n                    ],\n                    [\n                        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n                        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n                    ],\n                    [\n                        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n                        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n                    ],\n                    [\n                        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n                        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n                    ],\n                    [\n                        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n                        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n                    ],\n                    [\n                        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n                        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n                    ],\n                    [\n                        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n                        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n                    ],\n                    [\n                        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n                        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n                    ]\n                ]\n            }\n        };\n        const conf = {\n            prime: 'k256',\n            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n            a: '0',\n            b: '7',\n            n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n            h: '1',\n            // Precomputed endomorphism\n            beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n            lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n            basis: [\n                {\n                    a: '3086d221a7d46bcde86c90e49284eb15',\n                    b: '-e4437ed6010e88286f547fa90abfe4c3'\n                },\n                {\n                    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n                    b: '3086d221a7d46bcde86c90e49284eb15'\n                }\n            ],\n            gRed: false,\n            g: [\n                '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n                '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n                precomputed\n            ]\n        };\n        this.p = new BigNumber(conf.p, 16);\n        // Use Montgomery, when there is no fast reduction for the prime\n        this.red = new ReductionContext(conf.prime);\n        // Useful for many curves\n        this.zero = new BigNumber(0).toRed(this.red);\n        this.one = new BigNumber(1).toRed(this.red);\n        this.two = new BigNumber(2).toRed(this.red);\n        // Curve configuration, optional\n        this.n = new BigNumber(conf.n, 16);\n        this.g = Point.fromJSON(conf.g, conf.gRed);\n        // Temporary arrays\n        this._wnafT1 = new Array(4);\n        this._wnafT2 = new Array(4);\n        this._wnafT3 = new Array(4);\n        this._wnafT4 = new Array(4);\n        this._bitLength = this.n.bitLength();\n        this.redN = this.n.toRed(this.red);\n        this.a = new BigNumber(conf.a, 16).toRed(this.red);\n        this.b = new BigNumber(conf.b, 16).toRed(this.red);\n        this.tinv = this.two.redInvm();\n        this.zeroA = this.a.fromRed().cmpn(0) === 0;\n        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n        // If the curve is endomorphic, precalculate beta and lambda\n        this.endo = this._getEndomorphism(conf);\n        this._endoWnafT1 = new Array(4);\n        this._endoWnafT2 = new Array(4);\n    }\n    _getEndomorphism(conf) {\n        // No efficient endomorphism\n        if (!this.zeroA || this.p.modrn(3) !== 1) {\n            return;\n        }\n        // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n        let beta;\n        let lambda;\n        if (conf.beta !== undefined) {\n            beta = new BigNumber(conf.beta, 16).toRed(this.red);\n        }\n        else {\n            const betas = this._getEndoRoots(this.p);\n            if (betas === null) {\n                throw new Error('Failed to get endomorphism roots for beta.');\n            }\n            // Choose the smallest beta\n            beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n            beta = beta.toRed(this.red);\n        }\n        if (conf.lambda !== undefined) {\n            lambda = new BigNumber(conf.lambda, 16);\n        }\n        else {\n            // Choose the lambda that matches selected beta\n            const lambdas = this._getEndoRoots(this.n);\n            if (lambdas === null) {\n                throw new Error('Failed to get endomorphism roots for lambda.');\n            }\n            if (this.g == null) {\n                throw new Error('Curve generator point (g) is not defined.');\n            }\n            const gMulX = this.g.mul(lambdas[0])?.x;\n            const gXRedMulBeta = (this.g.x != null) ? this.g.x.redMul(beta) : undefined;\n            if ((gMulX != null) && (gXRedMulBeta != null) && gMulX.cmp(gXRedMulBeta) === 0) {\n                lambda = lambdas[0];\n            }\n            else {\n                lambda = lambdas[1];\n                if (this.g == null) {\n                    throw new Error('Curve generator point (g) is not defined.');\n                }\n                const gMulX = this.g.mul(lambda)?.x;\n                const gXRedMulBeta = (this.g.x != null) ? this.g.x.redMul(beta) : undefined;\n                if ((gMulX == null) || (gXRedMulBeta == null)) {\n                    throw new Error('Lambda computation failed: g.mul(lambda).x or g.x.redMul(beta) is undefined.');\n                }\n                Curve.assert(gMulX.cmp(gXRedMulBeta) === 0, 'Lambda selection does not match computed beta.');\n            }\n        }\n        // Get basis vectors, used for balanced length-two representation\n        let basis;\n        if (typeof conf.basis === 'object' && conf.basis !== null) {\n            basis = conf.basis.map(function (vec) {\n                return {\n                    a: new BigNumber(vec.a, 16),\n                    b: new BigNumber(vec.b, 16)\n                };\n            });\n        }\n        else {\n            basis = this._getEndoBasis(lambda);\n        }\n        return {\n            beta,\n            lambda,\n            basis\n        };\n    }\n    _getEndoRoots(num) {\n        // Find roots of for x^2 + x + 1 in F\n        // Root = (-1 +- Sqrt(-3)) / 2\n        //\n        const red = num === this.p ? this.red : new MontgomoryMethod(num);\n        const tinv = new BigNumber(2).toRed(red).redInvm();\n        const ntinv = tinv.redNeg();\n        const s = new BigNumber(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n        const l1 = ntinv.redAdd(s).fromRed();\n        const l2 = ntinv.redSub(s).fromRed();\n        return [l1, l2];\n    }\n    _getEndoBasis(lambda) {\n        // aprxSqrt >= sqrt(this.n)\n        const aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n        // 3.74\n        // Run EGCD, until r(L + 1) < aprxSqrt\n        let u = lambda;\n        let v = this.n.clone();\n        let x1 = new BigNumber(1);\n        let y1 = new BigNumber(0);\n        let x2 = new BigNumber(0);\n        let y2 = new BigNumber(1);\n        // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n        let a0;\n        let b0;\n        // First vector\n        let a1;\n        let b1;\n        // Second vector\n        let a2;\n        let b2;\n        let prevR = new BigNumber(0);\n        let i = 0;\n        let r = new BigNumber(0);\n        let x = new BigNumber(0); // Ensure x is initialized\n        while (u.cmpn(0) !== 0) {\n            const q = v.div(u);\n            r = v.sub(q.mul(u));\n            x = x2.sub(q.mul(x1)); // Now TypeScript knows x is always assigned\n            const y = y2.sub(q.mul(y1));\n            if (a1 === undefined && r.cmp(aprxSqrt) < 0) {\n                a0 = prevR.neg();\n                b0 = x1;\n                a1 = r.neg();\n                b1 = x;\n            }\n            else if (a1 !== undefined && ++i === 2) {\n                break;\n            }\n            prevR = r;\n            v = u;\n            u = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        // Ensure a0 and b0 have been assigned\n        if (a0 === undefined ||\n            b0 === undefined ||\n            a1 === undefined ||\n            b1 === undefined) {\n            throw new Error('Failed to compute Endo Basis values');\n        }\n        a2 = r.neg();\n        b2 = x;\n        const len1 = a1.sqr().add(b1.sqr());\n        const len2 = a2.sqr().add(b2.sqr());\n        if (len2.cmp(len1) >= 0) {\n            a2 = a0;\n            b2 = b0;\n        }\n        // Normalize signs\n        if (a1.negative !== 0) {\n            a1 = a1.neg();\n            b1 = b1.neg();\n        }\n        if (a2.negative !== 0) {\n            a2 = a2.neg();\n            b2 = b2.neg();\n        }\n        return [\n            { a: a1, b: b1 },\n            { a: a2, b: b2 }\n        ];\n    }\n    _endoSplit(k) {\n        if (this.endo == null) {\n            throw new Error('Endomorphism is not defined.');\n        }\n        const basis = this.endo.basis;\n        const v1 = basis[0];\n        const v2 = basis[1];\n        const c1 = v2.b.mul(k).divRound(this.n);\n        const c2 = v1.b.neg().mul(k).divRound(this.n);\n        const p1 = c1.mul(v1.a);\n        const p2 = c2.mul(v2.a);\n        const q1 = c1.mul(v1.b);\n        const q2 = c2.mul(v2.b);\n        // Calculate answer\n        const k1 = k.sub(p1).sub(p2);\n        const k2 = q1.add(q2).neg();\n        return { k1, k2 };\n    }\n    validate(point) {\n        if (point.inf) {\n            return true;\n        }\n        const x = point.x;\n        const y = point.y;\n        // Ensure x and y are not null before proceeding\n        if (x === null || y === null) {\n            throw new Error('Point coordinates cannot be null');\n        }\n        const ax = this.a.redMul(x);\n        const rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n        return y.redSqr().redISub(rhs).cmpn(0) === 0;\n    }\n}\n//# sourceMappingURL=Curve.js.map","import MerklePath from './MerklePath.js';\nimport BeefTx from './BeefTx.js';\nimport { Reader, Writer, toHex, toArray } from '../primitives/utils.js';\nimport { hash256 } from '../primitives/Hash.js';\nfunction verifyTruthy(v) {\n    if (v == null)\n        throw new Error('Expected a valid value, but got undefined.');\n    return v;\n}\nexport const BEEF_V1 = 4022206465; // 0100BEEF in LE order\nexport const BEEF_V2 = 4022206466; // 0200BEEF in LE order\nexport const ATOMIC_BEEF = 0x01010101; // 01010101\nexport var TX_DATA_FORMAT;\n(function (TX_DATA_FORMAT) {\n    TX_DATA_FORMAT[TX_DATA_FORMAT[\"RAWTX\"] = 0] = \"RAWTX\";\n    TX_DATA_FORMAT[TX_DATA_FORMAT[\"RAWTX_AND_BUMP_INDEX\"] = 1] = \"RAWTX_AND_BUMP_INDEX\";\n    TX_DATA_FORMAT[TX_DATA_FORMAT[\"TXID_ONLY\"] = 2] = \"TXID_ONLY\";\n})(TX_DATA_FORMAT || (TX_DATA_FORMAT = {}));\n/*\n * BEEF standard: BRC-62: Background Evaluation Extended Format (BEEF) Transactions\n * https://github.com/bsv-blockchain/BRCs/blob/master/transactions/0062.md\n *\n * BUMP standard: BRC-74: BSV Unified Merkle Path (BUMP) Format\n * https://github.com/bsv-blockchain/BRCs/blob/master/transactions/0074.md\n *\n * BRC-95: Atomic BEEF Transactions\n * https://github.com/bsv-blockchain/BRCs/blob/master/transactions/0095.md\n *\n * The Atomic BEEF format is supported by the binary deserialization static method `fromBinary`.\n *\n * BRC-96: BEEF V2, Txid Only Extension\n * https://github.com/bsv-blockchain/BRCs/blob/master/transactions/0096.md\n *\n * A valid serialized BEEF is the cornerstone of Simplified Payment Validation (SPV)\n * where they are exchanged between two non-trusting parties to establish the\n * validity of a newly constructed bitcoin transaction and its inputs from prior\n * transactions.\n *\n * A `Beef` is fundamentally an list of `BUMP`s and a list of transactions.\n *\n * A `BUMP` is a partial merkle tree for a 'mined' bitcoin block.\n * It can therefore be used to prove the validity of transaction data\n * for each transaction txid whose merkle path is included in the tree.\n *\n * To be valid, the list of transactions must be sorted in dependency order:\n * oldest transaction first;\n * and each transaction must either\n * have a merkle path in one of the BUMPs, or\n * have all of its input transactions included in the list of transactions.\n *\n * The `Beef` class supports the construction of valid BEEFs by allowing BUMPs\n * (merkle paths) and transactions to be merged sequentially.\n *\n * The `Beef` class also extends the standard by supporting 'known' transactions.\n * A 'known' transaction is represented solely by its txid.\n * To become valid, all the 'known' transactions in a `Beef` must be replaced by full\n * transactions and merkle paths, if they are mined.\n *\n * The purpose of supporting 'known' transactions is that one or both parties\n * generating and exchanging BEEFs often possess partial knowledge of valid transactions\n * due to their history.\n *\n * A valid `Beef` is only required when sent to a party with no shared history,\n * such as a transaction processor.\n *\n * IMPORTANT NOTE:\n * It is fundamental to the BEEF value proposition that only valid transactions and valid\n * merkle path (BUMP) data be added to it. Merging invalid data breaks the `verify` and `isValid`\n * functions. There is no support for removing invalid data. A `Beef` that becomes invalid\n * must be discarded.\n */\nexport class Beef {\n    bumps = [];\n    txs = [];\n    version = BEEF_V2;\n    atomicTxid = undefined;\n    constructor(version = BEEF_V2) {\n        this.version = version;\n    }\n    /**\n     * @param txid of `beefTx` to find\n     * @returns `BeefTx` in `txs` with `txid`.\n     */\n    findTxid(txid) {\n        return this.txs.find((tx) => tx.txid === txid);\n    }\n    /**\n     * Replaces `BeefTx` for this txid with txidOnly.\n     *\n     * Replacement is done so that a `clone()` can be\n     * updated by this method without affecting the\n     * original.\n     *\n     * @param txid\n     * @returns undefined if txid is unknown.\n     */\n    makeTxidOnly(txid) {\n        const i = this.txs.findIndex((tx) => tx.txid === txid);\n        if (i === -1)\n            return undefined;\n        let btx = this.txs[i];\n        if (btx.isTxidOnly) {\n            return btx;\n        }\n        this.txs.splice(i, 1);\n        btx = this.mergeTxidOnly(txid);\n        return btx;\n    }\n    /**\n     * @returns `MerklePath` with level zero hash equal to txid or undefined.\n     */\n    findBump(txid) {\n        return this.bumps.find((b) => b.path[0].some((leaf) => leaf.hash === txid) // ✅ Ensure boolean return with `.some()`\n        );\n    }\n    /**\n     * Finds a Transaction in this `Beef`\n     * and adds any missing input SourceTransactions from this `Beef`.\n     *\n     * The result is suitable for signing.\n     *\n     * @param txid The id of the target transaction.\n     * @returns Transaction with all available input `SourceTransaction`s from this Beef.\n     */\n    findTransactionForSigning(txid) {\n        const beefTx = this.findTxid(txid);\n        if ((beefTx == null) || (beefTx.tx == null))\n            return undefined; // Ensure beefTx.tx exists before using it\n        for (const i of beefTx.tx.inputs) {\n            if (i.sourceTransaction == null) {\n                const itx = this.findTxid(verifyTruthy(i.sourceTXID)); // Ensure sourceTXID is valid\n                if (itx != null) {\n                    i.sourceTransaction = itx.tx;\n                }\n            }\n        }\n        return beefTx.tx;\n    }\n    /**\n     * Builds the proof tree rooted at a specific `Transaction`.\n     *\n     * To succeed, the Beef must contain all the required transaction and merkle path data.\n     *\n     * @param txid The id of the target transaction.\n     * @returns Transaction with input `SourceTransaction` and `MerklePath` populated from this Beef.\n     */\n    findAtomicTransaction(txid) {\n        const beefTx = this.findTxid(txid);\n        if ((beefTx == null) || (beefTx.tx == null))\n            return undefined; // Ensure beefTx.tx exists before using it\n        const addInputProof = (beef, tx) => {\n            const mp = beef.findBump(tx.id('hex'));\n            if (mp != null) {\n                tx.merklePath = mp;\n            }\n            else {\n                for (const i of tx.inputs) {\n                    if (i.sourceTransaction == null) {\n                        const itx = beef.findTxid(verifyTruthy(i.sourceTXID)); // Ensure sourceTXID is valid\n                        if (itx != null) {\n                            i.sourceTransaction = itx.tx;\n                        }\n                    }\n                    if (i.sourceTransaction != null) {\n                        const mp = beef.findBump(i.sourceTransaction.id('hex'));\n                        if (mp != null) {\n                            i.sourceTransaction.merklePath = mp;\n                        }\n                        else {\n                            addInputProof(beef, i.sourceTransaction);\n                        }\n                    }\n                }\n            }\n        };\n        addInputProof(this, beefTx.tx); // Safe because we checked that beefTx.tx exists\n        return beefTx.tx;\n    }\n    /**\n     * Merge a MerklePath that is assumed to be fully valid.\n     * @param bump\n     * @returns index of merged bump\n     */\n    mergeBump(bump) {\n        let bumpIndex;\n        // If this proof is identical to another one previously added, we use that first. Otherwise, we try to merge it with proofs from the same block.\n        for (let i = 0; i < this.bumps.length; i++) {\n            const b = this.bumps[i];\n            if (b === bump) {\n                // Literally the same\n                return i;\n            }\n            if (b.blockHeight === bump.blockHeight) {\n                // Probably the same...\n                const rootA = b.computeRoot();\n                const rootB = bump.computeRoot();\n                if (rootA === rootB) {\n                    // Definitely the same... combine them to save space\n                    b.combine(bump);\n                    bumpIndex = i;\n                    break;\n                }\n            }\n        }\n        // if the proof is not yet added, add a new path.\n        if (bumpIndex === undefined) {\n            bumpIndex = this.bumps.length;\n            this.bumps.push(bump);\n        }\n        // Review if any transactions are proven by this bump\n        const b = this.bumps[bumpIndex];\n        for (const tx of this.txs) {\n            const txid = tx.txid;\n            if (tx.bumpIndex == null) { // ✅ Explicitly check for null or undefined\n                for (const n of b.path[0]) {\n                    if (n.hash === txid) {\n                        tx.bumpIndex = bumpIndex;\n                        n.txid = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return bumpIndex;\n    }\n    /**\n     * Merge a serialized transaction.\n     *\n     * Checks that a transaction with the same txid hasn't already been merged.\n     *\n     * Replaces existing transaction with same txid.\n     *\n     * @param rawTx\n     * @param bumpIndex Optional. If a number, must be valid index into bumps array.\n     * @returns txid of rawTx\n     */\n    mergeRawTx(rawTx, bumpIndex) {\n        const newTx = new BeefTx(rawTx, bumpIndex);\n        this.removeExistingTxid(newTx.txid);\n        this.txs.push(newTx);\n        this.tryToValidateBumpIndex(newTx);\n        return newTx;\n    }\n    /**\n     * Merge a `Transaction` and any referenced `merklePath` and `sourceTransaction`, recursifely.\n     *\n     * Replaces existing transaction with same txid.\n     *\n     * Attempts to match an existing bump to the new transaction.\n     *\n     * @param tx\n     * @returns txid of tx\n     */\n    mergeTransaction(tx) {\n        const txid = tx.id('hex');\n        this.removeExistingTxid(txid);\n        let bumpIndex;\n        if (tx.merklePath != null) {\n            bumpIndex = this.mergeBump(tx.merklePath);\n        }\n        const newTx = new BeefTx(tx, bumpIndex);\n        this.txs.push(newTx);\n        this.tryToValidateBumpIndex(newTx);\n        bumpIndex = newTx.bumpIndex;\n        if (bumpIndex === undefined) {\n            for (const input of tx.inputs) {\n                if (input.sourceTransaction != null) {\n                    this.mergeTransaction(input.sourceTransaction);\n                }\n            }\n        }\n        return newTx;\n    }\n    /**\n     * Removes an existing transaction from the BEEF, given its TXID\n     * @param txid TXID of the transaction to remove\n     */\n    removeExistingTxid(txid) {\n        const existingTxIndex = this.txs.findIndex((t) => t.txid === txid);\n        if (existingTxIndex >= 0) {\n            this.txs.splice(existingTxIndex, 1);\n        }\n    }\n    mergeTxidOnly(txid) {\n        let tx = this.txs.find((t) => t.txid === txid);\n        if (tx == null) {\n            tx = new BeefTx(txid);\n            this.txs.push(tx);\n            this.tryToValidateBumpIndex(tx);\n        }\n        return tx;\n    }\n    mergeBeefTx(btx) {\n        let beefTx = this.findTxid(btx.txid);\n        if (btx.isTxidOnly && (beefTx == null)) {\n            beefTx = this.mergeTxidOnly(btx.txid);\n        }\n        else if ((btx._tx != null) && ((beefTx == null) || beefTx.isTxidOnly)) {\n            beefTx = this.mergeTransaction(btx._tx);\n        }\n        else if ((btx._rawTx != null) && ((beefTx == null) || beefTx.isTxidOnly)) {\n            beefTx = this.mergeRawTx(btx._rawTx);\n        }\n        if (beefTx == null) {\n            throw new Error(`Failed to merge BeefTx for txid: ${btx.txid}`);\n        }\n        return beefTx;\n    }\n    mergeBeef(beef) {\n        const b = Array.isArray(beef) ? Beef.fromBinary(beef) : beef;\n        for (const bump of b.bumps) {\n            this.mergeBump(bump);\n        }\n        for (const tx of b.txs) {\n            this.mergeBeefTx(tx);\n        }\n    }\n    /**\n     * Sorts `txs` and checks structural validity of beef.\n     *\n     * Does NOT verify merkle roots.\n     *\n     * Validity requirements:\n     * 1. No 'known' txids, unless `allowTxidOnly` is true.\n     * 2. All transactions have bumps or their inputs chain back to bumps (or are known).\n     * 3. Order of transactions satisfies dependencies before dependents.\n     * 4. No transactions with duplicate txids.\n     *\n     * @param allowTxidOnly optional. If true, transaction txid only is assumed valid\n     */\n    isValid(allowTxidOnly) {\n        return this.verifyValid(allowTxidOnly).valid;\n    }\n    /**\n     * Sorts `txs` and confirms validity of transaction data contained in beef\n     * by validating structure of this beef and confirming computed merkle roots\n     * using `chainTracker`.\n     *\n     * Validity requirements:\n     * 1. No 'known' txids, unless `allowTxidOnly` is true.\n     * 2. All transactions have bumps or their inputs chain back to bumps (or are known).\n     * 3. Order of transactions satisfies dependencies before dependents.\n     * 4. No transactions with duplicate txids.\n     *\n     * @param chainTracker Used to verify computed merkle path roots for all bump txids.\n     * @param allowTxidOnly optional. If true, transaction txid is assumed valid\n     */\n    async verify(chainTracker, allowTxidOnly) {\n        const r = this.verifyValid(allowTxidOnly);\n        if (!r.valid)\n            return false;\n        for (const height of Object.keys(r.roots)) {\n            const isValid = await chainTracker.isValidRootForHeight(r.roots[height], Number(height));\n            if (!isValid) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Sorts `txs` and confirms validity of transaction data contained in beef\n     * by validating structure of this beef.\n     *\n     * Returns block heights and merkle root values to be confirmed by a chaintracker.\n     *\n     * Validity requirements:\n     * 1. No 'known' txids, unless `allowTxidOnly` is true.\n     * 2. All transactions have bumps or their inputs chain back to bumps (or are known).\n     * 3. Order of transactions satisfies dependencies before dependents.\n     * 4. No transactions with duplicate txids.\n     *\n     * @param allowTxidOnly optional. If true, transaction txid is assumed valid\n     * @returns {{valid: boolean, roots: Record<number, string>}}\n     * `valid` is true iff this Beef is structuraly valid.\n     * `roots` is a record where keys are block heights and values are the corresponding merkle roots to be validated.\n     */\n    verifyValid(allowTxidOnly) {\n        const r = {\n            valid: false,\n            roots: {}\n        };\n        const sr = this.sortTxs();\n        if (sr.missingInputs.length > 0 ||\n            sr.notValid.length > 0 ||\n            (sr.txidOnly.length > 0 && allowTxidOnly !== true) ||\n            sr.withMissingInputs.length > 0) {\n            return r;\n        }\n        // valid txids: only txids if allowed, bump txids, then txids with input's in txids\n        const txids = {};\n        for (const tx of this.txs) {\n            if (tx.isTxidOnly) {\n                if (allowTxidOnly !== true)\n                    return r; // ✅ Explicit check for `true`\n                txids[tx.txid] = true;\n            }\n        }\n        const confirmComputedRoot = (b, txid) => {\n            const root = b.computeRoot(txid);\n            if (r.roots[b.blockHeight] === undefined || r.roots[b.blockHeight] === '') {\n                // accept the root as valid for this block and reuse for subsequent txids\n                r.roots[b.blockHeight] = root;\n            }\n            if (r.roots[b.blockHeight] !== root) {\n                return false;\n            }\n            return true;\n        };\n        for (const b of this.bumps) {\n            for (const n of b.path[0]) {\n                if (n.txid === true && typeof n.hash === 'string' && n.hash.length > 0) {\n                    txids[n.hash] = true;\n                    // All txid hashes in all bumps must agree on computed merkle path roots\n                    if (!confirmComputedRoot(b, n.hash)) {\n                        return r;\n                    }\n                }\n            }\n        }\n        // All txs with a bumpIndex have matching txid leaf at level zero of BUMP.\n        for (const t of this.txs) {\n            if (t.bumpIndex !== undefined) {\n                const leaf = this.bumps[t.bumpIndex].path[0].find(l => l.hash === t.txid);\n                if (leaf == null) {\n                    return r;\n                }\n            }\n        }\n        for (const t of this.txs) {\n            // all input txids must be included before they are referenced\n            for (const i of t.inputTxids) {\n                if (!txids[i])\n                    return r;\n            }\n            txids[t.txid] = true;\n        }\n        r.valid = true;\n        return r;\n    }\n    /**\n     * Serializes this data to `writer`\n     * @param writer\n     */\n    toWriter(writer) {\n        writer.writeUInt32LE(this.version);\n        writer.writeVarIntNum(this.bumps.length);\n        for (const b of this.bumps) {\n            writer.write(b.toBinary());\n        }\n        writer.writeVarIntNum(this.txs.length);\n        for (const tx of this.txs) {\n            tx.toWriter(writer, this.version);\n        }\n    }\n    /**\n     * Returns a binary array representing the serialized BEEF\n     * @returns A binary array representing the BEEF\n     */\n    toBinary() {\n        // Always serialize in dependency sorted order.\n        this.sortTxs();\n        const writer = new Writer();\n        this.toWriter(writer);\n        return writer.toArray();\n    }\n    /**\n     * Serialize this Beef as AtomicBEEF.\n     *\n     * `txid` must exist\n     *\n     * after sorting, if txid is not last txid, creates a clone and removes newer txs\n     *\n     * @param txid\n     * @returns serialized contents of this Beef with AtomicBEEF prefix.\n     */\n    toBinaryAtomic(txid) {\n        this.sortTxs();\n        const tx = this.findTxid(txid);\n        if (tx == null) {\n            throw new Error(`${txid} does not exist in this Beef`);\n        }\n        // If the transaction is not the last one, clone and modify\n        const beef = (this.txs[this.txs.length - 1] === tx) ? this : this.clone();\n        if (beef !== this) {\n            const i = this.txs.findIndex((t) => t.txid === txid);\n            beef.txs.splice(i + 1);\n        }\n        const writer = new Writer();\n        writer.writeUInt32LE(ATOMIC_BEEF);\n        writer.writeReverse(toArray(txid, 'hex'));\n        beef.toWriter(writer);\n        return writer.toArray();\n    }\n    /**\n     * Returns a hex string representing the serialized BEEF\n     * @returns A hex string representing the BEEF\n     */\n    toHex() {\n        return toHex(this.toBinary());\n    }\n    static fromReader(br) {\n        let version = br.readUInt32LE();\n        let atomicTxid;\n        if (version === ATOMIC_BEEF) {\n            // Skip the txid and re-read the BEEF version\n            atomicTxid = toHex(br.readReverse(32));\n            version = br.readUInt32LE();\n        }\n        if (version !== BEEF_V1 && version !== BEEF_V2) {\n            throw new Error(`Serialized BEEF must start with ${BEEF_V1} or ${BEEF_V2} but starts with ${version}`);\n        }\n        const beef = new Beef(version);\n        const bumpsLength = br.readVarIntNum();\n        for (let i = 0; i < bumpsLength; i++) {\n            const bump = MerklePath.fromReader(br, false);\n            beef.bumps.push(bump);\n        }\n        const txsLength = br.readVarIntNum();\n        for (let i = 0; i < txsLength; i++) {\n            const beefTx = BeefTx.fromReader(br, version);\n            beef.txs.push(beefTx);\n        }\n        beef.atomicTxid = atomicTxid;\n        return beef;\n    }\n    /**\n     * Constructs an instance of the Beef class based on the provided binary array\n     * @param bin The binary array from which to construct BEEF\n     * @returns An instance of the Beef class constructed from the binary data\n     */\n    static fromBinary(bin) {\n        const br = new Reader(bin);\n        return Beef.fromReader(br);\n    }\n    /**\n     * Constructs an instance of the Beef class based on the provided string\n     * @param s The string value from which to construct BEEF\n     * @param enc The encoding of the string value from which BEEF should be constructed\n     * @returns An instance of the Beef class constructed from the string\n     */\n    static fromString(s, enc = 'hex') {\n        const bin = toArray(s, enc);\n        const br = new Reader(bin);\n        return Beef.fromReader(br);\n    }\n    /**\n     * Try to validate newTx.bumpIndex by looking for an existing bump\n     * that proves newTx.txid\n     *\n     * @param newTx A new `BeefTx` that has been added to this.txs\n     * @returns true if a bump was found, false otherwise\n     */\n    tryToValidateBumpIndex(newTx) {\n        if (newTx.bumpIndex !== undefined) {\n            return true;\n        }\n        const txid = newTx.txid;\n        for (let i = 0; i < this.bumps.length; i++) {\n            const j = this.bumps[i].path[0].findIndex((b) => b.hash === txid);\n            if (j >= 0) {\n                newTx.bumpIndex = i;\n                this.bumps[i].path[0][j].txid = true;\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Sort the `txs` by input txid dependency order:\n     * - Oldest Tx Anchored by Path or txid only\n     * - Newer Txs depending on Older parents\n     * - Newest Tx\n     *\n     * with proof (MerklePath) last, longest chain of dependencies first\n     *\n     * @returns `{ missingInputs, notValid, valid, withMissingInputs }`\n     */\n    sortTxs() {\n        // Hashtable of valid txids (with proof or all inputs chain to proof)\n        const validTxids = {};\n        // Hashtable of all transaction txids to transaction\n        const txidToTx = {};\n        // queue of unsorted transactions ...\n        let queue = [];\n        // sorted transactions: hasProof to with longest dependency chain\n        const result = [];\n        const txidOnly = [];\n        for (const tx of this.txs) {\n            txidToTx[tx.txid] = tx;\n            tx.isValid = tx.hasProof;\n            if (tx.isValid) {\n                validTxids[tx.txid] = true;\n                result.push(tx);\n            }\n            else if (tx.isTxidOnly && tx.inputTxids.length === 0) {\n                validTxids[tx.txid] = true;\n                txidOnly.push(tx);\n            }\n            else {\n                queue.push(tx);\n            }\n        }\n        // Hashtable of unknown input txids used to fund transactions without their own proof.\n        const missingInputs = {};\n        // transactions with one or more missing inputs\n        const txsMissingInputs = [];\n        const possiblyMissingInputs = queue;\n        queue = [];\n        // all tx are isValid false, hasProof false.\n        // if isTxidOnly then has inputTxids\n        for (const tx of possiblyMissingInputs) {\n            let hasMissingInput = false;\n            // For all the unproven transactions,\n            // link their inputs that exist in this beef,\n            // make a note of missing inputs.\n            for (const inputTxid of tx.inputTxids) {\n                if (txidToTx[inputTxid] === undefined) { // Explicitly check for undefined\n                    missingInputs[inputTxid] = true;\n                    hasMissingInput = true;\n                }\n            }\n            if (hasMissingInput) {\n                txsMissingInputs.push(tx);\n            }\n            else {\n                queue.push(tx);\n            }\n        }\n        // As long as we have unsorted transactions...\n        while (queue.length > 0) {\n            const oldQueue = queue;\n            queue = [];\n            // all tx are isValid false, hasProof false.\n            // if isTxidOnly then has inputTxids\n            for (const tx of oldQueue) {\n                if (tx.inputTxids.every((txid) => validTxids[txid])) {\n                    validTxids[tx.txid] = true;\n                    result.push(tx);\n                }\n                else {\n                    queue.push(tx);\n                }\n            }\n            if (oldQueue.length === queue.length) {\n                break;\n            }\n        }\n        // transactions that don't have proofs and don't chain to proofs\n        const txsNotValid = queue;\n        // New order of txs is unsortable (missing inputs or depends on missing inputs), txidOnly, sorted (so newest sorted is last)\n        this.txs = txsMissingInputs\n            .concat(txsNotValid)\n            .concat(txidOnly)\n            .concat(result);\n        return {\n            missingInputs: Object.keys(missingInputs),\n            notValid: txsNotValid.map((tx) => tx.txid),\n            valid: Object.keys(validTxids),\n            withMissingInputs: txsMissingInputs.map((tx) => tx.txid),\n            txidOnly: txidOnly.map((tx) => tx.txid)\n        };\n    }\n    /**\n     * @returns a shallow copy of this beef\n     */\n    clone() {\n        const c = new Beef();\n        c.version = this.version;\n        c.bumps = Array.from(this.bumps);\n        c.txs = Array.from(this.txs);\n        return c;\n    }\n    /**\n     * Ensure that all the txids in `knownTxids` are txidOnly\n     * @param knownTxids\n     */\n    trimKnownTxids(knownTxids) {\n        for (let i = 0; i < this.txs.length;) {\n            const tx = this.txs[i];\n            if (tx.isTxidOnly && knownTxids.includes(tx.txid)) {\n                this.txs.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n        // TODO: bumps could be trimmed to eliminate unreferenced proofs.\n    }\n    /**\n     * @returns array of transaction txids that either have a proof or whose inputs chain back to a proven transaction.\n     */\n    getValidTxids() {\n        const r = this.sortTxs();\n        return r.valid;\n    }\n    /**\n     * @returns Summary of `Beef` contents as multi-line string.\n     */\n    toLogString() {\n        let log = '';\n        log += `BEEF with ${this.bumps.length} BUMPS and ${this.txs.length} Transactions, isValid ${this.isValid().toString()}\\n`;\n        let i = -1;\n        for (const b of this.bumps) {\n            i++;\n            log += `  BUMP ${i}\\n    block: ${b.blockHeight}\\n    txids: [\\n${b.path[0]\n                .filter((n) => n.txid === true) // ✅ Explicitly check if txid is `true`\n                .map((n) => `      '${n.hash ?? ''}'`)\n                .join(',\\n')}\\n    ]\\n`;\n        }\n        i = -1;\n        for (const t of this.txs) {\n            i++;\n            log += `  TX ${i}\\n    txid: ${t.txid}\\n`;\n            if (t.bumpIndex !== undefined) {\n                log += `    bumpIndex: ${t.bumpIndex}\\n`;\n            }\n            if (t.isTxidOnly) {\n                log += '    txidOnly\\n';\n            }\n            else {\n                log += `    rawTx length=${t.rawTx?.length ?? 0}\\n`; // ✅ Fix applied here\n            }\n            if (t.inputTxids.length > 0) {\n                log += `    inputs: [\\n${t.inputTxids\n                    .map((it) => `      '${it}'`)\n                    .join(',\\n')}\\n    ]\\n`;\n            }\n        }\n        return log;\n    }\n    /**\n   * In some circumstances it may be helpful for the BUMP MerklePaths to include\n   * leaves that can be computed from row zero.\n   */\n    addComputedLeaves() {\n        const hash = (m) => toHex(hash256(toArray(m, 'hex').reverse()).reverse());\n        for (const bump of this.bumps) { // ✅ Use `this` instead of `beef`\n            for (let row = 1; row < bump.path.length; row++) {\n                for (const leafL of bump.path[row - 1]) {\n                    if (typeof leafL.hash === 'string' && (leafL.offset & 1) === 0) {\n                        const leafR = bump.path[row - 1].find((l) => l.offset === leafL.offset + 1);\n                        const offsetOnRow = leafL.offset >> 1;\n                        if (leafR !== undefined &&\n                            typeof leafR.hash === 'string' &&\n                            bump.path[row].every((l) => l.offset !== offsetOnRow)) {\n                            // Computable leaf is missing... add it.\n                            bump.path[row].push({\n                                offset: offsetOnRow,\n                                // String concatenation puts the right leaf on the left of the left leaf hash\n                                hash: hash(leafR.hash + leafL.hash)\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=Beef.js.map","/**\n * @enum {number} SecurityLevels\n *\n * Silent = 0 Silently grants the request with no user interation.\n * App = 1 Requires user approval for every application.\n * Counterparty = 2 Requires user approval per counterparty per application.\n */\nexport var SecurityLevels;\n(function (SecurityLevels) {\n    SecurityLevels[SecurityLevels[\"Silent\"] = 0] = \"Silent\";\n    SecurityLevels[SecurityLevels[\"App\"] = 1] = \"App\";\n    SecurityLevels[SecurityLevels[\"Counterparty\"] = 2] = \"Counterparty\";\n})(SecurityLevels || (SecurityLevels = {}));\n//# sourceMappingURL=Wallet.interfaces.js.map","export class WalletError extends Error {\n    code;\n    isError = true;\n    constructor(message, code = 1, stack) {\n        super(message);\n        this.code = code;\n        this.name = this.constructor.name;\n        if (stack !== undefined && stack !== null && stack !== '') {\n            this.stack = stack;\n        }\n        else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n// NOTE: Enum values must not exceed the UInt8 range (0–255)\nexport var walletErrors;\n(function (walletErrors) {\n    walletErrors[walletErrors[\"unknownError\"] = 1] = \"unknownError\";\n    walletErrors[walletErrors[\"unsupportedAction\"] = 2] = \"unsupportedAction\";\n    walletErrors[walletErrors[\"invalidHmac\"] = 3] = \"invalidHmac\";\n    walletErrors[walletErrors[\"invalidSignature\"] = 4] = \"invalidSignature\";\n    walletErrors[walletErrors[\"reviewActions\"] = 5] = \"reviewActions\";\n})(walletErrors || (walletErrors = {}));\nexport default WalletError;\n//# sourceMappingURL=WalletError.js.map","// NOTE: Enum values must not exceed the UInt8 range (0–255)\nvar calls;\n(function (calls) {\n    calls[calls[\"createAction\"] = 1] = \"createAction\";\n    calls[calls[\"signAction\"] = 2] = \"signAction\";\n    calls[calls[\"abortAction\"] = 3] = \"abortAction\";\n    calls[calls[\"listActions\"] = 4] = \"listActions\";\n    calls[calls[\"internalizeAction\"] = 5] = \"internalizeAction\";\n    calls[calls[\"listOutputs\"] = 6] = \"listOutputs\";\n    calls[calls[\"relinquishOutput\"] = 7] = \"relinquishOutput\";\n    calls[calls[\"getPublicKey\"] = 8] = \"getPublicKey\";\n    calls[calls[\"revealCounterpartyKeyLinkage\"] = 9] = \"revealCounterpartyKeyLinkage\";\n    calls[calls[\"revealSpecificKeyLinkage\"] = 10] = \"revealSpecificKeyLinkage\";\n    calls[calls[\"encrypt\"] = 11] = \"encrypt\";\n    calls[calls[\"decrypt\"] = 12] = \"decrypt\";\n    calls[calls[\"createHmac\"] = 13] = \"createHmac\";\n    calls[calls[\"verifyHmac\"] = 14] = \"verifyHmac\";\n    calls[calls[\"createSignature\"] = 15] = \"createSignature\";\n    calls[calls[\"verifySignature\"] = 16] = \"verifySignature\";\n    calls[calls[\"acquireCertificate\"] = 17] = \"acquireCertificate\";\n    calls[calls[\"listCertificates\"] = 18] = \"listCertificates\";\n    calls[calls[\"proveCertificate\"] = 19] = \"proveCertificate\";\n    calls[calls[\"relinquishCertificate\"] = 20] = \"relinquishCertificate\";\n    calls[calls[\"discoverByIdentityKey\"] = 21] = \"discoverByIdentityKey\";\n    calls[calls[\"discoverByAttributes\"] = 22] = \"discoverByAttributes\";\n    calls[calls[\"isAuthenticated\"] = 23] = \"isAuthenticated\";\n    calls[calls[\"waitForAuthentication\"] = 24] = \"waitForAuthentication\";\n    calls[calls[\"getHeight\"] = 25] = \"getHeight\";\n    calls[calls[\"getHeaderForHeight\"] = 26] = \"getHeaderForHeight\";\n    calls[calls[\"getNetwork\"] = 27] = \"getNetwork\";\n    calls[calls[\"getVersion\"] = 28] = \"getVersion\";\n})(calls || (calls = {}));\nexport default calls;\n//# sourceMappingURL=WalletWireCalls.js.map","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * JavaScript numbers are only precise up to 53 bits. Since Bitcoin relies on\n * 256-bit cryptography, this BigNumber class enables operations on larger\n * numbers.\n *\n * @class BigNumber\n */\nexport default class BigNumber {\n    /**\n     * @privateinitializer\n     */\n    static zeros = [\n        '', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000',\n        '000000000', '0000000000', '00000000000', '000000000000', '0000000000000',\n        '00000000000000', '000000000000000', '0000000000000000', '00000000000000000',\n        '000000000000000000', '0000000000000000000', '00000000000000000000',\n        '000000000000000000000', '0000000000000000000000', '00000000000000000000000',\n        '000000000000000000000000', '0000000000000000000000000'\n    ];\n    /**\n     * @privateinitializer\n     */\n    static groupSizes = [\n        0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5,\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n    ];\n    /**\n     * @privateinitializer\n     */\n    static groupBases = [\n        0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343,\n        7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000,\n        28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n    ];\n    /**\n     * The word size of big number chunks.\n     *\n     * @property wordSize\n     *\n     * @example\n     * console.log(BigNumber.wordSize);  // output: 26\n     */\n    static wordSize = 26;\n    static WORD_SIZE_BIGINT = BigInt(BigNumber.wordSize);\n    static WORD_MASK = (1n << BigNumber.WORD_SIZE_BIGINT) - 1n;\n    static MAX_SAFE_INTEGER_BIGINT = BigInt(Number.MAX_SAFE_INTEGER);\n    static MIN_SAFE_INTEGER_BIGINT = BigInt(Number.MIN_SAFE_INTEGER);\n    static MAX_IMULN_ARG = 0x4000000 - 1;\n    static MAX_NUMBER_CONSTRUCTOR_MAG_BIGINT = (1n << 53n) - 1n;\n    _magnitude;\n    _sign;\n    _nominalWordLength;\n    /**\n     * Reduction context of the big number.\n     *\n     * @property red\n     */\n    red;\n    /**\n     * Negative flag. Indicates whether the big number is a negative number.\n     * - If 0, the number is positive.\n     * - If 1, the number is negative.\n     *\n     * @property negative\n     */\n    get negative() {\n        return this._sign;\n    }\n    /**\n     * Sets the negative flag. Only 0 (positive) or 1 (negative) are allowed.\n     */\n    set negative(val) {\n        this.assert(val === 0 || val === 1, 'Negative property must be 0 or 1');\n        const newSign = val === 1 ? 1 : 0;\n        if (this._magnitude === 0n) {\n            this._sign = 0;\n        }\n        else {\n            this._sign = newSign;\n        }\n    }\n    get _computedWordsArray() {\n        if (this._magnitude === 0n)\n            return [0];\n        const arr = [];\n        let temp = this._magnitude;\n        while (temp > 0n) {\n            arr.push(Number(temp & BigNumber.WORD_MASK));\n            temp >>= BigNumber.WORD_SIZE_BIGINT;\n        }\n        return arr.length > 0 ? arr : [0];\n    }\n    /**\n     * Array of numbers, where each number represents a part of the value of the big number.\n     *\n     * @property words\n     */\n    get words() {\n        const computed = this._computedWordsArray;\n        if (this._nominalWordLength <= computed.length) {\n            return computed;\n        }\n        const paddedWords = new Array(this._nominalWordLength).fill(0);\n        for (let i = 0; i < computed.length; i++) {\n            paddedWords[i] = computed[i];\n        }\n        return paddedWords;\n    }\n    /**\n     * Sets the words array representing the value of the big number.\n     */\n    set words(newWords) {\n        const oldSign = this._sign;\n        let newMagnitude = 0n;\n        const len = newWords.length > 0 ? newWords.length : 1;\n        for (let i = len - 1; i >= 0; i--) {\n            const wordVal = newWords[i] === undefined ? 0 : newWords[i];\n            newMagnitude = (newMagnitude << BigNumber.WORD_SIZE_BIGINT) | BigInt(wordVal & Number(BigNumber.WORD_MASK));\n        }\n        this._magnitude = newMagnitude;\n        this._sign = oldSign;\n        this._nominalWordLength = len;\n        this.normSign();\n    }\n    /**\n     * Length of the words array.\n     *\n     * @property length\n     */\n    get length() {\n        return Math.max(1, this._nominalWordLength);\n    }\n    /**\n     * Checks whether a value is an instance of BigNumber. Regular JS numbers fail this check.\n     *\n     * @method isBN\n     * @param num - The value to be checked.\n     * @returns - Returns a boolean value determining whether or not the checked num parameter is a BigNumber.\n     */\n    static isBN(num) {\n        if (num instanceof BigNumber)\n            return true;\n        return (num !== null &&\n            typeof num === 'object' &&\n            num.constructor?.wordSize === BigNumber.wordSize &&\n            Array.isArray(num.words));\n    }\n    /**\n     * Returns the bigger value between two BigNumbers\n     *\n     * @method max\n     * @param left - The first BigNumber to be compared.\n     * @param right - The second BigNumber to be compared.\n     * @returns - Returns the bigger BigNumber between left and right.\n     */\n    static max(left, right) { return left.cmp(right) > 0 ? left : right; }\n    /**\n     * Returns the smaller value between two BigNumbers\n     *\n     * @method min\n     * @param left - The first BigNumber to be compared.\n     * @param right - The second BigNumber to be compared.\n     * @returns - Returns the smaller value between left and right.\n     */\n    static min(left, right) { return left.cmp(right) < 0 ? left : right; }\n    /**\n     * @constructor\n     *\n     * @param number - The number (various types accepted) to construct a BigNumber from. Default is 0.\n     * @param base - The base of number provided. By default is 10.\n     * @param endian - The endianness provided. By default is 'big endian'.\n     */\n    constructor(number = 0, base = 10, endian = 'be') {\n        this._magnitude = 0n;\n        this._sign = 0;\n        this._nominalWordLength = 1;\n        this.red = null;\n        if (number === undefined)\n            number = 0;\n        if (number === null) {\n            this._initializeState(0n, 0);\n            return;\n        }\n        if (typeof number === 'bigint') {\n            this._initializeState(number < 0n ? -number : number, number < 0n ? 1 : 0);\n            this.normSign();\n            return;\n        }\n        let effectiveBase = base;\n        let effectiveEndian = endian;\n        if (base === 'le' || base === 'be') {\n            effectiveEndian = base;\n            effectiveBase = 10;\n        }\n        if (typeof number === 'number') {\n            this.initNumber(number, effectiveEndian);\n            return;\n        }\n        if (Array.isArray(number)) {\n            this.initArray(number, effectiveEndian);\n            return;\n        }\n        if (typeof number === 'string') {\n            if (effectiveBase === 'hex')\n                effectiveBase = 16;\n            this.assert(typeof effectiveBase === 'number' && effectiveBase === (effectiveBase | 0) && effectiveBase >= 2 && effectiveBase <= 36, 'Base must be an integer between 2 and 36');\n            const originalNumberStr = number.toString().replace(/\\s+/g, '');\n            let start = 0;\n            let sign = 0;\n            if (originalNumberStr.startsWith('-')) {\n                start++;\n                sign = 1;\n            }\n            else if (originalNumberStr.startsWith('+')) {\n                start++;\n            }\n            const numStr = originalNumberStr.substring(start);\n            if (numStr.length === 0) {\n                this._initializeState(0n, (sign === 1 && originalNumberStr.startsWith('-')) ? 1 : 0);\n                this.normSign();\n                return;\n            }\n            if (effectiveBase === 16) {\n                let tempMagnitude;\n                if (effectiveEndian === 'le') {\n                    const bytes = [];\n                    let hexStr = numStr;\n                    if (hexStr.length % 2 !== 0)\n                        hexStr = '0' + hexStr;\n                    for (let i = 0; i < hexStr.length; i += 2) {\n                        const byteHex = hexStr.substring(i, i + 2);\n                        const byteVal = parseInt(byteHex, 16);\n                        if (isNaN(byteVal))\n                            throw new Error('Invalid character in ' + hexStr);\n                        bytes.push(byteVal);\n                    }\n                    this.initArray(bytes, 'le');\n                    this._sign = sign;\n                    this.normSign();\n                    return;\n                }\n                else {\n                    try {\n                        tempMagnitude = BigInt('0x' + numStr);\n                    }\n                    catch (e) {\n                        throw new Error('Invalid character in ' + numStr);\n                    }\n                }\n                this._initializeState(tempMagnitude, sign);\n                this.normSign();\n            }\n            else {\n                try {\n                    this._parseBaseString(numStr, effectiveBase);\n                    this._sign = sign;\n                    this.normSign();\n                    if (effectiveEndian === 'le') {\n                        const currentSign = this._sign;\n                        this.initArray(this.toArray('be'), 'le');\n                        this._sign = currentSign;\n                        this.normSign();\n                    }\n                }\n                catch (err) {\n                    const error = err;\n                    if (error.message.includes('Invalid character in string') ||\n                        error.message.includes('Invalid digit for base') ||\n                        error.message.startsWith('Invalid character:')) {\n                        throw new Error('Invalid character');\n                    }\n                    throw error;\n                }\n            }\n        }\n        else if (number !== 0) {\n            this.assert(false, 'Unsupported input type for BigNumber constructor');\n        }\n        else {\n            this._initializeState(0n, 0);\n        }\n    }\n    _bigIntToStringInBase(num, base) {\n        if (num === 0n)\n            return '0';\n        if (base < 2 || base > 36)\n            throw new Error('Base must be between 2 and 36');\n        const digits = '0123456789abcdefghijklmnopqrstuvwxyz';\n        let result = '';\n        let currentNum = num > 0n ? num : -num;\n        const bigBase = BigInt(base);\n        while (currentNum > 0n) {\n            result = digits[Number(currentNum % bigBase)] + result;\n            currentNum /= bigBase;\n        }\n        return result;\n    }\n    _parseBaseString(numberStr, base) {\n        if (numberStr.length === 0) {\n            this._magnitude = 0n;\n            this._finishInitialization();\n            return;\n        }\n        this._magnitude = 0n;\n        const bigBase = BigInt(base);\n        let groupSize = BigNumber.groupSizes[base];\n        let groupBaseBigInt = BigInt(BigNumber.groupBases[base]);\n        if (groupSize === 0 || groupBaseBigInt === 0n) {\n            groupSize = Math.floor(Math.log(0x3ffffff) / Math.log(base));\n            if (groupSize === 0)\n                groupSize = 1;\n            groupBaseBigInt = bigBase ** BigInt(groupSize);\n        }\n        let currentPos = 0;\n        const totalLen = numberStr.length;\n        let firstChunkLen = totalLen % groupSize;\n        if (firstChunkLen === 0 && totalLen > 0)\n            firstChunkLen = groupSize;\n        if (firstChunkLen > 0) {\n            const chunkStr = numberStr.substring(currentPos, currentPos + firstChunkLen);\n            this._magnitude = BigInt(this._parseBaseWord(chunkStr, base));\n            currentPos += firstChunkLen;\n        }\n        while (currentPos < totalLen) {\n            const chunkStr = numberStr.substring(currentPos, currentPos + groupSize);\n            const wordVal = BigInt(this._parseBaseWord(chunkStr, base));\n            this._magnitude = this._magnitude * groupBaseBigInt + wordVal;\n            currentPos += groupSize;\n        }\n        this._finishInitialization();\n    }\n    _parseBaseWord(str, base) {\n        let r = 0;\n        for (let i = 0; i < str.length; i++) {\n            const charCode = str.charCodeAt(i);\n            let digitVal;\n            if (charCode >= 48 && charCode <= 57)\n                digitVal = charCode - 48;\n            else if (charCode >= 65 && charCode <= 90)\n                digitVal = charCode - 65 + 10;\n            else if (charCode >= 97 && charCode <= 122)\n                digitVal = charCode - 97 + 10;\n            else\n                throw new Error('Invalid character: ' + str[i]);\n            if (digitVal >= base)\n                throw new Error('Invalid character');\n            r = r * base + digitVal;\n        }\n        return r;\n    }\n    _initializeState(magnitude, sign) {\n        this._magnitude = magnitude;\n        this._sign = (magnitude === 0n) ? 0 : sign;\n        this._finishInitialization();\n    }\n    _finishInitialization() {\n        if (this._magnitude === 0n) {\n            this._nominalWordLength = 1;\n            this._sign = 0;\n        }\n        else {\n            const bitLen = this._magnitude.toString(2).length;\n            this._nominalWordLength = Math.max(1, Math.ceil(bitLen / BigNumber.wordSize));\n        }\n    }\n    assert(val, msg = 'Assertion failed') { if (!val)\n        throw new Error(msg); }\n    initNumber(number, endian = 'be') {\n        this.assert(BigInt(Math.abs(number)) <= BigNumber.MAX_NUMBER_CONSTRUCTOR_MAG_BIGINT, 'The number is larger than 2 ^ 53 (unsafe)');\n        this.assert(number % 1 === 0, 'Number must be an integer for BigNumber conversion');\n        this._initializeState(BigInt(Math.abs(number)), number < 0 ? 1 : 0);\n        if (endian === 'le') {\n            const currentSign = this._sign;\n            const beBytes = this.toArray('be');\n            this.initArray(beBytes, 'le');\n            this._sign = currentSign;\n            this.normSign();\n        }\n        return this;\n    }\n    initArray(bytes, endian) {\n        if (bytes.length === 0) {\n            this._initializeState(0n, 0);\n            return this;\n        }\n        let magnitude = 0n;\n        if (endian === 'be') {\n            for (let i = 0; i < bytes.length; i++)\n                magnitude = (magnitude << 8n) | BigInt(bytes[i] & 0xff);\n        }\n        else {\n            for (let i = bytes.length - 1; i >= 0; i--)\n                magnitude = (magnitude << 8n) | BigInt(bytes[i] & 0xff);\n        }\n        this._initializeState(magnitude, 0);\n        return this;\n    }\n    copy(dest) { dest._magnitude = this._magnitude; dest._sign = this._sign; dest._nominalWordLength = this._nominalWordLength; dest.red = this.red; }\n    static move(dest, src) { dest._magnitude = src._magnitude; dest._sign = src._sign; dest._nominalWordLength = src._nominalWordLength; dest.red = src.red; }\n    clone() { const r = new BigNumber(0n); this.copy(r); return r; }\n    expand(size) {\n        this.assert(size >= 0, 'Expand size must be non-negative');\n        this._nominalWordLength = Math.max(this._nominalWordLength, size, 1);\n        return this;\n    }\n    strip() { this._finishInitialization(); return this.normSign(); }\n    normSign() { if (this._magnitude === 0n)\n        this._sign = 0; return this; }\n    inspect() { return (this.red !== null ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>'; }\n    _getMinimalHex() {\n        if (this._magnitude === 0n)\n            return '0';\n        return this._magnitude.toString(16);\n    }\n    /**\n     * Converts the BigNumber instance to a string representation.\n     *\n     * @method toString\n     * @param base - The base for representing number. Default is 10. Other accepted values are 16 and 'hex'.\n     * @param padding - Represents the minimum number of digits to represent the BigNumber as a string. Default is 1.\n     * @returns The string representation of the BigNumber instance\n     */\n    toString(base = 10, padding = 1) {\n        if (base === 16 || base === 'hex') {\n            // For toString('hex', N), N is the 'multiple-of-N characters' rule from bn.js tests\n            // For toString(16, P) where P=1 (default) or P=0, it means minimal hex.\n            let hexStr = this._getMinimalHex(); // e.g., \"f\", \"123\", \"0\"\n            if (padding > 1) { // N-multiple rule for characters\n                // Ensure hexStr is even length if not \"0\" to represent full bytes before applying multiple rule\n                if (hexStr !== '0' && hexStr.length % 2 !== 0) {\n                    hexStr = '0' + hexStr;\n                }\n                while (hexStr.length % padding !== 0) {\n                    hexStr = '0' + hexStr;\n                }\n            }\n            // If padding is 0 or 1, hexStr (minimal) is used as is.\n            // \"0\" is always \"0\" unless toHex(\"\") specific case.\n            // Single digit hex like \"f\" is not \"0f\" by default from toString(16).\n            return (this.isNeg() ? '-' : '') + hexStr;\n        }\n        if (typeof base !== 'number' || base < 2 || base > 36 || base % 1 !== 0)\n            throw new Error('Base should be an integer between 2 and 36');\n        return this.toBaseString(base, padding);\n    }\n    toBaseString(base, padding) {\n        if (this._magnitude === 0n) {\n            let out = '0';\n            if (padding > 1) {\n                while (out.length < padding)\n                    out = '0' + out;\n            }\n            return out;\n        }\n        let groupSize = BigNumber.groupSizes[base];\n        let groupBaseBigInt = BigInt(BigNumber.groupBases[base]);\n        if (groupSize === 0 || groupBaseBigInt === 0n) {\n            groupSize = Math.floor(Math.log(Number.MAX_SAFE_INTEGER) / Math.log(base));\n            if (groupSize === 0)\n                groupSize = 1;\n            groupBaseBigInt = BigInt(base) ** BigInt(groupSize);\n        }\n        let out = '';\n        let tempMag = this._magnitude;\n        while (tempMag > 0n) {\n            const remainder = tempMag % groupBaseBigInt;\n            tempMag /= groupBaseBigInt;\n            const chunkStr = this._bigIntToStringInBase(remainder, base);\n            if (tempMag > 0n) {\n                const zerosToPrepend = groupSize - chunkStr.length;\n                if (zerosToPrepend > 0 && zerosToPrepend < BigNumber.zeros.length) {\n                    out = BigNumber.zeros[zerosToPrepend] + chunkStr + out;\n                }\n                else if (zerosToPrepend > 0) {\n                    out = '0'.repeat(zerosToPrepend) + chunkStr + out;\n                }\n                else {\n                    out = chunkStr + out;\n                }\n            }\n            else {\n                out = chunkStr + out;\n            }\n        }\n        if (padding > 0) {\n            while (out.length < padding)\n                out = '0' + out;\n        }\n        return (this._sign === 1 ? '-' : '') + out;\n    }\n    /**\n     * Converts the BigNumber instance to a JavaScript number.\n     * Please note that JavaScript numbers are only precise up to 53 bits.\n     *\n     * @method toNumber\n     * @throws If the BigNumber instance cannot be safely stored in a JavaScript number\n     * @returns The JavaScript number representation of the BigNumber instance.\n     */\n    toNumber() {\n        const val = this._getSignedValue();\n        if (val > BigNumber.MAX_SAFE_INTEGER_BIGINT || val < BigNumber.MIN_SAFE_INTEGER_BIGINT)\n            throw new Error('Number can only safely store up to 53 bits');\n        return Number(val);\n    }\n    /**\n     * Converts the BigNumber instance to a JSON-formatted string.\n     *\n     * @method toJSON\n     * @returns The JSON string representation of the BigNumber instance.\n     */\n    toJSON() {\n        const hex = this._getMinimalHex();\n        return (this.isNeg() ? '-' : '') + hex;\n    }\n    toArrayLikeGeneric(res, isLE) {\n        let tempMag = this._magnitude;\n        let position = isLE ? 0 : res.length - 1;\n        const increment = isLE ? 1 : -1;\n        for (let k = 0; k < res.length; ++k) {\n            if (tempMag === 0n && position >= 0 && position < res.length) {\n                res[position] = 0;\n            }\n            else if (position >= 0 && position < res.length) {\n                res[position] = Number(tempMag & 0xffn);\n            }\n            else {\n                break;\n            }\n            tempMag >>= 8n;\n            position += increment;\n        }\n    }\n    /**\n     * Converts the BigNumber instance to an array of bytes.\n     *\n     * @method toArray\n     * @param endian - Endianness of the output array, defaults to 'be'.\n     * @param length - Optional length of the output array.\n     * @returns Array of bytes representing the BigNumber.\n     */\n    toArray(endian = 'be', length) {\n        this.strip();\n        const actualByteLength = this.byteLength();\n        const reqLength = length ?? Math.max(1, actualByteLength);\n        this.assert(actualByteLength <= reqLength, 'byte array longer than desired length');\n        this.assert(reqLength > 0, 'Requested array length <= 0');\n        const res = new Array(reqLength).fill(0);\n        if (this._magnitude === 0n && reqLength > 0)\n            return res;\n        if (this._magnitude === 0n && reqLength === 0)\n            return [];\n        this.toArrayLikeGeneric(res, endian === 'le');\n        return res;\n    }\n    /**\n     * Calculates the number of bits required to represent the BigNumber.\n     *\n     * @method bitLength\n     * @returns The bit length of the BigNumber.\n     */\n    bitLength() { if (this._magnitude === 0n)\n        return 0; return this._magnitude.toString(2).length; }\n    /**\n     * Converts a BigNumber to an array of bits.\n     *\n     * @method toBitArray\n     * @param num - The BigNumber to convert.\n     * @returns An array of bits.\n     */\n    static toBitArray(num) {\n        const len = num.bitLength();\n        if (len === 0)\n            return [];\n        const w = new Array(len);\n        const mag = num._magnitude;\n        for (let bit = 0; bit < len; bit++) {\n            w[bit] = ((mag >> BigInt(bit)) & 1n) !== 0n ? 1 : 0;\n        }\n        return w;\n    }\n    /**\n     * Instance version of {@link toBitArray}.\n     */\n    toBitArray() { return BigNumber.toBitArray(this); }\n    /**\n     * Returns the number of trailing zero bits in the big number.\n     *\n     * @method zeroBits\n     * @returns Returns the number of trailing zero bits\n     * in the binary representation of the big number.\n     *\n     * @example\n     * const bn = new BigNumber('8'); // binary: 1000\n     * const zeroBits = bn.zeroBits(); // 3\n     */\n    zeroBits() {\n        if (this._magnitude === 0n)\n            return 0;\n        let c = 0;\n        let t = this._magnitude;\n        while ((t & 1n) === 0n && t !== 0n) {\n            c++;\n            t >>= 1n;\n        }\n        return c;\n    }\n    /**\n     * Calculates the number of bytes required to represent the BigNumber.\n     *\n     * @method byteLength\n     * @returns The byte length of the BigNumber.\n     */\n    byteLength() { if (this._magnitude === 0n)\n        return 0; return Math.ceil(this.bitLength() / 8); }\n    _getSignedValue() { return this._sign === 1 ? -this._magnitude : this._magnitude; }\n    _setValueFromSigned(sVal) {\n        if (sVal < 0n) {\n            this._magnitude = -sVal;\n            this._sign = 1;\n        }\n        else {\n            this._magnitude = sVal;\n            this._sign = 0;\n        }\n        this._finishInitialization();\n        this.normSign();\n    }\n    toTwos(width) {\n        this.assert(width >= 0);\n        const Bw = BigInt(width);\n        let v = this._getSignedValue();\n        if (this._sign === 1 && this._magnitude !== 0n)\n            v = (1n << Bw) + v;\n        const m = (1n << Bw) - 1n;\n        v &= m;\n        const r = new BigNumber(0n);\n        r._initializeState(v, 0);\n        return r;\n    }\n    fromTwos(width) {\n        this.assert(width >= 0);\n        const Bw = BigInt(width);\n        const m = this._magnitude;\n        if (width > 0 && ((m >> (Bw - 1n)) & 1n) !== 0n && this._sign === 0) {\n            const sVal = m - (1n << Bw);\n            const r = new BigNumber(0n);\n            r._setValueFromSigned(sVal);\n            return r;\n        }\n        return this.clone();\n    }\n    isNeg() { return this._sign === 1 && this._magnitude !== 0n; }\n    neg() { return this.clone().ineg(); }\n    ineg() { if (this._magnitude !== 0n)\n        this._sign = this._sign === 1 ? 0 : 1; return this; }\n    _iuop(num, op) {\n        const newMag = op(this._magnitude, num._magnitude);\n        const isXor = op === ((a, b) => a ^ b);\n        let targetNominalLength = this._nominalWordLength;\n        if (isXor)\n            targetNominalLength = Math.max(this.length, num.length);\n        this._magnitude = newMag;\n        this._finishInitialization();\n        if (isXor)\n            this._nominalWordLength = Math.max(this._nominalWordLength, targetNominalLength);\n        return this.strip();\n    }\n    iuor(num) { return this._iuop(num, (a, b) => a | b); }\n    iuand(num) { return this._iuop(num, (a, b) => a & b); }\n    iuxor(num) { return this._iuop(num, (a, b) => a ^ b); }\n    _iop(num, op) { this.assert(this._sign === 0 && num._sign === 0); return this._iuop(num, op); }\n    ior(num) { return this._iop(num, (a, b) => a | b); }\n    iand(num) { return this._iop(num, (a, b) => a & b); }\n    ixor(num) { return this._iop(num, (a, b) => a ^ b); }\n    _uop_new(num, opName) { if (this.length >= num.length)\n        return this.clone()[opName](num); return num.clone()[opName](this); }\n    or(num) { this.assert(this._sign === 0 && num._sign === 0); return this._uop_new(num, 'iuor'); }\n    uor(num) { return this._uop_new(num, 'iuor'); }\n    and(num) { this.assert(this._sign === 0 && num._sign === 0); return this._uop_new(num, 'iuand'); }\n    uand(num) { return this._uop_new(num, 'iuand'); }\n    xor(num) { this.assert(this._sign === 0 && num._sign === 0); return this._uop_new(num, 'iuxor'); }\n    uxor(num) { return this._uop_new(num, 'iuxor'); }\n    inotn(width) {\n        this.assert(typeof width === 'number' && width >= 0);\n        const Bw = BigInt(width);\n        const m = (1n << Bw) - 1n;\n        this._magnitude = (~this._magnitude) & m;\n        const wfw = width === 0 ? 1 : Math.ceil(width / BigNumber.wordSize);\n        this._nominalWordLength = Math.max(1, wfw);\n        this.strip();\n        this._nominalWordLength = Math.max(this._nominalWordLength, Math.max(1, wfw));\n        return this;\n    }\n    notn(width) { return this.clone().inotn(width); }\n    setn(bit, val) { this.assert(typeof bit === 'number' && bit >= 0); const Bb = BigInt(bit); if (val === 1 || val === true)\n        this._magnitude |= (1n << Bb);\n    else\n        this._magnitude &= ~(1n << Bb); const wnb = Math.floor(bit / BigNumber.wordSize) + 1; this._nominalWordLength = Math.max(this._nominalWordLength, wnb); this._finishInitialization(); return this.strip(); }\n    iadd(num) { this._setValueFromSigned(this._getSignedValue() + num._getSignedValue()); return this; }\n    add(num) { const r = new BigNumber(0n); r._setValueFromSigned(this._getSignedValue() + num._getSignedValue()); return r; }\n    isub(num) { this._setValueFromSigned(this._getSignedValue() - num._getSignedValue()); return this; }\n    sub(num) { const r = new BigNumber(0n); r._setValueFromSigned(this._getSignedValue() - num._getSignedValue()); return r; }\n    mul(num) {\n        const r = new BigNumber(0n);\n        r._magnitude = this._magnitude * num._magnitude;\n        r._sign = r._magnitude === 0n ? 0 : (this._sign ^ num._sign);\n        r._nominalWordLength = this.length + num.length;\n        r.red = null;\n        return r.normSign();\n    }\n    imul(num) {\n        this._magnitude *= num._magnitude;\n        this._sign = this._magnitude === 0n ? 0 : (this._sign ^ num._sign);\n        this._nominalWordLength = this.length + num.length;\n        this.red = null;\n        return this.normSign();\n    }\n    imuln(num) { this.assert(typeof num === 'number', 'Assertion failed'); this.assert(Math.abs(num) <= BigNumber.MAX_IMULN_ARG, 'Assertion failed'); this._setValueFromSigned(this._getSignedValue() * BigInt(num)); return this; }\n    muln(num) { return this.clone().imuln(num); }\n    sqr() {\n        const r = new BigNumber(0n);\n        r._magnitude = this._magnitude * this._magnitude;\n        r._sign = 0;\n        r._nominalWordLength = this.length * 2;\n        r.red = null;\n        return r;\n    }\n    isqr() {\n        this._magnitude *= this._magnitude;\n        this._sign = 0;\n        this._nominalWordLength = this.length * 2;\n        this.red = null;\n        return this;\n    }\n    pow(num) {\n        this.assert(num._sign === 0, 'Exponent for pow must be non-negative');\n        if (num.isZero())\n            return new BigNumber(1n);\n        const res = new BigNumber(1n);\n        const currentBase = this.clone();\n        const exp = num.clone();\n        const baseIsNegative = currentBase.isNeg();\n        const expIsOdd = exp.isOdd();\n        if (baseIsNegative)\n            currentBase.ineg();\n        while (!exp.isZero()) {\n            if (exp.isOdd()) {\n                res.imul(currentBase);\n            }\n            currentBase.isqr();\n            exp.iushrn(1);\n        }\n        if (baseIsNegative && expIsOdd) {\n            res.ineg();\n        }\n        return res;\n    }\n    iushln(bits) { this.assert(typeof bits === 'number' && bits >= 0); if (bits === 0)\n        return this; this._magnitude <<= BigInt(bits); this._finishInitialization(); return this.strip(); }\n    ishln(bits) { this.assert(this._sign === 0, 'ishln requires positive number'); return this.iushln(bits); }\n    iushrn(bits, hint, extended) {\n        this.assert(typeof bits === 'number' && bits >= 0);\n        if (bits === 0) {\n            if (extended != null)\n                extended._initializeState(0n, 0);\n            return this;\n        }\n        if (extended != null) {\n            const m = (1n << BigInt(bits)) - 1n;\n            const sOut = this._magnitude & m;\n            extended._initializeState(sOut, 0);\n        }\n        this._magnitude >>= BigInt(bits);\n        this._finishInitialization();\n        return this.strip();\n    }\n    ishrn(bits, hint, extended) {\n        this.assert(this._sign === 0, 'ishrn requires positive number');\n        return this.iushrn(bits, hint, extended);\n    }\n    shln(bits) { return this.clone().ishln(bits); }\n    ushln(bits) { return this.clone().iushln(bits); }\n    shrn(bits) { return this.clone().ishrn(bits); }\n    ushrn(bits) { return this.clone().iushrn(bits); }\n    testn(bit) {\n        this.assert(typeof bit === 'number' && bit >= 0);\n        return ((this._magnitude >> BigInt(bit)) & 1n) !== 0n;\n    }\n    imaskn(bits) {\n        this.assert(typeof bits === 'number' && bits >= 0);\n        this.assert(this._sign === 0, 'imaskn works only with positive numbers');\n        const Bb = BigInt(bits);\n        const m = Bb === 0n ? 0n : (1n << Bb) - 1n;\n        this._magnitude &= m;\n        const wfm = bits === 0 ? 1 : Math.max(1, Math.ceil(bits / BigNumber.wordSize));\n        this._nominalWordLength = wfm;\n        this._finishInitialization();\n        this._nominalWordLength = Math.max(this._nominalWordLength, wfm);\n        return this.strip();\n    }\n    maskn(bits) { return this.clone().imaskn(bits); }\n    iaddn(num) { this.assert(typeof num === 'number'); this.assert(Math.abs(num) <= BigNumber.MAX_IMULN_ARG, 'num is too large'); this._setValueFromSigned(this._getSignedValue() + BigInt(num)); return this; }\n    _iaddn(num) { return this.iaddn(num); }\n    isubn(num) { this.assert(typeof num === 'number'); this.assert(Math.abs(num) <= BigNumber.MAX_IMULN_ARG, 'Assertion failed'); this._setValueFromSigned(this._getSignedValue() - BigInt(num)); return this; }\n    addn(num) { return this.clone().iaddn(num); }\n    subn(num) { return this.clone().isubn(num); }\n    iabs() { this._sign = 0; return this; }\n    abs() { return this.clone().iabs(); }\n    divmod(num, mode, positive) {\n        this.assert(!num.isZero(), 'Division by zero');\n        if (this.isZero()) {\n            const z = new BigNumber(0n);\n            return { div: mode !== 'mod' ? z : null, mod: mode !== 'div' ? z : null };\n        }\n        const tV = this._getSignedValue();\n        const nV = num._getSignedValue();\n        let dV = null;\n        let mV = null;\n        if (mode !== 'mod')\n            dV = tV / nV;\n        if (mode !== 'div') {\n            mV = tV % nV;\n            if (positive === true && mV < 0n)\n                mV += nV < 0n ? -nV : nV;\n        }\n        const rd = dV !== null ? new BigNumber(0n) : null;\n        if (rd !== null && dV !== null)\n            rd._setValueFromSigned(dV);\n        const rm = mV !== null ? new BigNumber(0n) : null;\n        if (rm !== null && mV !== null)\n            rm._setValueFromSigned(mV);\n        return { div: rd, mod: rm };\n    }\n    div(num) {\n        return this.divmod(num, 'div', false).div;\n    }\n    mod(num) {\n        return this.divmod(num, 'mod', false).mod;\n    }\n    umod(num) {\n        return this.divmod(num, 'mod', true).mod;\n    }\n    divRound(num) {\n        this.assert(!num.isZero());\n        const tV = this._getSignedValue();\n        const nV = num._getSignedValue();\n        let d = tV / nV;\n        const m = tV % nV;\n        if (m === 0n) {\n            const r = new BigNumber(0n);\n            r._setValueFromSigned(d);\n            return r;\n        }\n        const absM = m < 0n ? -m : m;\n        const absNV = nV < 0n ? -nV : nV;\n        if (absM * 2n >= absNV) {\n            if ((tV > 0n && nV > 0n) || (tV < 0n && nV < 0n)) {\n                d += 1n;\n            }\n            else {\n                d -= 1n;\n            }\n        }\n        const r = new BigNumber(0n);\n        r._setValueFromSigned(d);\n        return r;\n    }\n    modrn(numArg) {\n        this.assert(numArg !== 0, 'Division by zero in modrn');\n        const absDivisor = BigInt(Math.abs(numArg));\n        if (absDivisor === 0n)\n            throw new Error('Division by zero in modrn');\n        const remainderMag = this._magnitude % absDivisor;\n        return numArg < 0 ? Number(-remainderMag) : Number(remainderMag);\n    }\n    idivn(num) {\n        this.assert(num !== 0);\n        this.assert(Math.abs(num) <= BigNumber.MAX_IMULN_ARG, 'num is too large');\n        this._setValueFromSigned(this._getSignedValue() / BigInt(num));\n        return this;\n    }\n    divn(num) { return this.clone().idivn(num); }\n    egcd(p) {\n        this.assert(p._sign === 0, 'p must not be negative');\n        this.assert(!p.isZero(), 'p must not be zero');\n        let uV = this._getSignedValue();\n        let vV = p._magnitude;\n        let a = 1n;\n        let pa = 0n;\n        let b = 0n;\n        let pb = 1n;\n        while (vV !== 0n) {\n            const q = uV / vV;\n            let t = vV;\n            vV = uV % vV;\n            uV = t;\n            t = pa;\n            pa = a - q * pa;\n            a = t;\n            t = pb;\n            pb = b - q * pb;\n            b = t;\n        }\n        const ra = new BigNumber(0n);\n        ra._setValueFromSigned(a);\n        const rb = new BigNumber(0n);\n        rb._setValueFromSigned(b);\n        const rg = new BigNumber(0n);\n        rg._initializeState(uV < 0n ? -uV : uV, 0);\n        return { a: ra, b: rb, gcd: rg };\n    }\n    gcd(num) {\n        let u = this._magnitude;\n        let v = num._magnitude;\n        if (u === 0n) {\n            const r = new BigNumber(0n);\n            r._setValueFromSigned(v);\n            return r.iabs();\n        }\n        if (v === 0n) {\n            const r = new BigNumber(0n);\n            r._setValueFromSigned(u);\n            return r.iabs();\n        }\n        while (v !== 0n) {\n            const t = u % v;\n            u = v;\n            v = t;\n        }\n        const res = new BigNumber(0n);\n        res._initializeState(u, 0);\n        return res;\n    }\n    invm(num) {\n        this.assert(!num.isZero() && num._sign === 0, 'Modulus for invm must be positive and non-zero');\n        const eg = this.egcd(num);\n        if (!eg.gcd.eqn(1)) {\n            throw new Error('Inverse does not exist (numbers are not coprime).');\n        }\n        return eg.a.umod(num);\n    }\n    isEven() { return this._magnitude % 2n === 0n; }\n    isOdd() { return this._magnitude % 2n === 1n; }\n    andln(num) { this.assert(num >= 0); return Number(this._magnitude & BigInt(num)); }\n    bincn(bit) { this.assert(typeof bit === 'number' && bit >= 0); const BVal = 1n << BigInt(bit); this._setValueFromSigned(this._getSignedValue() + BVal); return this; }\n    isZero() { return this._magnitude === 0n; }\n    cmpn(num) { this.assert(Math.abs(num) <= BigNumber.MAX_IMULN_ARG, 'Number is too big'); const tV = this._getSignedValue(); const nV = BigInt(num); if (tV < nV)\n        return -1; if (tV > nV)\n        return 1; return 0; }\n    cmp(num) { const tV = this._getSignedValue(); const nV = num._getSignedValue(); if (tV < nV)\n        return -1; if (tV > nV)\n        return 1; return 0; }\n    ucmp(num) { if (this._magnitude < num._magnitude)\n        return -1; if (this._magnitude > num._magnitude)\n        return 1; return 0; }\n    gtn(num) { return this.cmpn(num) === 1; }\n    gt(num) { return this.cmp(num) === 1; }\n    gten(num) { return this.cmpn(num) >= 0; }\n    gte(num) { return this.cmp(num) >= 0; }\n    ltn(num) { return this.cmpn(num) === -1; }\n    lt(num) { return this.cmp(num) === -1; }\n    lten(num) { return this.cmpn(num) <= 0; }\n    lte(num) { return this.cmp(num) <= 0; }\n    eqn(num) { return this.cmpn(num) === 0; }\n    eq(num) { return this.cmp(num) === 0; }\n    toRed(ctx) { this.assert(this.red == null, 'Already a number in reduction context'); this.assert(this._sign === 0, 'toRed works only with positives'); return ctx.convertTo(this).forceRed(ctx); }\n    fromRed() { this.assert(this.red, 'fromRed works only with numbers in reduction context'); return this.red.convertFrom(this); }\n    forceRed(ctx) { this.red = ctx; return this; }\n    redAdd(num) { this.assert(this.red, 'redAdd works only with red numbers'); return this.red.add(this, num); }\n    redIAdd(num) { this.assert(this.red, 'redIAdd works only with red numbers'); return this.red.iadd(this, num); }\n    redSub(num) { this.assert(this.red, 'redSub works only with red numbers'); return this.red.sub(this, num); }\n    redISub(num) { this.assert(this.red, 'redISub works only with red numbers'); return this.red.isub(this, num); }\n    redShl(num) { this.assert(this.red, 'redShl works only with red numbers'); return this.red.shl(this, num); }\n    redMul(num) { this.assert(this.red, 'redMul works only with red numbers'); this.red.verify2(this, num); return this.red.mul(this, num); }\n    redIMul(num) { this.assert(this.red, 'redIMul works only with red numbers'); this.red.verify2(this, num); return this.red.imul(this, num); }\n    redSqr() { this.assert(this.red, 'redSqr works only with red numbers'); this.red.verify1(this); return this.red.sqr(this); }\n    redISqr() { this.assert(this.red, 'redISqr works only with red numbers'); this.red.verify1(this); return this.red.isqr(this); }\n    redSqrt() { this.assert(this.red, 'redSqrt works only with red numbers'); this.red.verify1(this); return this.red.sqrt(this); }\n    redInvm() { this.assert(this.red, 'redInvm works only with red numbers'); this.red.verify1(this); return this.red.invm(this); }\n    redNeg() { this.assert(this.red, 'redNeg works only with red numbers'); this.red.verify1(this); return this.red.neg(this); }\n    redPow(num) { this.assert(this.red != null && num.red == null, 'redPow(normalNum)'); this.red.verify1(this); return this.red.pow(this, num); }\n    /**\n     * Creates a BigNumber from a hexadecimal string.\n     *\n     * @static\n     * @method fromHex\n     * @param hex - The hexadecimal string to create a BigNumber from.\n     * @param endian - Optional endianness for parsing the hex string.\n     * @returns Returns a BigNumber created from the hexadecimal input string.\n     *\n     * @example\n     * const exampleHex = 'a1b2c3';\n     * const bigNumber = BigNumber.fromHex(exampleHex);\n     */\n    static fromHex(hex, endian) {\n        let eE = 'be';\n        if (endian === 'little' || endian === 'le')\n            eE = 'le';\n        return new BigNumber(hex, 16, eE);\n    }\n    /**\n     * Converts this BigNumber to a hexadecimal string.\n     *\n     * @method toHex\n     * @param length - The minimum length of the hex string\n     * @returns Returns a string representing the hexadecimal value of this BigNumber.\n     *\n     * @example\n     * const bigNumber = new BigNumber(255)\n     * const hex = bigNumber.toHex()\n     */\n    toHex(byteLength = 0) {\n        if (this.isZero() && byteLength === 0)\n            return '';\n        let hexStr = this._getMinimalHex(); // Raw hex: \"0\", \"f\", \"10\", \"123\"\n        // Ensure even length for non-zero values (byte alignment)\n        if (hexStr !== '0' && hexStr.length % 2 !== 0) {\n            hexStr = '0' + hexStr;\n        }\n        // Pad to minimum character length (byteLength * 2)\n        const minChars = byteLength * 2;\n        while (hexStr.length < minChars) {\n            hexStr = '0' + hexStr;\n        }\n        return (this.isNeg() ? '-' : '') + hexStr;\n    }\n    /**\n     * Creates a BigNumber from a JSON-serialized string.\n     *\n     * @static\n     * @method fromJSON\n     * @param str - The JSON-serialized string to create a BigNumber from.\n     * @returns Returns a BigNumber created from the JSON input string.\n     */\n    static fromJSON(str) { return new BigNumber(str, 16); }\n    /**\n     * Creates a BigNumber from a number.\n     *\n     * @static\n     * @method fromNumber\n     * @param n - The number to create a BigNumber from.\n     * @returns Returns a BigNumber equivalent to the input number.\n     */\n    static fromNumber(n) { return new BigNumber(n); }\n    /**\n     * Creates a BigNumber from a string, considering an optional base.\n     *\n     * @static\n     * @method fromString\n     * @param str - The string to create a BigNumber from.\n     * @param base - The base used for conversion. If not provided, base 10 is assumed.\n     * @returns Returns a BigNumber equivalent to the string after conversion from the specified base.\n     */\n    static fromString(str, base) { return new BigNumber(str, base); }\n    /**\n     * Creates a BigNumber from a signed magnitude number.\n     *\n     * @static\n     * @method fromSm\n     * @param bytes - The signed magnitude number to convert to a BigNumber.\n     * @param endian - Defines endianess. If not provided, big endian is assumed.\n     * @returns Returns a BigNumber equivalent to the signed magnitude number interpreted with specified endianess.\n     */\n    static fromSm(bytes, endian = 'big') {\n        if (bytes.length === 0)\n            return new BigNumber(0n);\n        let sign = 0;\n        let hex = '';\n        if (endian === 'little') {\n            const last = bytes.length - 1;\n            let firstByte = bytes[last];\n            if ((firstByte & 0x80) !== 0) {\n                sign = 1;\n                firstByte &= 0x7f;\n            }\n            hex += (firstByte < 16 ? '0' : '') + firstByte.toString(16);\n            for (let i = last - 1; i >= 0; i--) {\n                const b = bytes[i];\n                hex += (b < 16 ? '0' : '') + b.toString(16);\n            }\n        }\n        else {\n            let firstByte = bytes[0];\n            if ((firstByte & 0x80) !== 0) {\n                sign = 1;\n                firstByte &= 0x7f;\n            }\n            hex += (firstByte < 16 ? '0' : '') + firstByte.toString(16);\n            for (let i = 1; i < bytes.length; i++) {\n                const b = bytes[i];\n                hex += (b < 16 ? '0' : '') + b.toString(16);\n            }\n        }\n        const mag = hex === '' ? 0n : BigInt('0x' + hex);\n        const r = new BigNumber(0n);\n        r._initializeState(mag, sign);\n        return r;\n    }\n    /**\n     * Converts this BigNumber to a signed magnitude number.\n     *\n     * @method toSm\n     * @param endian - Defines endianess. If not provided, big endian is assumed.\n     * @returns Returns an array equivalent to this BigNumber interpreted as a signed magnitude with specified endianess.\n     */\n    toSm(endian = 'big') {\n        if (this._magnitude === 0n) {\n            return this._sign === 1 ? [0x80] : [];\n        }\n        let hex = this._getMinimalHex();\n        if (hex.length % 2 !== 0)\n            hex = '0' + hex;\n        const byteLen = hex.length / 2;\n        const bytes = new Array(byteLen);\n        for (let i = 0, j = 0; i < hex.length; i += 2) {\n            bytes[j++] = parseInt(hex.slice(i, i + 2), 16);\n        }\n        if (this._sign === 1) {\n            if ((bytes[0] & 0x80) !== 0)\n                bytes.unshift(0x80);\n            else\n                bytes[0] |= 0x80;\n        }\n        else if ((bytes[0] & 0x80) !== 0) {\n            bytes.unshift(0x00);\n        }\n        return endian === 'little' ? bytes.reverse() : bytes;\n    }\n    /**\n     * Creates a BigNumber from a number representing the \"bits\" value in a block header.\n     *\n     * @static\n     * @method fromBits\n     * @param bits - The number representing the bits value in a block header.\n     * @param strict - If true, an error is thrown if the number has negative bit set.\n     * @returns Returns a BigNumber equivalent to the \"bits\" value in a block header.\n     * @throws Will throw an error if `strict` is `true` and the number has negative bit set.\n     */\n    static fromBits(bits, strict = false) {\n        const nSize = bits >>> 24;\n        const nWordCompact = bits & 0x007fffff;\n        const isNegativeFromBit = (bits & 0x00800000) !== 0;\n        if (strict && isNegativeFromBit) {\n            throw new Error('negative bit set');\n        }\n        if (nSize === 0 && nWordCompact === 0) {\n            if (isNegativeFromBit && strict)\n                throw new Error('negative bit set for zero value');\n            return new BigNumber(0n);\n        }\n        const bn = new BigNumber(nWordCompact);\n        // This logic comes from original bn.js `fromCompact`\n        if (nSize <= 3) {\n            bn.iushrn((3 - nSize) * 8);\n        }\n        else {\n            bn.iushln((nSize - 3) * 8);\n        }\n        if (isNegativeFromBit) {\n            bn.ineg();\n        }\n        return bn;\n    }\n    /**\n     * Converts this BigNumber to a number representing the \"bits\" value in a block header.\n     *\n     * @method toBits\n     * @returns Returns a number equivalent to the \"bits\" value in a block header.\n     */\n    toBits() {\n        this.strip();\n        if (this.isZero() && !this.isNeg())\n            return 0;\n        const isActualNegative = this.isNeg();\n        const bnAbs = this.abs(); // Work with absolute value for magnitude\n        // Get byte array of absolute value\n        let mB = bnAbs.toArray('be'); // Minimal byte array\n        // Remove leading zeros from byte array, if any (toArray('be') might already do this if no length specified)\n        let firstNonZeroIdx = 0;\n        while (firstNonZeroIdx < mB.length - 1 && mB[firstNonZeroIdx] === 0) { // Keep last byte if it's [0]\n            firstNonZeroIdx++;\n        }\n        mB = mB.slice(firstNonZeroIdx);\n        let nSize = mB.length;\n        if (nSize === 0 && !bnAbs.isZero()) { // Should not happen if bnAbs is truly non-zero and toArray is correct\n            mB = [0]; // Should not be needed if toArray works for small numbers\n            nSize = 1;\n        }\n        if (bnAbs.isZero()) { // if original was, e.g., -0, bnAbs is 0.\n            nSize = 0; // Size for 0 is 0, unless it's negative 0 to be encoded\n            mB = [];\n        }\n        let nWordNum;\n        if (nSize === 0) {\n            nWordNum = 0;\n        }\n        else if (nSize <= 3) {\n            nWordNum = 0;\n            for (let i = 0; i < nSize; i++) {\n                nWordNum = (nWordNum << 8) | mB[i];\n            }\n        }\n        else { // nSize > 3\n            nWordNum = (mB[0] << 16) | (mB[1] << 8) | mB[2];\n        }\n        if ((nWordNum & 0x00800000) !== 0 && nSize <= 0xff) { // MSB of 3-byte mantissa is set\n            nWordNum >>>= 8; // Shift mantissa over by one byte\n            nSize++; // Increase size component by one\n        }\n        let b = (nSize << 24) | nWordNum;\n        if (isActualNegative)\n            b |= 0x00800000;\n        return b >>> 0;\n    }\n    /**\n     * Creates a BigNumber from the format used in Bitcoin scripts.\n     *\n     * @static\n     * @method fromScriptNum\n     * @param num - The number in the format used in Bitcoin scripts.\n     * @param requireMinimal - If true, non-minimally encoded values will throw an error.\n     * @param maxNumSize - The maximum allowed size for the number.\n     * @returns Returns a BigNumber equivalent to the number used in a Bitcoin script.\n     */\n    static fromScriptNum(num, requireMinimal = false, maxNumSize) {\n        if (maxNumSize !== undefined && num.length > maxNumSize)\n            throw new Error('script number overflow');\n        if (num.length === 0)\n            return new BigNumber(0n);\n        if (requireMinimal) {\n            if ((num[num.length - 1] & 0x7f) === 0) {\n                if (num.length <= 1 || (num[num.length - 2] & 0x80) === 0) {\n                    throw new Error('non-minimally encoded script number');\n                }\n            }\n        }\n        return BigNumber.fromSm(num, 'little');\n    }\n    /**\n     * Converts this BigNumber to a number in the format used in Bitcoin scripts.\n     *\n     * @method toScriptNum\n     * @returns Returns the equivalent to this BigNumber as a Bitcoin script number.\n     */\n    toScriptNum() { return this.toSm('little'); }\n    /**\n     * Compute the multiplicative inverse of the current BigNumber in the modulus field specified by `p`.\n     * The multiplicative inverse is a number which when multiplied with the current BigNumber gives '1' in the modulus field.\n     *\n     * @method _invmp\n     * @param p - The `BigNumber` specifying the modulus field.\n     * @returns The multiplicative inverse `BigNumber` in the modulus field specified by `p`.\n     */\n    _invmp(p) {\n        this.assert(p._sign === 0, 'p must not be negative for _invmp');\n        this.assert(!p.isZero(), 'p must not be zero for _invmp');\n        const aBN = this.umod(p);\n        let aVal = aBN._magnitude;\n        let bVal = p._magnitude;\n        let x1Val = 1n;\n        let x2Val = 0n;\n        const modulus = p._magnitude;\n        while (aVal > 1n && bVal > 1n) {\n            let i = 0;\n            while (((aVal >> BigInt(i)) & 1n) === 0n)\n                i++;\n            if (i > 0) {\n                aVal >>= BigInt(i);\n                for (let k = 0; k < i; ++k) {\n                    if ((x1Val & 1n) !== 0n)\n                        x1Val += modulus;\n                    x1Val >>= 1n;\n                }\n            }\n            let j = 0;\n            while (((bVal >> BigInt(j)) & 1n) === 0n)\n                j++;\n            if (j > 0) {\n                bVal >>= BigInt(j);\n                for (let k = 0; k < j; ++k) {\n                    if ((x2Val & 1n) !== 0n)\n                        x2Val += modulus;\n                    x2Val >>= 1n;\n                }\n            }\n            if (aVal >= bVal) {\n                aVal -= bVal;\n                x1Val -= x2Val;\n            }\n            else {\n                bVal -= aVal;\n                x2Val -= x1Val;\n            }\n        }\n        let resultVal;\n        if (aVal === 1n)\n            resultVal = x1Val;\n        else if (bVal === 1n)\n            resultVal = x2Val;\n        else if (aVal === 0n && bVal === 1n)\n            resultVal = x2Val;\n        else if (bVal === 0n && aVal === 1n)\n            resultVal = x1Val;\n        else\n            throw new Error('_invmp: GCD is not 1, inverse does not exist. aVal=' + aVal + ', bVal=' + bVal);\n        resultVal %= modulus;\n        if (resultVal < 0n)\n            resultVal += modulus;\n        const resultBN = new BigNumber(0n);\n        resultBN._initializeState(resultVal, 0);\n        return resultBN;\n    }\n    /**\n     * Performs multiplication between the BigNumber instance and a given BigNumber.\n     * It chooses the multiplication method based on the lengths of the numbers to optimize execution time.\n     *\n     * @method mulTo\n     * @param num - The BigNumber multiply with.\n     * @param out - The BigNumber where to store the result.\n     * @returns The BigNumber resulting from the multiplication operation.\n     */\n    mulTo(num, out) {\n        out._magnitude = this._magnitude * num._magnitude;\n        out._sign = out._magnitude === 0n ? 0 : (this._sign ^ num._sign);\n        out._nominalWordLength = this.length + num.length;\n        out.red = null;\n        out.normSign();\n        return out;\n    }\n}\n//# sourceMappingURL=BigNumber.js.map","import BigNumber from './BigNumber.js';\n/**\n * A representation of a pseudo-Mersenne prime.\n * A pseudo-Mersenne prime has the general form 2^n - k, where n and k are integers.\n *\n * @class Mersenne\n *\n * @property name - The identifier for the Mersenne instance.\n * @property p - BigNumber equivalent to 2^n - k.\n * @property k - The constant subtracted from 2^n to derive a pseudo-Mersenne prime.\n * @property n - The exponent which determines the magnitude of the prime.\n */\nexport default class Mersenne {\n    name;\n    p;\n    k;\n    n;\n    tmp;\n    /**\n     * @constructor\n     * @param name - An identifier for the Mersenne instance.\n     * @param p - A string representation of the pseudo-Mersenne prime, expressed in hexadecimal.\n     *\n     * @example\n     * const mersenne = new Mersenne('M31', '7FFFFFFF');\n     */\n    constructor(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BigNumber(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BigNumber(BigInt(1)).iushln(this.n).isub(this.p); // Use 1n for BigInt compatibility\n        this.tmp = this._tmp();\n    }\n    /**\n     * Creates a temporary BigNumber structure for computations,\n     * ensuring the appropriate number of words are initially allocated.\n     *\n     * @method _tmp\n     * @returns A BigNumber with scaled size depending on prime magnitude.\n     */\n    _tmp() {\n        const tmp = new BigNumber(BigInt(0)); // Initialize with BigInt 0\n        const requiredWords = Math.ceil(this.n / BigNumber.wordSize);\n        tmp.expand(Math.max(1, requiredWords)); // Expand sets _nominalWordLength\n        return tmp;\n    }\n    /**\n     * Reduces an input BigNumber in place, under the assumption that\n     * it is less than the square of the pseudo-Mersenne prime.\n     *\n     * @method ireduce\n     * @param num - The BigNumber to be reduced.\n     * @returns The reduced BigNumber.\n     *\n     * @example\n     * const reduced = mersenne.ireduce(new BigNumber('2345', 16));\n     */\n    ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        const r = num; // num is directly modified\n        let rlen;\n        do {\n            this.split(r, this.tmp); // r is modified (becomes HI), this.tmp becomes LO\n            this.imulK(r); // r becomes HI * K\n            r.iadd(this.tmp); // r becomes HI * K + LO\n            rlen = r.bitLength();\n        } while (rlen > this.n);\n        const cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words = [0]; // Set to zero using the words setter\n        }\n        else if (cmp > 0) {\n            r.isub(this.p);\n        }\n        // No explicit strip needed here if operations maintain correctness and setter handles it.\n        // However, ensuring it's stripped to minimal form after reduction is good.\n        r.strip();\n        return r;\n    }\n    /**\n     * Shifts bits of the input BigNumber to the right, in place,\n     * to meet the magnitude of the pseudo-Mersenne prime.\n     *\n     * @method split\n     * @param input - The BigNumber to be shifted (will contain HI part).\n     * @param out - The BigNumber to hold the shifted result (LO part).\n     *\n     * @example\n     * mersenne.split(new BigNumber('2345', 16), new BigNumber());\n     */\n    split(input, out) {\n        // out gets the LO bits (shifted out part)\n        // input gets modified to be the HI bits (remaining part after shift)\n        input.iushrn(this.n, 0, out);\n    }\n    /**\n     * Performs an in-place multiplication of the parameter by constant k.\n     *\n     * @method imulK\n     * @param num - The BigNumber to multiply with k.\n     * @returns The result of the multiplication, in BigNumber format.\n     *\n     * @example\n     * const multiplied = mersenne.imulK(new BigNumber('2345', 16));\n     */\n    imulK(num) {\n        return num.imul(this.k);\n    }\n}\n//# sourceMappingURL=Mersenne.js.map","import Mersenne from './Mersenne.js';\n/**\n * A class representing K-256, a prime number with optimizations, specifically used in the secp256k1 curve.\n * It extends the functionalities of the Mersenne class.\n * K-256 prime is represented as 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'\n *\n * @class K256\n * @extends {Mersenne}\n *\n * @example\n * const k256 = new K256();\n */\nexport default class K256 extends Mersenne {\n    /**\n     * Constructor for the K256 class.\n     * Creates an instance of K256 using the super constructor from Mersenne.\n     *\n     * @constructor\n     *\n     * @example\n     * const k256 = new K256();\n     */\n    constructor() {\n        super('k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n    }\n    /**\n     * Splits a BigNumber into a new BigNumber based on specific computation\n     * rules. This method modifies the input and output big numbers.\n     *\n     * @method split\n     * @param input - The BigNumber to be split.\n     * @param output - The BigNumber that results from the split.\n     *\n     * @example\n     * const input = new BigNumber(3456);\n     * const output = new BigNumber(0);\n     * k256.split(input, output);\n     */\n    split(input, output) {\n        const mask = 0x3fffff; // 22 bits\n        const inputWords = input.words; // Access via getter\n        const inputNominalLength = input.length; // Access via getter, respects _nominalWordLength\n        const outLen = Math.min(inputNominalLength, 9);\n        const tempOutputWords = new Array(outLen + (inputNominalLength > 9 ? 1 : 0)).fill(0);\n        for (let i = 0; i < outLen; i++) {\n            tempOutputWords[i] = inputWords[i];\n        }\n        let currentOutputWordCount = outLen;\n        if (inputNominalLength <= 9) {\n            const finalOutputWords = new Array(currentOutputWordCount);\n            for (let i = 0; i < currentOutputWordCount; ++i)\n                finalOutputWords[i] = tempOutputWords[i];\n            output.words = finalOutputWords; // Use setter\n            input.words = [0]; // Use setter to set to 0\n            return;\n        }\n        // Shift by 9 limbs\n        let prev = inputWords[9];\n        tempOutputWords[currentOutputWordCount++] = prev & mask;\n        const finalOutputWords = new Array(currentOutputWordCount);\n        for (let i = 0; i < currentOutputWordCount; ++i)\n            finalOutputWords[i] = tempOutputWords[i];\n        output.words = finalOutputWords; // Use setter for output\n        // For input modification\n        const tempInputNewWords = new Array(Math.max(1, inputNominalLength - 9)).fill(0);\n        let currentInputNewWordCount = 0;\n        for (let i = 10; i < inputNominalLength; i++) {\n            const next = inputWords[i] | 0;\n            if (currentInputNewWordCount < tempInputNewWords.length) { // Boundary check\n                tempInputNewWords[currentInputNewWordCount++] = ((next & mask) << 4) | (prev >>> 22);\n            }\n            prev = next;\n        }\n        prev >>>= 22;\n        if (currentInputNewWordCount < tempInputNewWords.length) { // Boundary check\n            tempInputNewWords[currentInputNewWordCount++] = prev;\n        }\n        else if (prev !== 0 && tempInputNewWords.length > 0) { // If prev is non-zero but no space, this is an issue.\n            // This case implies original logic might have relied on array auto-expansion or specific length handling\n            // For safety, if there's still a carry and no space, the array should have been bigger.\n            // However, the original logic `input.length -= 9` suggests truncation.\n        }\n        const finalInputNewWords = new Array(currentInputNewWordCount);\n        for (let i = 0; i < currentInputNewWordCount; ++i)\n            finalInputNewWords[i] = tempInputNewWords[i];\n        input.words = finalInputNewWords; // Use setter, which will strip and set magnitude\n    }\n    /**\n     * Multiplies a BigNumber ('num') with the constant 'K' in-place and returns the result.\n     * 'K' is equal to 0x1000003d1 or in decimal representation: [ 64, 977 ].\n     *\n     * @method imulK\n     * @param num - The BigNumber to multiply with K.\n     * @returns Returns the mutated BigNumber after multiplication.\n     *\n     * @example\n     * const number = new BigNumber(12345);\n     * const result = k256.imulK(number);\n     */\n    imulK(num) {\n        const currentWords = num.words; // Get current words based on _magnitude and _nominalWordLength\n        const originalNominalLength = num.length; // Getter\n        const newNominalLength = originalNominalLength + 2;\n        const tempWords = new Array(newNominalLength).fill(0);\n        for (let i = 0; i < originalNominalLength; i++) {\n            tempWords[i] = currentWords[i];\n        }\n        // tempWords is now effectively num.words expanded with zeroes\n        let lo = 0;\n        for (let i = 0; i < newNominalLength; i++) { // Iterate up to new expanded length\n            const w = tempWords[i] | 0;\n            lo += w * 0x3d1; // 0x3d1 = 977\n            tempWords[i] = lo & 0x3ffffff; // 26-bit mask\n            lo = w * 0x40 + ((lo / 0x4000000) | 0); // 0x40 = 64. 0x4000000 = 2^26\n        }\n        num.words = tempWords; // Use setter to re-initialize from tempWords\n        // The setter will handle _magnitude, _sign, _nominalWordLength, and strip.\n        return num;\n    }\n}\n//# sourceMappingURL=K256.js.map","import BigNumber from './BigNumber.js';\nimport K256 from './K256.js';\n/**\n * A base reduction engine that provides several arithmetic operations over\n * big numbers under a modulus context. It's particularly suitable for\n * calculations required in cryptography algorithms and encoding schemas.\n *\n * @class ReductionContext\n *\n * @property prime - The prime number utilised in the reduction context, typically an instance of Mersenne class.\n * @property m - The modulus used for reduction operations.\n */\nexport default class ReductionContext {\n    prime;\n    m;\n    /**\n     * Constructs a new ReductionContext.\n     *\n     * @constructor\n     * @param m - A BigNumber representing the modulus, or 'k256' to create a context for Koblitz curve.\n     *\n     * @example\n     * new ReductionContext(new BigNumber(11));\n     * new ReductionContext('k256');\n     */\n    constructor(m) {\n        if (m === 'k256') {\n            const prime = new K256();\n            this.m = prime.p;\n            this.prime = prime;\n        }\n        else {\n            this.assert(m.gtn(1), 'modulus must be greater than 1');\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    /**\n     * Asserts that given value is truthy. Throws an Error with a provided message\n     * if the value is falsy.\n     *\n     * @private\n     * @param val - The value to be checked.\n     * @param msg - The error message to be thrown if the value is falsy.\n     *\n     * @example\n     * this.assert(1 < 2, '1 is not less than 2');\n     * this.assert(2 < 1, '2 is less than 1'); // throws an Error with message '2 is less than 1'\n     */\n    assert(val, msg = 'Assertion failed') {\n        if (!val)\n            throw new Error(msg);\n    }\n    /**\n     * Verifies that a BigNumber is positive and red. Throws an error if these\n     * conditions are not met.\n     *\n     * @param a - The BigNumber to be verified.\n     *\n     * @example\n     * this.verify1(new BigNumber(10).toRed());\n     * this.verify1(new BigNumber(-10).toRed()); //throws an Error\n     * this.verify1(new BigNumber(10)); //throws an Error\n     */\n    verify1(a) {\n        this.assert(a.negative === 0, 'red works only with positives');\n        this.assert(a.red, 'red works only with red numbers');\n    }\n    /**\n     * Verifies that two BigNumbers are both positive and red. Also checks\n     * that they have the same reduction context. Throws an error if these\n     * conditions are not met.\n     *\n     * @param a - The first BigNumber to be verified.\n     * @param b - The second BigNumber to be verified.\n     *\n     * @example\n     * this.verify2(new BigNumber(10).toRed(this), new BigNumber(20).toRed(this));\n     * this.verify2(new BigNumber(-10).toRed(this), new BigNumber(20).toRed(this)); //throws an Error\n     * this.verify2(new BigNumber(10).toRed(this), new BigNumber(20)); //throws an Error\n     */\n    verify2(a, b) {\n        this.assert((a.negative | b.negative) === 0, 'red works only with positives');\n        this.assert(a.red != null && a.red === b.red, 'red works only with red numbers');\n    }\n    /**\n     * Performs an in-place reduction of the given BigNumber by the modulus of the reduction context, 'm'.\n     *\n     * @method imod\n     *\n     * @param a - BigNumber to be reduced.\n     *\n     * @returns Returns the reduced result.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.imod(new BigNumber(19)); // Returns 5\n     */\n    imod(a) {\n        if (this.prime != null)\n            return this.prime.ireduce(a).forceRed(this);\n        BigNumber.move(a, a.umod(this.m).forceRed(this));\n        return a;\n    }\n    /**\n     * Negates a BigNumber in the context of the modulus.\n     *\n     * @method neg\n     *\n     * @param a - BigNumber to negate.\n     *\n     * @returns Returns the negation of 'a' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.neg(new BigNumber(3)); // Returns 4\n     */\n    neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a).forceRed(this);\n    }\n    /**\n     * Performs the addition operation on two BigNumbers in the reduction context.\n     *\n     * @method add\n     *\n     * @param a - First BigNumber to add.\n     * @param b - Second BigNumber to add.\n     *\n     * @returns Returns the result of 'a + b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(5));\n     * context.add(new BigNumber(2), new BigNumber(4)); // Returns 1\n     */\n    add(a, b) {\n        this.verify2(a, b);\n        const res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res.forceRed(this);\n    }\n    /**\n     * Performs an in-place addition operation on two BigNumbers in the reduction context\n     * in order to avoid creating a new BigNumber, it modifies the first one with the result.\n     *\n     * @method iadd\n     *\n     * @param a - First BigNumber to add.\n     * @param b - Second BigNumber to add.\n     *\n     * @returns Returns the modified 'a' after addition with 'b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(5));\n     * const a = new BigNumber(2);\n     * context.iadd(a, new BigNumber(4)); // Modifies 'a' to be 1\n     */\n    iadd(a, b) {\n        this.verify2(a, b);\n        const res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    }\n    /**\n     * Subtracts one BigNumber from another BigNumber in the reduction context.\n     *\n     * @method sub\n     *\n     * @param a - BigNumber to be subtracted from.\n     * @param b - BigNumber to subtract.\n     *\n     * @returns Returns the result of 'a - b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.sub(new BigNumber(3), new BigNumber(2)); // Returns 1\n     */\n    sub(a, b) {\n        this.verify2(a, b);\n        const res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res.forceRed(this);\n    }\n    /**\n     * Performs in-place subtraction of one BigNumber from another in the reduction context,\n     * it modifies the first BigNumber with the result.\n     *\n     * @method isub\n     *\n     * @param a - BigNumber to be subtracted from.\n     * @param b - BigNumber to subtract.\n     *\n     * @returns Returns the modified 'a' after subtraction of 'b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(5));\n     * const a = new BigNumber(4);\n     * context.isub(a, new BigNumber(2)); // Modifies 'a' to be 2\n     */\n    isub(a, b) {\n        this.verify2(a, b);\n        const res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    }\n    /**\n     * Performs bitwise shift left operation on a BigNumber in the reduction context.\n     *\n     * @method shl\n     *\n     * @param a - BigNumber to perform shift on.\n     * @param num - The number of positions to shift.\n     *\n     * @returns Returns the result of shifting 'a' left by 'num' positions in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(32));\n     * context.shl(new BigNumber(4), 2); // Returns 16\n     */\n    shl(a, num) {\n        this.verify1(a);\n        return this.imod(a.ushln(num));\n    }\n    /**\n     * Performs in-place multiplication of two BigNumbers in the reduction context,\n     * modifying the first BigNumber with the result.\n     *\n     * @method imul\n     *\n     * @param a - First BigNumber to multiply.\n     * @param b - Second BigNumber to multiply.\n     *\n     * @returns Returns the modified 'a' after multiplication with 'b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * const a = new BigNumber(3);\n     * context.imul(a, new BigNumber(2)); // Modifies 'a' to be 6\n     */\n    imul(a, b) {\n        this.verify2(a, b);\n        return this.imod(a.imul(b));\n    }\n    /**\n     * Multiplies two BigNumbers in the reduction context.\n     *\n     * @method mul\n     *\n     * @param a - First BigNumber to multiply.\n     * @param b - Second BigNumber to multiply.\n     *\n     * @returns Returns the result of 'a * b' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.mul(new BigNumber(3), new BigNumber(2)); // Returns 6\n     */\n    mul(a, b) {\n        this.verify2(a, b);\n        return this.imod(a.mul(b));\n    }\n    /**\n     * Calculates the square of a BigNumber in the reduction context,\n     * modifying the original BigNumber with the result.\n     *\n     * @method isqr\n     *\n     * @param a - BigNumber to be squared.\n     *\n     * @returns Returns the squared 'a' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * const a = new BigNumber(3);\n     * context.isqr(a); // Modifies 'a' to be 2 (9 % 7 = 2)\n     */\n    isqr(a) {\n        return this.imul(a, a.clone());\n    }\n    /**\n     * Calculates the square of a BigNumber in the reduction context.\n     *\n     * @method sqr\n     *\n     * @param a - BigNumber to be squared.\n     *\n     * @returns Returns the result of 'a^2' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.sqr(new BigNumber(3)); // Returns 2 (9 % 7 = 2)\n     */\n    sqr(a) {\n        return this.mul(a, a);\n    }\n    /**\n     * Calculates the square root of a BigNumber in the reduction context.\n     *\n     * @method sqrt\n     *\n     * @param a - The BigNumber to calculate the square root of.\n     *\n     * @returns Returns the square root of 'a' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(9));\n     * context.sqrt(new BigNumber(4)); // Returns 2\n     */\n    sqrt(a) {\n        if (a.isZero())\n            return a.clone();\n        const mod3 = this.m.andln(3);\n        this.assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            const pow = this.m.add(new BigNumber(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        const q = this.m.subn(1);\n        let s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n            s++;\n            q.iushrn(1);\n        }\n        this.assert(!q.isZero());\n        const one = new BigNumber(1).toRed(this);\n        const nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        const lpow = this.m.subn(1).iushrn(1);\n        const zl = this.m.bitLength();\n        const z = new BigNumber(2 * zl * zl).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n            z.redIAdd(nOne);\n        }\n        let c = this.pow(z, q);\n        let r = this.pow(a, q.addn(1).iushrn(1));\n        let t = this.pow(a, q);\n        let m = s;\n        while (t.cmp(one) !== 0) {\n            let tmp = t;\n            let i = 0;\n            for (; tmp.cmp(one) !== 0; i++) {\n                tmp = tmp.redSqr();\n            }\n            this.assert(i < m);\n            const b = this.pow(c, new BigNumber(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    }\n    /**\n     * Calculates the multiplicative inverse of a BigNumber in the reduction context.\n     *\n     * @method invm\n     *\n     * @param a - The BigNumber to find the multiplicative inverse of.\n     *\n     * @returns Returns the multiplicative inverse of 'a' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(11));\n     * context.invm(new BigNumber(3)); // Returns 4 (3*4 mod 11 = 1)\n     */\n    invm(a) {\n        const inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        }\n        else {\n            return this.imod(inv);\n        }\n    }\n    /**\n     * Raises a BigNumber to a power in the reduction context.\n     *\n     * @method pow\n     *\n     * @param a - The BigNumber to be raised to a power.\n     * @param num - The power to raise the BigNumber to.\n     *\n     * @returns Returns the result of 'a' raised to the power of 'num' in the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.pow(new BigNumber(3), new BigNumber(2)); // Returns 2 (3^2 % 7)\n     */\n    pow(a, num) {\n        if (num.isZero())\n            return new BigNumber(1).toRed(this);\n        if (num.cmpn(1) === 0)\n            return a.clone();\n        const windowSize = 4;\n        const wnd = new Array(1 << windowSize);\n        wnd[0] = new BigNumber(1).toRed(this);\n        wnd[1] = a;\n        let i = 2;\n        for (; i < wnd.length; i++) {\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        let res = wnd[0];\n        let current = 0;\n        let currentLen = 0;\n        let start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n            const word = num.words[i];\n            for (let j = start - 1; j >= 0; j--) {\n                const bit = (word >> j) & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0))\n                    continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    }\n    /**\n     * Converts a BigNumber to its equivalent in the reduction context.\n     *\n     * @method convertTo\n     *\n     * @param num - The BigNumber to convert to the reduction context.\n     *\n     * @returns Returns the converted BigNumber compatible with the reduction context.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * context.convertTo(new BigNumber(8)); // Returns 1 (8 % 7)\n     */\n    convertTo(num) {\n        const r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    }\n    /**\n     * Converts a BigNumber from reduction context to its regular form.\n     *\n     * @method convertFrom\n     *\n     * @param num - The BigNumber to convert from the reduction context.\n     *\n     * @returns Returns the converted BigNumber in its regular form.\n     *\n     * @example\n     * const context = new ReductionContext(new BigNumber(7));\n     * const a = context.convertTo(new BigNumber(8)); // 'a' is now 1 in the reduction context\n     * context.convertFrom(a); // Returns 1\n     */\n    convertFrom(num) {\n        const res = num.clone();\n        res.red = null;\n        return res;\n    }\n}\n//# sourceMappingURL=ReductionContext.js.map","import ReductionContext from './ReductionContext.js';\nimport BigNumber from './BigNumber.js';\n/**\n * Represents a Montgomery reduction context, which is a mathematical method\n * for performing modular multiplication without division.\n *\n * Montgomery reduction is an algorithm used mainly in cryptography which can\n * help to speed up calculations in contexts where there are many repeated\n * computations.\n *\n * This class extends the `ReductionContext` class.\n *\n * @class MontgomoryMethod\n * @extends {ReductionContext}\n *\n * @property shift - The number of bits in the modulus.\n * @property r - The 2^shift, shifted left by the bit length of modulus `m`.\n * @property r2 - The square of `r` modulo `m`.\n * @property rinv - The modular multiplicative inverse of `r` mod `m`.\n * @property minv - The modular multiplicative inverse of `m` mod `r`.\n */\nexport default class MontgomoryMethod extends ReductionContext {\n    shift;\n    r;\n    r2;\n    rinv;\n    minv;\n    /**\n     * @constructor\n     * @param m - The modulus to be used for the Montgomery method reductions.\n     */\n    constructor(m) {\n        super(m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - (this.shift % 26);\n        }\n        this.r = new BigNumber(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    /**\n     * Converts a number into the Montgomery domain.\n     *\n     * @method convertTo\n     * @param num - The number to be converted into the Montgomery domain.\n     * @returns The result of the conversion into the Montgomery domain.\n     *\n     * @example\n     * const montMethod = new MontgomoryMethod(m);\n     * const convertedNum = montMethod.convertTo(num);\n     */\n    convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    }\n    /**\n     * Converts a number from the Montgomery domain back to the original domain.\n     *\n     * @method convertFrom\n     * @param num - The number to be converted from the Montgomery domain.\n     * @returns The result of the conversion from the Montgomery domain.\n     *\n     * @example\n     * const montMethod = new MontgomoryMethod(m);\n     * const convertedNum = montMethod.convertFrom(num);\n     */\n    convertFrom(num) {\n        const r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    }\n    /**\n     * Performs an in-place multiplication of two numbers in the Montgomery domain.\n     *\n     * @method imul\n     * @param a - The first number to multiply.\n     * @param b - The second number to multiply.\n     * @returns The result of the in-place multiplication.\n     *\n     * @example\n     * const montMethod = new MontgomoryMethod(m);\n     * const product = montMethod.imul(a, b);\n     */\n    imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        const t = a.imul(b);\n        const c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        const u = t.isub(c).iushrn(this.shift);\n        let res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        }\n        else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res.forceRed(this);\n    }\n    /**\n     * Performs the multiplication of two numbers in the Montgomery domain.\n     *\n     * @method mul\n     * @param a - The first number to multiply.\n     * @param b - The second number to multiply.\n     * @returns The result of the multiplication.\n     *\n     * @example\n     * const montMethod = new MontgomoryMethod(m);\n     * const product = montMethod.mul(a, b);\n     */\n    mul(a, b) {\n        if (a.isZero() || b.isZero())\n            return new BigNumber(0).forceRed(this);\n        const t = a.mul(b);\n        const c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        const u = t.isub(c).iushrn(this.shift);\n        let res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        }\n        else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res.forceRed(this);\n    }\n    /**\n     * Calculates the modular multiplicative inverse of a number in the Montgomery domain.\n     *\n     * @method invm\n     * @param a - The number to compute the modular multiplicative inverse of.\n     * @returns The modular multiplicative inverse of 'a'.\n     *\n     * @example\n     * const montMethod = new MontgomoryMethod(m);\n     * const inverse = montMethod.invm(a);\n     */\n    invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        const res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res.forceRed(this);\n    }\n}\n//# sourceMappingURL=MontgomoryMethod.js.map","import Curve from './Curve.js';\n/**\n * Base class for Point (affine coordinates) and JacobianPoint classes,\n * defining their curve and type.\n */\nexport default class BasePoint {\n    curve;\n    type;\n    precomputed;\n    constructor(type) {\n        this.curve = new Curve(); // Always initialized, so never null\n        this.type = type;\n        this.precomputed = null;\n    }\n}\n//# sourceMappingURL=BasePoint.js.map","import BasePoint from './BasePoint.js';\nimport BigNumber from './BigNumber.js';\nimport Point from './Point.js';\n/**\n * The `JacobianPoint` class extends the `BasePoint` class for handling Jacobian coordinates on an Elliptic Curve.\n * This class defines the properties and the methods needed to work with points in Jacobian coordinates.\n *\n * The Jacobian coordinates represent a point (x, y, z) on an Elliptic Curve such that the usual (x, y) coordinates are given by (x/z^2, y/z^3).\n *\n * @property x - The `x` coordinate of the point in the Jacobian form.\n * @property y - The `y` coordinate of the point in the Jacobian form.\n * @property z - The `z` coordinate of the point in the Jacobian form.\n * @property zOne - Flag that indicates if the `z` coordinate is one.\n *\n * @example\n * const pointJ = new JacobianPoint('3', '4', '1');\n */\nexport default class JacobianPoint extends BasePoint {\n    x;\n    y;\n    z;\n    zOne;\n    /**\n     * Constructs a new `JacobianPoint` instance.\n     *\n     * @param x - If `null`, the x-coordinate will default to the curve's defined 'one' constant.\n     * If `x` is not a BigNumber, `x` will be converted to a `BigNumber` assuming it is a hex string.\n     *\n     * @param y - If `null`, the y-coordinate will default to the curve's defined 'one' constant.\n     * If `y` is not a BigNumber, `y` will be converted to a `BigNumber` assuming it is a hex string.\n     *\n     * @param z - If `null`, the z-coordinate will default to 0.\n     * If `z` is not a BigNumber, `z` will be converted to a `BigNumber` assuming it is a hex string.\n     *\n     * @example\n     * const pointJ1 = new JacobianPoint(null, null, null); // creates point at infinity\n     * const pointJ2 = new JacobianPoint('3', '4', '1'); // creates point (3, 4, 1)\n     */\n    constructor(x, y, z) {\n        super('jacobian');\n        if (x === null && y === null && z === null) {\n            this.x = this.curve.one;\n            this.y = this.curve.one;\n            this.z = new BigNumber(0);\n        }\n        else {\n            if (!BigNumber.isBN(x)) {\n                x = new BigNumber(x, 16);\n            }\n            this.x = x;\n            if (!BigNumber.isBN(y)) {\n                y = new BigNumber(y, 16);\n            }\n            this.y = y;\n            if (!BigNumber.isBN(z)) {\n                z = new BigNumber(z, 16);\n            }\n            this.z = z;\n        }\n        if (this.x.red == null) {\n            this.x = this.x.toRed(this.curve.red);\n        }\n        if (this.y.red == null) {\n            this.y = this.y.toRed(this.curve.red);\n        }\n        if (this.z.red == null) {\n            this.z = this.z.toRed(this.curve.red);\n        }\n        this.zOne = this.z === this.curve.one;\n    }\n    /**\n     * Converts the `JacobianPoint` object instance to standard affine `Point` format and returns `Point` type.\n     *\n     * @returns The `Point`(affine) object representing the same point as the original `JacobianPoint`.\n     *\n     * If the initial `JacobianPoint` represents point at infinity, an instance of `Point` at infinity is returned.\n     *\n     * @example\n     * const pointJ = new JacobianPoint('3', '4', '1');\n     * const pointP = pointJ.toP();  // The point in affine coordinates.\n     */\n    toP() {\n        if (this.isInfinity()) {\n            return new Point(null, null);\n        }\n        const zinv = this.z.redInvm();\n        const zinv2 = zinv.redSqr();\n        const ax = this.x.redMul(zinv2);\n        const ay = this.y.redMul(zinv2).redMul(zinv);\n        return new Point(ax, ay);\n    }\n    /**\n     * Negation operation. It returns the additive inverse of the Jacobian point.\n     *\n     * @method neg\n     * @returns Returns a new Jacobian point as the result of the negation.\n     *\n     * @example\n     * const jp = new JacobianPoint(x, y, z)\n     * const result = jp.neg()\n     */\n    neg() {\n        return new JacobianPoint(this.x, this.y.redNeg(), this.z);\n    }\n    /**\n     * Addition operation in the Jacobian coordinates. It takes a Jacobian point as an argument\n     * and returns a new Jacobian point as a result of the addition. In the special cases,\n     * when either one of the points is the point at infinity, it will return the other point.\n     *\n     * @method add\n     * @param p - The Jacobian point to be added.\n     * @returns Returns a new Jacobian point as the result of the addition.\n     *\n     * @example\n     * const p1 = new JacobianPoint(x1, y1, z1)\n     * const p2 = new JacobianPoint(x2, y2, z2)\n     * const result = p1.add(p2)\n     */\n    add(p) {\n        // O + P = P\n        if (this.isInfinity()) {\n            return p;\n        }\n        // P + O = P\n        if (p.isInfinity()) {\n            return this;\n        }\n        // 12M + 4S + 7A\n        const pz2 = p.z.redSqr();\n        const z2 = this.z.redSqr();\n        const u1 = this.x.redMul(pz2);\n        const u2 = p.x.redMul(z2);\n        const s1 = this.y.redMul(pz2.redMul(p.z));\n        const s2 = p.y.redMul(z2.redMul(this.z));\n        const h = u1.redSub(u2);\n        const r = s1.redSub(s2);\n        if (h.cmpn(0) === 0) {\n            if (r.cmpn(0) !== 0) {\n                return new JacobianPoint(null, null, null);\n            }\n            else {\n                return this.dbl();\n            }\n        }\n        const h2 = h.redSqr();\n        const h3 = h2.redMul(h);\n        const v = u1.redMul(h2);\n        const nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        const ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        const nz = this.z.redMul(p.z).redMul(h);\n        return new JacobianPoint(nx, ny, nz);\n    }\n    /**\n     * Mixed addition operation. This function combines the standard point addition with\n     * the transformation from the affine to Jacobian coordinates. It first converts\n     * the affine point to Jacobian, and then preforms the addition.\n     *\n     * @method mixedAdd\n     * @param p - The affine point to be added.\n     * @returns Returns the result of the mixed addition as a new Jacobian point.\n     *\n     * @example\n     * const jp = new JacobianPoint(x1, y1, z1)\n     * const ap = new Point(x2, y2)\n     * const result = jp.mixedAdd(ap)\n     */\n    mixedAdd(p) {\n        // O + P = P\n        if (this.isInfinity()) {\n            return p.toJ();\n        }\n        // P + O = P\n        if (p.isInfinity()) {\n            return this;\n        }\n        // Ensure x and y are not null\n        if (p.x === null || p.y === null) {\n            throw new Error('Point coordinates cannot be null');\n        }\n        // 8M + 3S + 7A\n        const z2 = this.z.redSqr();\n        const u1 = this.x;\n        const u2 = p.x.redMul(z2);\n        const s1 = this.y;\n        const s2 = p.y.redMul(z2).redMul(this.z);\n        const h = u1.redSub(u2);\n        const r = s1.redSub(s2);\n        if (h.cmpn(0) === 0) {\n            if (r.cmpn(0) !== 0) {\n                return new JacobianPoint(null, null, null);\n            }\n            else {\n                return this.dbl();\n            }\n        }\n        const h2 = h.redSqr();\n        const h3 = h2.redMul(h);\n        const v = u1.redMul(h2);\n        const nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        const ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        const nz = this.z.redMul(h);\n        return new JacobianPoint(nx, ny, nz);\n    }\n    /**\n     * Multiple doubling operation. It doubles the Jacobian point as many times as the pow parameter specifies. If pow is 0 or the point is the point at infinity, it will return the point itself.\n     *\n     * @method dblp\n     * @param pow - The number of times the point should be doubled.\n     * @returns Returns a new Jacobian point as the result of multiple doublings.\n     *\n     * @example\n     * const jp = new JacobianPoint(x, y, z)\n     * const result = jp.dblp(3)\n     */\n    dblp(pow) {\n        if (pow === 0) {\n            return this;\n        }\n        if (this.isInfinity()) {\n            return this;\n        }\n        if (typeof pow === 'undefined') {\n            return this.dbl();\n        }\n        /* eslint-disable @typescript-eslint/no-this-alias */\n        let r = this;\n        for (let i = 0; i < pow; i++) {\n            r = r.dbl();\n        }\n        return r;\n    }\n    /**\n     * Point doubling operation in the Jacobian coordinates. A special case is when the point is the point at infinity, in this case, this function will return the point itself.\n     *\n     * @method dbl\n     * @returns Returns a new Jacobian point as the result of the doubling.\n     *\n     * @example\n     * const jp = new JacobianPoint(x, y, z)\n     * const result = jp.dbl()\n     */\n    dbl() {\n        if (this.isInfinity()) {\n            return this;\n        }\n        let nx;\n        let ny;\n        let nz;\n        // Z = 1\n        if (this.zOne) {\n            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n            //     #doubling-mdbl-2007-bl\n            // 1M + 5S + 14A\n            // XX = X1^2\n            const xx = this.x.redSqr();\n            // YY = Y1^2\n            const yy = this.y.redSqr();\n            // YYYY = YY^2\n            const yyyy = yy.redSqr();\n            // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n            let s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n            s = s.redIAdd(s);\n            // M = 3 * XX + a; a = 0\n            const m = xx.redAdd(xx).redIAdd(xx);\n            // T = M ^ 2 - 2*S\n            const t = m.redSqr().redISub(s).redISub(s);\n            // 8 * YYYY\n            let yyyy8 = yyyy.redIAdd(yyyy);\n            yyyy8 = yyyy8.redIAdd(yyyy8);\n            yyyy8 = yyyy8.redIAdd(yyyy8);\n            // X3 = T\n            nx = t;\n            // Y3 = M * (S - T) - 8 * YYYY\n            ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n            // Z3 = 2*Y1\n            nz = this.y.redAdd(this.y);\n        }\n        else {\n            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n            //     #doubling-dbl-2009-l\n            // 2M + 5S + 13A\n            // A = X1^2\n            const a = this.x.redSqr();\n            // B = Y1^2\n            const b = this.y.redSqr();\n            // C = B^2\n            const c = b.redSqr();\n            // D = 2 * ((X1 + B)^2 - A - C)\n            let d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n            d = d.redIAdd(d);\n            // E = 3 * A\n            const e = a.redAdd(a).redIAdd(a);\n            // F = E^2\n            const f = e.redSqr();\n            // 8 * C\n            let c8 = c.redIAdd(c);\n            c8 = c8.redIAdd(c8);\n            c8 = c8.redIAdd(c8);\n            // X3 = F - 2 * D\n            nx = f.redISub(d).redISub(d);\n            // Y3 = E * (D - X3) - 8 * C\n            ny = e.redMul(d.redISub(nx)).redISub(c8);\n            // Z3 = 2 * Y1 * Z1\n            nz = this.y.redMul(this.z);\n            nz = nz.redIAdd(nz);\n        }\n        return new JacobianPoint(nx, ny, nz);\n    }\n    /**\n     * Equality check operation. It checks whether the affine or Jacobian point is equal to this Jacobian point.\n     *\n     * @method eq\n     * @param p - The affine or Jacobian point to compare with.\n     * @returns Returns true if the points are equal, otherwise returns false.\n     *\n     * @example\n     * const jp1 = new JacobianPoint(x1, y1, z1)\n     * const jp2 = new JacobianPoint(x2, y2, z2)\n     * const areEqual = jp1.eq(jp2)\n     */\n    eq(p) {\n        if (p.type === 'affine') {\n            return this.eq(p.toJ());\n        }\n        if (this === p) {\n            return true;\n        }\n        // x1 * z2^2 == x2 * z1^2\n        const z2 = this.z.redSqr();\n        p = p;\n        const pz2 = p.z.redSqr();\n        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) {\n            return false;\n        }\n        // y1 * z2^3 == y2 * z1^3\n        const z3 = z2.redMul(this.z);\n        const pz3 = pz2.redMul(p.z);\n        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n    }\n    /**\n     * Equality check operation in relation to an x coordinate of a point in projective coordinates.\n     * It checks whether the x coordinate of the Jacobian point is equal to the provided x coordinate\n     * of a point in projective coordinates.\n     *\n     * @method eqXToP\n     * @param x - The x coordinate of a point in projective coordinates.\n     * @returns Returns true if the x coordinates are equal, otherwise returns false.\n     *\n     * @example\n     * const jp = new JacobianPoint(x1, y1, z1)\n     * const isXEqual = jp.eqXToP(x2)\n     */\n    eqXToP(x) {\n        const zs = this.z.redSqr();\n        const rx = x.toRed(this.curve?.red).redMul(zs);\n        if (this.x.cmp(rx) === 0) {\n            return true;\n        }\n        const xc = x.clone();\n        if (this.curve === null || (this.curve.redN == null)) {\n            throw new Error('Curve or redN is not initialized.');\n        }\n        const t = this.curve.redN.redMul(zs);\n        while (xc.cmp(this.curve.p) < 0) {\n            xc.iadd(this.curve.n);\n            if (xc.cmp(this.curve.p) >= 0) {\n                return false;\n            }\n            rx.redIAdd(t);\n            if (this.x.cmp(rx) === 0) {\n                return true;\n            }\n        }\n        // ✅ Ensure function always returns a boolean\n        return false;\n    }\n    /**\n     * Returns the string representation of the JacobianPoint instance.\n     * @method inspect\n     * @returns Returns the string description of the JacobianPoint. If the JacobianPoint represents a point at infinity, the return value of this function is '<EC JPoint Infinity>'. For a normal point, it returns the string description format as '<EC JPoint x: x-coordinate y: y-coordinate z: z-coordinate>'.\n     *\n     * @example\n     * const point = new JacobianPoint('5', '6', '1');\n     * console.log(point.inspect()); // Output: '<EC JPoint x: 5 y: 6 z: 1>'\n     */\n    inspect() {\n        if (this.isInfinity()) {\n            return '<EC JPoint Infinity>';\n        }\n        return ('<EC JPoint x: ' +\n            this.x.toString(16, 2) +\n            ' y: ' +\n            this.y.toString(16, 2) +\n            ' z: ' +\n            this.z.toString(16, 2) +\n            '>');\n    }\n    /**\n     * Checks whether the JacobianPoint instance represents a point at infinity.\n     * @method isInfinity\n     * @returns Returns true if the JacobianPoint's z-coordinate equals to zero (which represents the point at infinity in Jacobian coordinates). Returns false otherwise.\n     *\n     * @example\n     * const point = new JacobianPoint('5', '6', '0');\n     * console.log(point.isInfinity()); // Output: true\n     */\n    isInfinity() {\n        return this.z.cmpn(0) === 0;\n    }\n}\n//# sourceMappingURL=JacobianPoint.js.map","// @ts-nocheck\n/* eslint-disable @typescript-eslint/naming-convention */\nconst assert = (expression, message = 'Hash assertion failed') => {\n    if (!expression) {\n        throw new Error(message);\n    }\n};\n/**\n * The BaseHash class is an abstract base class for cryptographic hash functions.\n * It provides a common structure and functionality for hash function classes.\n *\n * @class BaseHash\n *\n * @property pending - Stores partially processed message segments.\n * @property pendingTotal - The total number of characters that are being stored in `pending`\n * @property blockSize - The size of each block to processed.\n * @property outSize - The size of the final hash output.\n * @property endian - The endianness used during processing, can either be 'big' or 'little'.\n * @property _delta8 - The block size divided by 8, useful in various computations.\n * @property _delta32 - The block size divided by 32, useful in various computations.\n * @property padLength - The length of padding to be added to finalize the computation.\n * @property hmacStrength - The HMAC strength value.\n *\n * @param blockSize - The size of the block to be hashed.\n * @param outSize - The size of the resulting hash.\n * @param hmacStrength - The strength of the HMAC.\n * @param padLength - The length of the padding to be added.\n *\n * @example\n * Sub-classes would extend this base BaseHash class like:\n * class RIPEMD160 extends BaseHash {\n *   constructor () {\n *     super(512, 160, 192, 64);\n *     // ...\n *   }\n *   // ...\n * }\n */\nclass BaseHash {\n    pending;\n    pendingTotal;\n    blockSize;\n    outSize;\n    endian;\n    _delta8;\n    _delta32;\n    padLength;\n    hmacStrength;\n    constructor(blockSize, outSize, hmacStrength, padLength) {\n        this.pending = null;\n        this.pendingTotal = 0;\n        this.blockSize = blockSize;\n        this.outSize = outSize;\n        this.hmacStrength = hmacStrength;\n        this.padLength = padLength / 8;\n        this.endian = 'big';\n        this._delta8 = this.blockSize / 8;\n        this._delta32 = this.blockSize / 32;\n    }\n    _update(msg, start) {\n        throw new Error('Not implemented');\n    }\n    _digest() {\n        throw new Error('Not implemented');\n    }\n    _digestHex() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Converts the input message into an array, pads it, and joins into 32bit blocks.\n     * If there is enough data, it tries updating the hash computation.\n     *\n     * @method update\n     * @param msg - The message segment to include in the hashing computation.\n     * @param enc - The encoding of the message. If 'hex', the string will be treated as such, 'utf8' otherwise.\n     *\n     * @returns Returns the instance of the object for chaining.\n     *\n     * @example\n     * sha256.update('Hello World', 'utf8');\n     */\n    update(msg, enc) {\n        // Convert message to array, pad it, and join into 32bit blocks\n        msg = toArray(msg, enc);\n        if (this.pending == null) {\n            this.pending = msg;\n        }\n        else {\n            this.pending = this.pending.concat(msg);\n        }\n        this.pendingTotal += msg.length;\n        // Enough data, try updating\n        if (this.pending.length >= this._delta8) {\n            msg = this.pending;\n            // Process pending data in blocks\n            const r = msg.length % this._delta8;\n            this.pending = msg.slice(msg.length - r, msg.length);\n            if (this.pending.length === 0) {\n                this.pending = null;\n            }\n            msg = join32(msg, 0, msg.length - r, this.endian);\n            for (let i = 0; i < msg.length; i += this._delta32) {\n                this._update(msg, i);\n            }\n        }\n        return this;\n    }\n    /**\n     * Finalizes the hash computation and returns the hash value/result.\n     *\n     * @method digest\n     *\n     * @returns Returns the final hash value.\n     *\n     * @example\n     * const hash = sha256.digest();\n     */\n    digest() {\n        this.update(this._pad());\n        assert(this.pending === null);\n        return this._digest();\n    }\n    /**\n     * Finalizes the hash computation and returns the hash value/result as a hex string.\n     *\n     * @method digest\n     *\n     * @returns Returns the final hash value as a hex string.\n     *\n     * @example\n     * const hash = sha256.digestHex();\n     */\n    digestHex() {\n        this.update(this._pad());\n        assert(this.pending === null);\n        return this._digestHex();\n    }\n    /**\n     * [Private Method] Used internally to prepare the padding for the final stage of the hash computation.\n     *\n     * @method _pad\n     * @private\n     *\n     * @returns Returns an array denoting the padding.\n     */\n    _pad() {\n        //\n        let len = this.pendingTotal;\n        const bytes = this._delta8;\n        const k = bytes - ((len + this.padLength) % bytes);\n        const res = new Array(k + this.padLength);\n        res[0] = 0x80;\n        let i;\n        for (i = 1; i < k; i++) {\n            res[i] = 0;\n        }\n        // Append length\n        len <<= 3;\n        let t;\n        if (this.endian === 'big') {\n            for (t = 8; t < this.padLength; t++) {\n                res[i++] = 0;\n            }\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = (len >>> 24) & 0xff;\n            res[i++] = (len >>> 16) & 0xff;\n            res[i++] = (len >>> 8) & 0xff;\n            res[i++] = len & 0xff;\n        }\n        else {\n            res[i++] = len & 0xff;\n            res[i++] = (len >>> 8) & 0xff;\n            res[i++] = (len >>> 16) & 0xff;\n            res[i++] = (len >>> 24) & 0xff;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            for (t = 8; t < this.padLength; t++) {\n                res[i++] = 0;\n            }\n        }\n        return res;\n    }\n}\nfunction isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xfc00) !== 0xd800) {\n        return false;\n    }\n    if (i < 0 || i + 1 >= msg.length) {\n        return false;\n    }\n    return (msg.charCodeAt(i + 1) & 0xfc00) === 0xdc00;\n}\n/**\n *\n * @param msg\n * @param enc Optional. Encoding to use if msg is string. Default is 'utf8'.\n * @returns array of byte values from msg. If msg is an array, a copy is returned.\n */\nexport function toArray(msg, enc) {\n    if (Array.isArray(msg)) {\n        return msg.slice();\n    }\n    if (!msg) {\n        return [];\n    }\n    const res = [];\n    if (typeof msg === 'string') {\n        if (enc !== 'hex') {\n            // Inspired by stringToUtf8ByteArray() in closure-library by Google\n            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt#L117-L143\n            // Apache License 2.0\n            // https://github.com/google/closure-library/blob/master/LICENSE\n            let p = 0;\n            for (let i = 0; i < msg.length; i++) {\n                let c = msg.charCodeAt(i);\n                if (c < 128) {\n                    res[p++] = c;\n                }\n                else if (c < 2048) {\n                    res[p++] = (c >> 6) | 192;\n                    res[p++] = (c & 63) | 128;\n                }\n                else if (isSurrogatePair(msg, i)) {\n                    c = 0x10000 + ((c & 0x03ff) << 10) + (msg.charCodeAt(++i) & 0x03ff);\n                    res[p++] = (c >> 18) | 240;\n                    res[p++] = ((c >> 12) & 63) | 128;\n                    res[p++] = ((c >> 6) & 63) | 128;\n                    res[p++] = (c & 63) | 128;\n                }\n                else {\n                    res[p++] = (c >> 12) | 224;\n                    res[p++] = ((c >> 6) & 63) | 128;\n                    res[p++] = (c & 63) | 128;\n                }\n            }\n        }\n        else {\n            msg = msg.replace(/[^a-z0-9]+/gi, '');\n            if (msg.length % 2 !== 0) {\n                msg = '0' + msg;\n            }\n            for (let i = 0; i < msg.length; i += 2) {\n                res.push(parseInt(msg[i] + msg[i + 1], 16));\n            }\n        }\n    }\n    else {\n        msg = msg;\n        for (let i = 0; i < msg.length; i++) {\n            res[i] = msg[i] | 0;\n        }\n    }\n    return res;\n}\nfunction htonl(w) {\n    const res = (w >>> 24) |\n        ((w >>> 8) & 0xff00) |\n        ((w << 8) & 0xff0000) |\n        ((w & 0xff) << 24);\n    return res >>> 0;\n}\nfunction toHex32(msg, endian) {\n    let res = '';\n    for (let i = 0; i < msg.length; i++) {\n        let w = msg[i];\n        if (endian === 'little') {\n            w = htonl(w);\n        }\n        res += zero8(w.toString(16));\n    }\n    return res;\n}\nfunction zero8(word) {\n    if (word.length === 7) {\n        return '0' + word;\n    }\n    else if (word.length === 6) {\n        return '00' + word;\n    }\n    else if (word.length === 5) {\n        return '000' + word;\n    }\n    else if (word.length === 4) {\n        return '0000' + word;\n    }\n    else if (word.length === 3) {\n        return '00000' + word;\n    }\n    else if (word.length === 2) {\n        return '000000' + word;\n    }\n    else if (word.length === 1) {\n        return '0000000' + word;\n    }\n    else {\n        return word;\n    }\n}\nfunction bytesToHex(data) {\n    let res = '';\n    for (const b of data)\n        res += b.toString(16).padStart(2, '0');\n    return res;\n}\nfunction join32(msg, start, end, endian) {\n    const len = end - start;\n    assert(len % 4 === 0);\n    const res = new Array(len / 4);\n    for (let i = 0, k = start; i < res.length; i++, k += 4) {\n        let w;\n        if (endian === 'big') {\n            w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n        }\n        else {\n            w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n        }\n        res[i] = w >>> 0;\n    }\n    return res;\n}\nfunction split32(msg, endian) {\n    const res = new Array(msg.length * 4);\n    for (let i = 0, k = 0; i < msg.length; i++, k += 4) {\n        const m = msg[i];\n        if (endian === 'big') {\n            res[k] = m >>> 24;\n            res[k + 1] = (m >>> 16) & 0xff;\n            res[k + 2] = (m >>> 8) & 0xff;\n            res[k + 3] = m & 0xff;\n        }\n        else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = (m >>> 16) & 0xff;\n            res[k + 1] = (m >>> 8) & 0xff;\n            res[k] = m & 0xff;\n        }\n    }\n    return res;\n}\nfunction rotr32(w, b) {\n    return (w >>> b) | (w << (32 - b));\n}\nfunction rotl32(w, b) {\n    return (w << b) | (w >>> (32 - b));\n}\nfunction sum32(a, b) {\n    return (a + b) >>> 0;\n}\nfunction SUM32_3(a, b, c) {\n    return (a + b + c) >>> 0;\n}\nfunction SUM32_4(a, b, c, d) {\n    return (a + b + c + d) >>> 0;\n}\nfunction SUM32_5(a, b, c, d, e) {\n    return (a + b + c + d + e) >>> 0;\n}\nfunction FT_1(s, x, y, z) {\n    if (s === 0) {\n        return ch32(x, y, z);\n    }\n    if (s === 1 || s === 3) {\n        return p32(x, y, z);\n    }\n    if (s === 2) {\n        return maj32(x, y, z);\n    }\n    return 0;\n}\nfunction ch32(x, y, z) {\n    return (x & y) ^ (~x & z);\n}\nfunction maj32(x, y, z) {\n    return (x & y) ^ (x & z) ^ (y & z);\n}\nfunction p32(x, y, z) {\n    return x ^ y ^ z;\n}\nfunction S0_256(x) {\n    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nfunction S1_256(x) {\n    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nfunction G0_256(x) {\n    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nfunction G1_256(x) {\n    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nconst r = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15,\n    3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11,\n    5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7,\n    12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\nconst rh = [\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5,\n    10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0,\n    4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1,\n    5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\nconst s = [\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7,\n    15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5,\n    12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n    11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\nconst sh = [\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8,\n    9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14,\n    13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5,\n    12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\nfunction f(j, x, y, z) {\n    if (j <= 15) {\n        return x ^ y ^ z;\n    }\n    else if (j <= 31) {\n        return (x & y) | (~x & z);\n    }\n    else if (j <= 47) {\n        return (x | ~y) ^ z;\n    }\n    else if (j <= 63) {\n        return (x & z) | (y & ~z);\n    }\n    else {\n        return x ^ (y | ~z);\n    }\n}\nfunction K(j) {\n    if (j <= 15) {\n        return 0x00000000;\n    }\n    else if (j <= 31) {\n        return 0x5a827999;\n    }\n    else if (j <= 47) {\n        return 0x6ed9eba1;\n    }\n    else if (j <= 63) {\n        return 0x8f1bbcdc;\n    }\n    else {\n        return 0xa953fd4e;\n    }\n}\nfunction Kh(j) {\n    if (j <= 15) {\n        return 0x50a28be6;\n    }\n    else if (j <= 31) {\n        return 0x5c4dd124;\n    }\n    else if (j <= 47) {\n        return 0x6d703ef3;\n    }\n    else if (j <= 63) {\n        return 0x7a6d76e9;\n    }\n    else {\n        return 0x00000000;\n    }\n}\n/**\n * An implementation of RIPEMD160 cryptographic hash function. Extends the BaseHash class.\n * It provides a way to compute a 'digest' for any kind of input data; transforming the data\n * into a unique output of fixed size. The output is deterministic; it will always be\n * the same for the same input.\n *\n * @class RIPEMD160\n * @param None\n *\n * @constructor\n * Use the RIPEMD160 constructor to create an instance of RIPEMD160 hash function.\n *\n * @example\n * const ripemd160 = new RIPEMD160();\n *\n * @property h - Array that is updated iteratively as part of hashing computation.\n */\nexport class RIPEMD160 extends BaseHash {\n    h;\n    constructor() {\n        super(512, 160, 192, 64);\n        this.endian = 'little';\n        this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n        this.endian = 'little';\n    }\n    _update(msg, start) {\n        let A = this.h[0];\n        let B = this.h[1];\n        let C = this.h[2];\n        let D = this.h[3];\n        let E = this.h[4];\n        let Ah = A;\n        let Bh = B;\n        let Ch = C;\n        let Dh = D;\n        let Eh = E;\n        let T;\n        for (let j = 0; j < 80; j++) {\n            T = sum32(rotl32(SUM32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n            A = E;\n            E = D;\n            D = rotl32(C, 10);\n            C = B;\n            B = T;\n            T = sum32(rotl32(SUM32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n            Ah = Eh;\n            Eh = Dh;\n            Dh = rotl32(Ch, 10);\n            Ch = Bh;\n            Bh = T;\n        }\n        T = SUM32_3(this.h[1], C, Dh);\n        this.h[1] = SUM32_3(this.h[2], D, Eh);\n        this.h[2] = SUM32_3(this.h[3], E, Ah);\n        this.h[3] = SUM32_3(this.h[4], A, Bh);\n        this.h[4] = SUM32_3(this.h[0], B, Ch);\n        this.h[0] = T;\n    }\n    _digest() {\n        return split32(this.h, 'little');\n    }\n    _digestHex() {\n        return toHex32(this.h, 'little');\n    }\n}\n/**\n * An implementation of SHA256 cryptographic hash function. Extends the BaseHash class.\n * It provides a way to compute a 'digest' for any kind of input data; transforming the data\n * into a unique output of fixed size. The output is deterministic; it will always be\n * the same for the same input.\n *\n * @class SHA256\n * @param None\n *\n * @constructor\n * Use the SHA256 constructor to create an instance of SHA256 hash function.\n *\n * @example\n * const sha256 = new SHA256();\n *\n * @property h - The initial hash constants\n * @property W - Provides a way to recycle usage of the array memory.\n * @property k - The round constants used for each round of SHA-256\n */\nexport class SHA256 {\n    h;\n    constructor() {\n        this.h = new FastSHA256();\n    }\n    update(msg, enc) {\n        const data = Uint8Array.from(toArray(msg, enc));\n        this.h.update(data);\n        return this;\n    }\n    digest() {\n        return Array.from(this.h.digest());\n    }\n    digestHex() {\n        return bytesToHex(this.h.digest());\n    }\n}\n/**\n * An implementation of SHA1 cryptographic hash function. Extends the BaseHash class.\n * It provides a way to compute a 'digest' for any kind of input data; transforming the data\n * into a unique output of fixed size. The output is deterministic; it will always be\n * the same for the same input.\n *\n * @class SHA1\n * @param None\n *\n * @constructor\n * Use the SHA1 constructor to create an instance of SHA1 hash function.\n *\n * @example\n * const sha1 = new SHA1();\n *\n * @property h - The initial hash constants.\n * @property W - Provides a way to recycle usage of the array memory.\n * @property k - The round constants used for each round of SHA-1.\n */\nexport class SHA1 extends BaseHash {\n    h;\n    W;\n    k;\n    constructor() {\n        super(512, 160, 80, 64);\n        this.k = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n        this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n        this.W = new Array(80);\n    }\n    _update(msg, start) {\n        const W = this.W;\n        // Default start to 0\n        if (start === undefined) {\n            start = 0;\n        }\n        let i;\n        for (i = 0; i < 16; i++) {\n            W[i] = msg[start + i];\n        }\n        for (; i < W.length; i++) {\n            W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n        }\n        let a = this.h[0];\n        let b = this.h[1];\n        let c = this.h[2];\n        let d = this.h[3];\n        let e = this.h[4];\n        for (i = 0; i < W.length; i++) {\n            const s = ~~(i / 20);\n            const t = SUM32_5(rotl32(a, 5), FT_1(s, b, c, d), e, W[i], this.k[s]);\n            e = d;\n            d = c;\n            c = rotl32(b, 30);\n            b = a;\n            a = t;\n        }\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n    }\n    _digest() {\n        return split32(this.h, 'big');\n    }\n    _digestHex() {\n        return toHex32(this.h, 'big');\n    }\n}\n/**\n * An implementation of SHA512 cryptographic hash function. Extends the BaseHash class.\n * It provides a way to compute a 'digest' for any kind of input data; transforming the data\n * into a unique output of fixed size. The output is deterministic; it will always be\n * the same for the same input.\n *\n * @class SHA512\n * @param None\n *\n * @constructor\n * Use the SHA512 constructor to create an instance of SHA512 hash function.\n *\n * @example\n * const sha512 = new SHA512();\n *\n * @property h - The initial hash constants.\n * @property W - Provides a way to recycle usage of the array memory.\n * @property k - The round constants used for each round of SHA-512.\n */\nexport class SHA512 {\n    h;\n    constructor() {\n        this.h = new FastSHA512();\n    }\n    update(msg, enc) {\n        const data = Uint8Array.from(toArray(msg, enc));\n        this.h.update(data);\n        return this;\n    }\n    digest() {\n        return Array.from(this.h.digest());\n    }\n    digestHex() {\n        return bytesToHex(this.h.digest());\n    }\n}\n/**\n * The `SHA256HMAC` class is used to create Hash-based Message Authentication Code (HMAC) using the SHA-256 cryptographic hash function.\n *\n * HMAC is a specific type of MAC involving a cryptographic hash function and a secret cryptographic key. It may be used to simultaneously verify both the data integrity and the authenticity of a message.\n *\n * This class also uses the SHA-256 cryptographic hash algorithm that produces a 256-bit (32-byte) hash value.\n *\n * @property inner - Represents the inner hash of SHA-256.\n * @property outer - Represents the outer hash of SHA-256.\n * @property blockSize - The block size for the SHA-256 hash function, in bytes. It's set to 64 bytes.\n * @property outSize - The output size of the SHA-256 hash function, in bytes. It's set to 32 bytes.\n */\nexport class SHA256HMAC {\n    h;\n    blockSize = 64;\n    outSize = 32;\n    /**\n     * The constructor for the `SHA256HMAC` class.\n     *\n     * It initializes the `SHA256HMAC` object and sets up the inner and outer padded keys.\n     * If the key size is larger than the blockSize, it is digested using SHA-256.\n     * If the key size is less than the blockSize, it is padded with zeroes.\n     *\n     * @constructor\n     * @param key - The key to use to create the HMAC. Can be a number array or a string in hexadecimal format.\n     *\n     * @example\n     * const myHMAC = new SHA256HMAC('deadbeef');\n     */\n    constructor(key) {\n        const k = Uint8Array.from(toArray(key, 'hex'));\n        this.h = new HMAC(sha256Fast, k);\n    }\n    /**\n     * Updates the `SHA256HMAC` object with part of the message to be hashed.\n     *\n     * @method update\n     * @param msg - Part of the message to hash. Can be a number array or a string.\n     * @param enc - If 'hex', then the input is encoded as hexadecimal. If undefined or not 'hex', then no encoding is performed.\n     * @returns Returns the instance of `SHA256HMAC` for chaining calls.\n     *\n     * @example\n     * myHMAC.update('deadbeef', 'hex');\n     */\n    update(msg, enc) {\n        this.h.update(Uint8Array.from(toArray(msg, enc)));\n        return this;\n    }\n    /**\n     * Finalizes the HMAC computation and returns the resultant hash.\n     *\n     * @method digest\n     * @returns Returns the digest of the hashed data. Can be a number array or a string.\n     *\n     * @example\n     * let hashedMessage = myHMAC.digest();\n     */\n    digest() {\n        return Array.from(this.h.digest());\n    }\n    /**\n     * Finalizes the HMAC computation and returns the resultant hash as a hex string.\n     *\n     * @method digest\n     * @returns Returns the digest of the hashed data as a hex string\n     *\n     * @example\n     * let hashedMessage = myHMAC.digestHex();\n     */\n    digestHex() {\n        return bytesToHex(this.h.digest());\n    }\n}\nexport class SHA1HMAC {\n    inner;\n    outer;\n    blockSize = 64;\n    constructor(key) {\n        key = toArray(key, 'hex');\n        // Shorten key, if needed\n        if (key.length > this.blockSize) {\n            key = new SHA1().update(key).digest();\n        }\n        // Keys shorter than block size are padded with zeros on the right\n        let i;\n        for (i = key.length; i < this.blockSize; i++) {\n            key.push(0);\n        }\n        for (i = 0; i < key.length; i++) {\n            key[i] ^= 0x36;\n        }\n        this.inner = new SHA1().update(key);\n        // 0x36 ^ 0x5c = 0x6a\n        for (i = 0; i < key.length; i++) {\n            key[i] ^= 0x6a;\n        }\n        this.outer = new SHA1().update(key);\n    }\n    update(msg, enc) {\n        this.inner.update(msg, enc);\n        return this;\n    }\n    digest() {\n        this.outer.update(this.inner.digest());\n        return this.outer.digest();\n    }\n    digestHex() {\n        this.outer.update(this.inner.digest());\n        return this.outer.digestHex();\n    }\n}\n/**\n * The `SHA512HMAC` class is used to create Hash-based Message Authentication Code (HMAC) using the SHA-512 cryptographic hash function.\n *\n * HMAC is a specific type of MAC involving a cryptographic hash function and a secret cryptographic key. It may be used to simultaneously verify both the data integrity and the authenticity of a message.\n *\n * This class also uses the SHA-512 cryptographic hash algorithm that produces a 512-bit (64-byte) hash value.\n *\n * @property inner - Represents the inner hash of SHA-512.\n * @property outer - Represents the outer hash of SHA-512.\n * @property blockSize - The block size for the SHA-512 hash function, in bytes. It's set to 128 bytes.\n * @property outSize - The output size of the SHA-512 hash function, in bytes. It's set to 64 bytes.\n */\nexport class SHA512HMAC {\n    h;\n    blockSize = 128;\n    outSize = 32;\n    /**\n     * The constructor for the `SHA512HMAC` class.\n     *\n     * It initializes the `SHA512HMAC` object and sets up the inner and outer padded keys.\n     * If the key size is larger than the blockSize, it is digested using SHA-512.\n     * If the key size is less than the blockSize, it is padded with zeroes.\n     *\n     * @constructor\n     * @param key - The key to use to create the HMAC. Can be a number array or a string in hexadecimal format.\n     *\n     * @example\n     * const myHMAC = new SHA512HMAC('deadbeef');\n     */\n    constructor(key) {\n        const k = Uint8Array.from(toArray(key, 'hex'));\n        this.h = new HMAC(sha512Fast, k);\n    }\n    /**\n     * Updates the `SHA512HMAC` object with part of the message to be hashed.\n     *\n     * @method update\n     * @param msg - Part of the message to hash. Can be a number array or a string.\n     * @param enc - If 'hex', then the input is encoded as hexadecimal. If undefined or not 'hex', then no encoding is performed.\n     * @returns Returns the instance of `SHA512HMAC` for chaining calls.\n     *\n     * @example\n     * myHMAC.update('deadbeef', 'hex');\n     */\n    update(msg, enc) {\n        this.h.update(Uint8Array.from(toArray(msg, enc)));\n        return this;\n    }\n    /**\n     * Finalizes the HMAC computation and returns the resultant hash.\n     *\n     * @method digest\n     * @returns Returns the digest of the hashed data as a number array.\n     *\n     * @example\n     * let hashedMessage = myHMAC.digest();\n     */\n    digest() {\n        return Array.from(this.h.digest());\n    }\n    /**\n     * Finalizes the HMAC computation and returns the resultant hash as a hex string.\n     *\n     * @method digest\n     * @returns Returns the digest of the hashed data as a hex string\n     *\n     * @example\n     * let hashedMessage = myHMAC.digestHex();\n     */\n    digestHex() {\n        return bytesToHex(this.h.digest());\n    }\n}\n/**\n * Computes RIPEMD160 hash of a given message.\n * @function ripemd160\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed RIPEMD160 hash of the message.\n *\n * @example\n * const digest = ripemd160('Hello, world!');\n */\nexport const ripemd160 = (msg, enc) => {\n    return new RIPEMD160().update(msg, enc).digest();\n};\n/**\n * Computes SHA1 hash of a given message.\n * @function sha1\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed SHA1 hash of the message.\n *\n * @example\n * const digest = sha1('Hello, world!');\n */\nexport const sha1 = (msg, enc) => {\n    return new SHA1().update(msg, enc).digest();\n};\n/**\n * Computes SHA256 hash of a given message.\n * @function sha256\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed SHA256 hash of the message.\n *\n * @example\n * const digest = sha256('Hello, world!');\n */\nexport const sha256 = (msg, enc) => {\n    return new SHA256().update(msg, enc).digest();\n};\n/**\n * Computes SHA512 hash of a given message.\n * @function sha512\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed SHA512 hash of the message.\n *\n * @example\n * const digest = sha512('Hello, world!');\n */\nexport const sha512 = (msg, enc) => {\n    return new SHA512().update(msg, enc).digest();\n};\n/**\n * Performs a 'double hash' using SHA256. This means the data is hashed twice\n * with SHA256. First, the SHA256 hash of the message is computed, then the\n * SHA256 hash of the resulting hash is computed.\n * @function hash256\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the double hashed SHA256 output.\n *\n * @example\n * const doubleHash = hash256('Hello, world!');\n */\nexport const hash256 = (msg, enc) => {\n    const first = new SHA256().update(msg, enc).digest();\n    return new SHA256().update(first).digest();\n};\n/**\n * Computes SHA256 hash of a given message and then computes a RIPEMD160 hash of the result.\n *\n * @function hash160\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the RIPEMD160 hash of the SHA256 hash of the input message.\n *\n * @example\n * const hash = hash160('Hello, world!');\n */\nexport const hash160 = (msg, enc) => {\n    const first = new SHA256().update(msg, enc).digest();\n    return new RIPEMD160().update(first).digest();\n};\n/**\n * Computes SHA256 HMAC of a given message with a given key.\n * @function sha256hmac\n * @param key - The key used to compute the HMAC\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed HMAC of the message.\n *\n * @example\n * const digest = sha256hmac('deadbeef', 'ffff001d');\n */\nexport const sha256hmac = (key, msg, enc) => {\n    return new SHA256HMAC(key).update(msg, enc).digest();\n};\n/**\n * Computes SHA512 HMAC of a given message with a given key.\n * @function sha512hmac\n * @param key - The key used to compute the HMAC\n * @param msg - The message to compute the hash for.\n * @param enc - The encoding of msg if string. Default is 'utf8'.\n *\n * @returns the computed HMAC of the message.\n *\n * @example\n * const digest = sha512hmac('deadbeef', 'ffff001d');\n */\nexport const sha512hmac = (key, msg, enc) => {\n    return new SHA512HMAC(key).update(msg, enc).digest();\n};\n// BEGIN fast-pbkdf2 helpers\n// Utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) {\n        throw new Error(`positive integer expected, got ${n}`);\n    }\n}\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length)) {\n        const lens = lengths.join(',');\n        throw new Error(`Uint8Array expected of length ${lens}, got length=${b.length}`);\n    }\n}\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function') {\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    }\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed === true)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished === true) {\n        throw new Error('Hash#digest() has already been called');\n    }\n}\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nfunction clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++)\n        arrays[i].fill(0);\n}\nfunction createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str));\n}\nfunction kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\nclass Hash {\n}\nfunction createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\n// u64 helpers\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    const Ah = new Uint32Array(len);\n    const Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        Ah[i] = h;\n        Al[i] = l;\n    }\n    return [Ah, Al];\n}\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// _md helpers\nclass HashMD extends Hash {\n    blockLen;\n    outputLen;\n    padOffset;\n    isLE;\n    buffer;\n    view;\n    finished = false;\n    length = 0;\n    pos = 0;\n    destroyed = false;\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        if (len % 4 !== 0)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to ||= new this.constructor();\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen !== 0)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// sha256 fast constants\nconst SHA256_IV = Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\nconst K256 = Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n    0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n    0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nconst SHA256_W = new Uint32Array(64);\nclass FastSHA256 extends HashMD {\n    A = SHA256_IV[0] | 0;\n    B = SHA256_IV[1] | 0;\n    C = SHA256_IV[2] | 0;\n    D = SHA256_IV[3] | 0;\n    E = SHA256_IV[4] | 0;\n    F = SHA256_IV[5] | 0;\n    G = SHA256_IV[6] | 0;\n    H = SHA256_IV[7] | 0;\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA256_W[i] = view.getUint32(offset);\n        }\n        for (let i = 16; i < 64; i++) {\n            const w15 = SHA256_W[i - 15];\n            const w2 = SHA256_W[i - 2];\n            const s0 = G0_256(w15);\n            const s1 = G1_256(w2);\n            SHA256_W[i] = sum32(sum32(s0, SHA256_W[i - 7]), sum32(s1, SHA256_W[i - 16]));\n        }\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const T1 = SUM32_5(H, S1_256(E), ch32(E, F, G), K256[i], SHA256_W[i]);\n            const T2 = sum32(S0_256(A), maj32(A, B, C));\n            H = G;\n            G = F;\n            F = E;\n            E = sum32(D, T1);\n            D = C;\n            C = B;\n            B = A;\n            A = sum32(T1, T2);\n        }\n        this.A = sum32(this.A, A);\n        this.B = sum32(this.B, B);\n        this.C = sum32(this.C, C);\n        this.D = sum32(this.D, D);\n        this.E = sum32(this.E, E);\n        this.F = sum32(this.F, F);\n        this.G = sum32(this.G, G);\n        this.H = sum32(this.H, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nconst sha256Fast = createHasher(() => new FastSHA256());\n// sha512\nconst SHA512_IV = Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179\n]);\nconst K512 = (() => split([\n    '0x428a2f98d728ae22',\n    '0x7137449123ef65cd',\n    '0xb5c0fbcfec4d3b2f',\n    '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538',\n    '0x59f111f1b605d019',\n    '0x923f82a4af194f9b',\n    '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242',\n    '0x12835b0145706fbe',\n    '0x243185be4ee4b28c',\n    '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f',\n    '0x80deb1fe3b1696b1',\n    '0x9bdc06a725c71235',\n    '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2',\n    '0xefbe4786384f25e3',\n    '0x0fc19dc68b8cd5b5',\n    '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275',\n    '0x4a7484aa6ea6e483',\n    '0x5cb0a9dcbd41fbd4',\n    '0x76f988da831153b5',\n    '0x983e5152ee66dfab',\n    '0xa831c66d2db43210',\n    '0xb00327c898fb213f',\n    '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2',\n    '0xd5a79147930aa725',\n    '0x06ca6351e003826f',\n    '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc',\n    '0x2e1b21385c26c926',\n    '0x4d2c6dfc5ac42aed',\n    '0x53380d139d95b3df',\n    '0x650a73548baf63de',\n    '0x766a0abb3c77b2a8',\n    '0x81c2c92e47edaee6',\n    '0x92722c851482353b',\n    '0xa2bfe8a14cf10364',\n    '0xa81a664bbc423001',\n    '0xc24b8b70d0f89791',\n    '0xc76c51a30654be30',\n    '0xd192e819d6ef5218',\n    '0xd69906245565a910',\n    '0xf40e35855771202a',\n    '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8',\n    '0x1e376c085141ab53',\n    '0x2748774cdf8eeb99',\n    '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63',\n    '0x4ed8aa4ae3418acb',\n    '0x5b9cca4f7763e373',\n    '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc',\n    '0x78a5636f43172f60',\n    '0x84c87814a1f0ab72',\n    '0x8cc702081a6439ec',\n    '0x90befffa23631e28',\n    '0xa4506cebde82bde9',\n    '0xbef9a3f7b2c67915',\n    '0xc67178f2e372532b',\n    '0xca273eceea26619c',\n    '0xd186b8c721c0c207',\n    '0xeada7dd6cde0eb1e',\n    '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba',\n    '0x0a637dc5a2c898a6',\n    '0x113f9804bef90dae',\n    '0x1b710b35131c471b',\n    '0x28db77f523047d84',\n    '0x32caab7b40c72493',\n    '0x3c9ebe0a15c9bebc',\n    '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6',\n    '0x597f299cfc657e2a',\n    '0x5fcb6fab3ad6faec',\n    '0x6c44198c4a475817'\n].map((n) => BigInt(n))))();\nconst SHA512_Kh = (() => K512[0])();\nconst SHA512_Kl = (() => K512[1])();\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass FastSHA512 extends HashMD {\n    Ah = SHA512_IV[0] | 0;\n    Al = SHA512_IV[1] | 0;\n    Bh = SHA512_IV[2] | 0;\n    Bl = SHA512_IV[3] | 0;\n    Ch = SHA512_IV[4] | 0;\n    Cl = SHA512_IV[5] | 0;\n    Dh = SHA512_IV[6] | 0;\n    Dl = SHA512_IV[7] | 0;\n    Eh = SHA512_IV[8] | 0;\n    El = SHA512_IV[9] | 0;\n    Fh = SHA512_IV[10] | 0;\n    Fl = SHA512_IV[11] | 0;\n    Gh = SHA512_IV[12] | 0;\n    Gl = SHA512_IV[13] | 0;\n    Hh = SHA512_IV[14] | 0;\n    Hl = SHA512_IV[15] | 0;\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n    }\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);\n            const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);\n            const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);\n            const SUMl = add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        for (let i = 0; i < 80; i++) {\n            const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);\n            const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);\n            const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const T2l = add3L(sigma0l, MAJl, T1l);\n            Ah = add3H(T2l, sigma0h, MAJh, T1h);\n            Al = T2l | 0;\n        }\n        ;\n        ({ h: Ah, l: Al } = add(Ah, Al, this.Ah, this.Al));\n        ({ h: Bh, l: Bl } = add(Bh, Bl, this.Bh, this.Bl));\n        ({ h: Ch, l: Cl } = add(Ch, Cl, this.Ch, this.Cl));\n        ({ h: Dh, l: Dl } = add(Dh, Dl, this.Dh, this.Dl));\n        ({ h: Eh, l: El } = add(Eh, El, this.Eh, this.El));\n        ({ h: Fh, l: Fl } = add(Fh, Fl, this.Fh, this.Fl));\n        ({ h: Gh, l: Gl } = add(Gh, Gl, this.Gh, this.Gl));\n        ({ h: Hh, l: Hl } = add(Hh, Hl, this.Hh, this.Hl));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nconst sha512Fast = createHasher(() => new FastSHA512());\nclass HMAC extends Hash {\n    oHash;\n    iHash;\n    blockLen;\n    outputLen;\n    finished = false;\n    destroyed = false;\n    constructor(hash, _key) {\n        super();\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function') {\n            throw new Error('Expected instance of class which extends utils.Hash');\n        }\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        this.oHash = hash.create();\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        to ||= Object.create(Object.getPrototypeOf(this), {});\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash ?? undefined);\n        to.iHash = iHash._cloneInto(to.iHash ?? undefined);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nfunction pbkdf2Core(hash, password, salt, opts) {\n    ahash(hash);\n    const { c, dkLen } = Object.assign({ dkLen: 32 }, opts);\n    anumber(c);\n    anumber(dkLen);\n    if (c < 1)\n        throw new Error('iterations (c) should be >= 1');\n    const pwd = kdfInputToBytes(password);\n    const slt = kdfInputToBytes(salt);\n    const DK = new Uint8Array(dkLen);\n    const PRF = hmac.create(hash, pwd);\n    const PRFSalt = PRF._cloneInto().update(slt);\n    let prfW;\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW != null)\n        prfW.destroy();\n    clean(u);\n    return DK;\n}\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\nfunction pbkdf2Fast(password, salt, iterations, keylen) {\n    return pbkdf2Core(sha512Fast, password, salt, { c: iterations, dkLen: keylen });\n}\n// END fast-pbkdf2 helpers\n/**\n * Limited SHA-512-only PBKDF2 function for use in deprecated BIP39 code.\n * @function pbkdf2\n * @param password - The PBKDF2 password\n * @param salt - The PBKDF2 salt\n * @param iterations - The number of of iterations to run\n * @param keylen - The length of the key\n * @param digest - The digest (must be sha512 for this implementation)\n *\n * @returns The computed key\n */\nexport function pbkdf2(password, salt, iterations, keylen, digest = 'sha512') {\n    if (digest !== 'sha512') {\n        throw new Error('Only sha512 is supported in this PBKDF2 implementation');\n    }\n    // Attempt to use the native Node.js implementation if available as it is\n    // considerably faster than the pure TypeScript fallback below. If the crypto\n    // module isn't present (for example in a browser build) we'll silently fall\n    // back to the original implementation.\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const nodeCrypto = require('crypto');\n        if (typeof nodeCrypto.pbkdf2Sync === 'function') {\n            const p = Buffer.from(password);\n            const s = Buffer.from(salt);\n            return [...nodeCrypto.pbkdf2Sync(p, s, iterations, keylen, digest)];\n        }\n    }\n    catch {\n        // ignore\n    }\n    const p = Uint8Array.from(password);\n    const s = Uint8Array.from(salt);\n    const out = pbkdf2Fast(p, s, iterations, keylen);\n    return Array.from(out);\n}\n//# sourceMappingURL=Hash.js.map","import BigNumber from './BigNumber.js';\nimport { hash256 } from './Hash.js';\n/**\n * Prepends a '0' to an odd character length word to ensure it has an even number of characters.\n * @param {string} word - The input word.\n * @returns {string} - The word with a leading '0' if it's an odd character length; otherwise, the original word.\n */\nexport const zero2 = (word) => {\n    if (word.length % 2 === 1) {\n        return '0' + word;\n    }\n    else {\n        return word;\n    }\n};\n/**\n * Converts an array of numbers to a hexadecimal string representation.\n * @param {number[]} msg - The input array of numbers.\n * @returns {string} - The hexadecimal string representation of the input array.\n */\nexport const toHex = (msg) => {\n    let res = '';\n    for (const num of msg) {\n        res += zero2(num.toString(16));\n    }\n    return res;\n};\n/**\n * Converts various message formats into an array of numbers.\n * Supports arrays, hexadecimal strings, base64 strings, and UTF-8 strings.\n *\n * @param {any} msg - The input message (array or string).\n * @param {('hex' | 'utf8' | 'base64')} enc - Specifies the string encoding, if applicable.\n * @returns {any[]} - Array representation of the input.\n */\nexport const toArray = (msg, enc) => {\n    if (Array.isArray(msg))\n        return msg.slice();\n    if (msg === undefined)\n        return [];\n    if (typeof msg !== 'string') {\n        return Array.from(msg, (item) => item | 0);\n    }\n    switch (enc) {\n        case 'hex':\n            return hexToArray(msg);\n        case 'base64':\n            return base64ToArray(msg);\n        default:\n            return utf8ToArray(msg);\n    }\n};\nconst hexToArray = (msg) => {\n    msg = msg.replace(/[^a-z0-9]+/gi, '');\n    if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n    const res = [];\n    for (let i = 0; i < msg.length; i += 2) {\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n    return res;\n};\nconst base64ToArray = (msg) => {\n    const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const result = [];\n    let currentBit = 0;\n    let currentByte = 0;\n    for (const char of msg.replace(/=+$/, '')) {\n        currentBit = (currentBit << 6) | base64Chars.indexOf(char);\n        currentByte += 6;\n        if (currentByte >= 8) {\n            currentByte -= 8;\n            result.push((currentBit >> currentByte) & 0xff);\n            currentBit &= (1 << currentByte) - 1;\n        }\n    }\n    return result;\n};\n/**\n * Encodes a string into an array of bytes representing its UTF-8 encoding.\n * Any lone surrogates are replaced with the Unicode replacement character (U+FFFD).\n *\n * @param str - The string to encode.\n * @returns An array of numbers, each representing a byte in the UTF-8 encoded string.\n */\nfunction utf8ToArray(str) {\n    const result = [];\n    for (let i = 0; i < str.length; i++) {\n        const cp = str.codePointAt(i);\n        if (cp === undefined) {\n            // Should never be out of range.\n            throw new Error(`Index out of range: ${i}`);\n        }\n        let codePoint = cp;\n        if (codePoint > 0xFFFF) {\n            // Valid surrogate pair => skip the next code unit because codePointAt\n            // has already combined them into a single code point.\n            i++;\n        }\n        else {\n            // Check if codePoint is a lone (unpaired) high surrogate or low surrogate.\n            if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n                // Replace with the replacement character (U+FFFD).\n                codePoint = 0xFFFD;\n            }\n        }\n        // Encode according to the UTF-8 standard\n        if (codePoint <= 0x7F) {\n            result.push(codePoint);\n        }\n        else if (codePoint <= 0x7FF) {\n            result.push(0xC0 | (codePoint >> 6), 0x80 | (codePoint & 0x3F));\n        }\n        else if (codePoint <= 0xFFFF) {\n            result.push(0xE0 | (codePoint >> 12), 0x80 | ((codePoint >> 6) & 0x3F), 0x80 | (codePoint & 0x3F));\n        }\n        else {\n            result.push(0xF0 | (codePoint >> 18), 0x80 | ((codePoint >> 12) & 0x3F), 0x80 | ((codePoint >> 6) & 0x3F), 0x80 | (codePoint & 0x3F));\n        }\n    }\n    return result;\n}\n/**\n * Converts an array of numbers to a UTF-8 encoded string.\n * @param {number[]} arr - The input array of numbers.\n * @returns {string} - The UTF-8 encoded string.\n */\nexport const toUTF8 = (arr) => {\n    let result = '';\n    let skip = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const byte = arr[i];\n        // this byte is part of a multi-byte sequence, skip it\n        // added to avoid modifying i within the loop which is considered unsafe.\n        if (skip > 0) {\n            skip--;\n            continue;\n        }\n        // 1-byte sequence (0xxxxxxx)\n        if (byte <= 0x7f) {\n            result += String.fromCharCode(byte);\n        }\n        else if (byte >= 0xc0 && byte <= 0xdf) {\n            // 2-byte sequence (110xxxxx 10xxxxxx)\n            const byte2 = arr[i + 1];\n            skip = 1;\n            const codePoint = ((byte & 0x1f) << 6) | (byte2 & 0x3f);\n            result += String.fromCharCode(codePoint);\n        }\n        else if (byte >= 0xe0 && byte <= 0xef) {\n            // 3-byte sequence (1110xxxx 10xxxxxx 10xxxxxx)\n            const byte2 = arr[i + 1];\n            const byte3 = arr[i + 2];\n            skip = 2;\n            const codePoint = ((byte & 0x0f) << 12) | ((byte2 & 0x3f) << 6) | (byte3 & 0x3f);\n            result += String.fromCharCode(codePoint);\n        }\n        else if (byte >= 0xf0 && byte <= 0xf7) {\n            // 4-byte sequence (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx)\n            const byte2 = arr[i + 1];\n            const byte3 = arr[i + 2];\n            const byte4 = arr[i + 3];\n            skip = 3;\n            const codePoint = ((byte & 0x07) << 18) |\n                ((byte2 & 0x3f) << 12) |\n                ((byte3 & 0x3f) << 6) |\n                (byte4 & 0x3f);\n            // Convert to UTF-16 surrogate pair\n            const surrogate1 = 0xd800 + ((codePoint - 0x10000) >> 10);\n            const surrogate2 = 0xdc00 + ((codePoint - 0x10000) & 0x3ff);\n            result += String.fromCharCode(surrogate1, surrogate2);\n        }\n    }\n    return result;\n};\n/**\n * Encodes an array of numbers into a specified encoding ('hex' or 'utf8'). If no encoding is provided, returns the original array.\n * @param {number[]} arr - The input array of numbers.\n * @param {('hex' | 'utf8')} enc - The desired encoding.\n * @returns {string | number[]} - The encoded message as a string (for 'hex' and 'utf8') or the original array.\n */\nexport const encode = (arr, enc) => {\n    switch (enc) {\n        case 'hex':\n            return toHex(arr);\n        case 'utf8':\n            return toUTF8(arr);\n        // If no encoding is provided, return the original array\n        default:\n            return arr;\n    }\n};\n/**\n * Converts an array of bytes (each between 0 and 255) into a base64 encoded string.\n *\n * @param {number[]} byteArray - An array of numbers where each number is a byte (0-255).\n * @returns {string} The base64 encoded string.\n *\n * @example\n * const bytes = [72, 101, 108, 108, 111]; // Represents the string \"Hello\"\n * console.log(toBase64(bytes)); // Outputs: SGVsbG8=\n */\nexport function toBase64(byteArray) {\n    const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    let result = '';\n    let i;\n    for (i = 0; i < byteArray.length; i += 3) {\n        const byte1 = byteArray[i];\n        const byte2 = i + 1 < byteArray.length ? byteArray[i + 1] : 0;\n        const byte3 = i + 2 < byteArray.length ? byteArray[i + 2] : 0;\n        const encoded1 = byte1 >> 2;\n        const encoded2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n        const encoded3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n        const encoded4 = byte3 & 0x3f;\n        result += base64Chars.charAt(encoded1) + base64Chars.charAt(encoded2);\n        result += i + 1 < byteArray.length ? base64Chars.charAt(encoded3) : '=';\n        result += i + 2 < byteArray.length ? base64Chars.charAt(encoded4) : '=';\n    }\n    return result;\n}\nconst base58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n/**\n * Converts a string from base58 to a binary array\n * @param str - The string representation\n * @returns The binary representation\n */\nexport const fromBase58 = (str) => {\n    if (str === '' || typeof str !== 'string') {\n        throw new Error(`Expected base58 string but got “${str}”`);\n    }\n    const match = str.match(/[IOl0]/gmu);\n    if (match !== null) {\n        throw new Error(`Invalid base58 character “${match.join('')}”`);\n    }\n    const lz = str.match(/^1+/gmu);\n    const psz = (lz !== null) ? lz[0].length : 0;\n    const size = ((str.length - psz) * (Math.log(58) / Math.log(256)) + 1) >>> 0;\n    const uint8 = new Uint8Array([\n        ...new Uint8Array(psz),\n        ...(str.match(/./gmu) ?? [] // ✅ Safe Fix: If null, use []\n        )\n            .map((i) => base58chars.indexOf(i))\n            .reduce((acc, i) => {\n            acc = acc.map((j) => {\n                const x = j * 58 + i;\n                i = x >> 8;\n                return x;\n            });\n            return acc;\n        }, new Uint8Array(size))\n            .reverse()\n            .filter(((lastValue) => (value) => \n        // @ts-expect-error\n        (lastValue = lastValue || value))(false))\n    ]);\n    return [...uint8];\n};\n/**\n * Converts a binary array into a base58 string\n * @param bin - The binary array to convert to base58\n * @returns The base58 string representation\n */\nexport const toBase58 = (bin) => {\n    const base58Map = Array(256).fill(-1);\n    for (let i = 0; i < base58chars.length; ++i) {\n        base58Map[base58chars.charCodeAt(i)] = i;\n    }\n    const result = [];\n    for (const byte of bin) {\n        let carry = byte;\n        for (let j = 0; j < result.length; ++j) {\n            const x = (base58Map[result[j]] << 8) + carry;\n            result[j] = base58chars.charCodeAt(x % 58);\n            carry = (x / 58) | 0;\n        }\n        while (carry !== 0) {\n            result.push(base58chars.charCodeAt(carry % 58));\n            carry = (carry / 58) | 0;\n        }\n    }\n    for (const byte of bin) {\n        if (byte !== 0)\n            break;\n        else\n            result.push('1'.charCodeAt(0));\n    }\n    result.reverse();\n    return String.fromCharCode(...result);\n};\n/**\n * Converts a binary array into a base58check string with a checksum\n * @param bin - The binary array to convert to base58check\n * @returns The base58check string representation\n */\nexport const toBase58Check = (bin, prefix = [0]) => {\n    let hash = hash256([...prefix, ...bin]);\n    hash = [...prefix, ...bin, ...hash.slice(0, 4)];\n    return toBase58(hash);\n};\n/**\n * Converts a base58check string into a binary array after validating the checksum\n * @param str - The base58check string to convert to binary\n * @param enc - If hex, the return values will be hex strings, arrays of numbers otherwise\n * @param prefixLength - The length of the prefix. Optional, defaults to 1.\n * @returns The binary array representation\n */\nexport const fromBase58Check = (str, enc, prefixLength = 1) => {\n    const bin = fromBase58(str);\n    let prefix = bin.slice(0, prefixLength);\n    let data = bin.slice(prefixLength, -4);\n    let hash = [...prefix, ...data];\n    hash = hash256(hash);\n    bin.slice(-4).forEach((check, index) => {\n        if (check !== hash[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    if (enc === 'hex') {\n        prefix = toHex(prefix);\n        data = toHex(data);\n    }\n    return { prefix, data };\n};\nexport class Writer {\n    bufs;\n    length;\n    constructor(bufs) {\n        this.bufs = bufs !== undefined ? bufs : [];\n        this.length = 0;\n        for (const b of this.bufs)\n            this.length += b.length;\n    }\n    getLength() {\n        return this.length;\n    }\n    toArray() {\n        const totalLength = this.length;\n        const ret = new Array(totalLength);\n        let offset = 0;\n        for (const buf of this.bufs) {\n            for (const value of buf) {\n                ret[offset++] = value;\n            }\n        }\n        return ret;\n    }\n    write(buf) {\n        this.bufs.push(buf);\n        this.length += buf.length;\n        return this;\n    }\n    writeReverse(buf) {\n        const buf2 = new Array(buf.length);\n        for (let i = 0; i < buf2.length; i++) {\n            buf2[i] = buf[buf.length - 1 - i];\n        }\n        this.bufs.push(buf2);\n        this.length += buf2.length;\n        return this;\n    }\n    writeUInt8(n) {\n        const buf = new Array(1);\n        buf[0] = n;\n        this.write(buf);\n        return this;\n    }\n    writeInt8(n) {\n        const buf = new Array(1);\n        buf[0] = n & 0xff;\n        this.write(buf);\n        return this;\n    }\n    writeUInt16BE(n) {\n        const buf = [\n            (n >> 8) & 0xff,\n            n & 0xff // low byte is just the last 8 bits\n        ];\n        this.bufs.push(buf);\n        this.length += 2;\n        return this;\n    }\n    writeInt16BE(n) {\n        return this.writeUInt16BE(n & 0xffff); // Mask with 0xFFFF to get the lower 16 bits\n    }\n    writeUInt16LE(n) {\n        const buf = [\n            n & 0xff,\n            (n >> 8) & 0xff // shift right 8 bits to get the high byte\n        ];\n        this.bufs.push(buf);\n        this.length += 2;\n        return this;\n    }\n    writeInt16LE(n) {\n        return this.writeUInt16LE(n & 0xffff); // Mask with 0xFFFF to get the lower 16 bits\n    }\n    writeUInt32BE(n) {\n        const buf = [\n            (n >> 24) & 0xff,\n            (n >> 16) & 0xff,\n            (n >> 8) & 0xff,\n            n & 0xff // lowest byte\n        ];\n        this.bufs.push(buf);\n        this.length += 4;\n        return this;\n    }\n    writeInt32BE(n) {\n        return this.writeUInt32BE(n >>> 0); // Using unsigned right shift to handle negative numbers\n    }\n    writeUInt32LE(n) {\n        const buf = [\n            n & 0xff,\n            (n >> 8) & 0xff,\n            (n >> 16) & 0xff,\n            (n >> 24) & 0xff // highest byte\n        ];\n        this.bufs.push(buf);\n        this.length += 4;\n        return this;\n    }\n    writeInt32LE(n) {\n        return this.writeUInt32LE(n >>> 0); // Using unsigned right shift to handle negative numbers\n    }\n    writeUInt64BEBn(bn) {\n        const buf = bn.toArray('be', 8);\n        this.write(buf);\n        return this;\n    }\n    writeUInt64LEBn(bn) {\n        const buf = bn.toArray('be', 8);\n        this.writeReverse(buf);\n        return this;\n    }\n    writeUInt64LE(n) {\n        const buf = new BigNumber(n).toArray('be', 8);\n        this.writeReverse(buf);\n        return this;\n    }\n    writeVarIntNum(n) {\n        const buf = Writer.varIntNum(n);\n        this.write(buf);\n        return this;\n    }\n    writeVarIntBn(bn) {\n        const buf = Writer.varIntBn(bn);\n        this.write(buf);\n        return this;\n    }\n    static varIntNum(n) {\n        let buf;\n        if (n < 0) {\n            return this.varIntBn(new BigNumber(n));\n        }\n        if (n < 253) {\n            buf = [n]; // 1 byte\n        }\n        else if (n < 0x10000) {\n            // 253 followed by the number in little-endian format\n            buf = [\n                253,\n                n & 0xff,\n                (n >> 8) & 0xff // high byte\n            ];\n        }\n        else if (n < 0x100000000) {\n            // 254 followed by the number in little-endian format\n            buf = [\n                254,\n                n & 0xff,\n                (n >> 8) & 0xff,\n                (n >> 16) & 0xff,\n                (n >> 24) & 0xff\n            ];\n        }\n        else {\n            // 255 followed by the number in little-endian format\n            // Since JavaScript bitwise operations work on 32 bits, we need to handle 64-bit numbers in two parts\n            const low = n & 0xffffffff;\n            const high = Math.floor(n / 0x100000000) & 0xffffffff;\n            buf = [\n                255,\n                low & 0xff,\n                (low >> 8) & 0xff,\n                (low >> 16) & 0xff,\n                (low >> 24) & 0xff,\n                high & 0xff,\n                (high >> 8) & 0xff,\n                (high >> 16) & 0xff,\n                (high >> 24) & 0xff\n            ];\n        }\n        return buf;\n    }\n    static varIntBn(bn) {\n        let buf;\n        if (bn.isNeg()) {\n            bn = bn.add(OverflowUint64); // Adjust for negative numbers\n        }\n        if (bn.ltn(253)) {\n            const n = bn.toNumber();\n            // No need for bitwise operation as the value is within a byte's range\n            buf = [n];\n        }\n        else if (bn.ltn(0x10000)) {\n            const n = bn.toNumber();\n            // Value fits in a uint16\n            buf = [253, n & 0xff, (n >> 8) & 0xff];\n        }\n        else if (bn.lt(new BigNumber(0x100000000))) {\n            const n = bn.toNumber();\n            // Value fits in a uint32\n            buf = [\n                254,\n                n & 0xff,\n                (n >> 8) & 0xff,\n                (n >> 16) & 0xff,\n                (n >> 24) & 0xff\n            ];\n        }\n        else {\n            const bw = new Writer();\n            bw.writeUInt8(255);\n            bw.writeUInt64LEBn(bn);\n            buf = bw.toArray();\n        }\n        return buf;\n    }\n}\nexport class Reader {\n    bin;\n    pos;\n    length;\n    constructor(bin = [], pos = 0) {\n        this.bin = bin;\n        this.pos = pos;\n        this.length = bin.length;\n    }\n    eof() {\n        return this.pos >= this.length;\n    }\n    read(len = this.length) {\n        const start = this.pos;\n        const end = this.pos + len;\n        this.pos = end;\n        return this.bin.slice(start, end);\n    }\n    readReverse(len = this.length) {\n        const buf2 = new Array(len);\n        for (let i = 0; i < len; i++) {\n            buf2[i] = this.bin[this.pos + len - 1 - i];\n        }\n        this.pos += len;\n        return buf2;\n    }\n    readUInt8() {\n        const val = this.bin[this.pos];\n        this.pos += 1;\n        return val;\n    }\n    readInt8() {\n        const val = this.bin[this.pos];\n        this.pos += 1;\n        // If the sign bit is set, convert to negative value\n        return (val & 0x80) !== 0 ? val - 0x100 : val;\n    }\n    readUInt16BE() {\n        const val = (this.bin[this.pos] << 8) | this.bin[this.pos + 1];\n        this.pos += 2;\n        return val;\n    }\n    readInt16BE() {\n        const val = this.readUInt16BE();\n        // If the sign bit is set, convert to negative value\n        return (val & 0x8000) !== 0 ? val - 0x10000 : val;\n    }\n    readUInt16LE() {\n        const val = this.bin[this.pos] | (this.bin[this.pos + 1] << 8);\n        this.pos += 2;\n        return val;\n    }\n    readInt16LE() {\n        const val = this.readUInt16LE();\n        // If the sign bit is set, convert to negative value\n        const x = (val & 0x8000) !== 0 ? val - 0x10000 : val;\n        return x;\n    }\n    readUInt32BE() {\n        const val = this.bin[this.pos] * 0x1000000 + // Shift the first byte by 24 bits\n            ((this.bin[this.pos + 1] << 16) | // Shift the second byte by 16 bits\n                (this.bin[this.pos + 2] << 8) | // Shift the third byte by 8 bits\n                this.bin[this.pos + 3]); // The fourth byte\n        this.pos += 4;\n        return val;\n    }\n    readInt32BE() {\n        const val = this.readUInt32BE();\n        // If the sign bit is set, convert to negative value\n        return (val & 0x80000000) !== 0 ? val - 0x100000000 : val;\n    }\n    readUInt32LE() {\n        const val = (this.bin[this.pos] |\n            (this.bin[this.pos + 1] << 8) |\n            (this.bin[this.pos + 2] << 16) |\n            (this.bin[this.pos + 3] << 24)) >>>\n            0;\n        this.pos += 4;\n        return val;\n    }\n    readInt32LE() {\n        const val = this.readUInt32LE();\n        // Explicitly check if the sign bit is set and then convert to a negative value\n        return (val & 0x80000000) !== 0 ? val - 0x100000000 : val;\n    }\n    readUInt64BEBn() {\n        const bin = this.bin.slice(this.pos, this.pos + 8);\n        const bn = new BigNumber(bin);\n        this.pos = this.pos + 8;\n        return bn;\n    }\n    readUInt64LEBn() {\n        const bin = this.readReverse(8);\n        const bn = new BigNumber(bin);\n        return bn;\n    }\n    readInt64LEBn() {\n        const bin = this.readReverse(8);\n        let bn = new BigNumber(bin);\n        if (bn.gte(OverflowInt64)) {\n            bn = bn.sub(OverflowUint64); // Adjust for negative numbers\n        }\n        return bn;\n    }\n    readVarIntNum(signed = true) {\n        const first = this.readUInt8();\n        let bn;\n        switch (first) {\n            case 0xfd:\n                return this.readUInt16LE();\n            case 0xfe:\n                return this.readUInt32LE();\n            case 0xff:\n                bn = signed ? this.readInt64LEBn() : this.readUInt64LEBn();\n                if (bn.lte(new BigNumber(2).pow(new BigNumber(53)))) {\n                    return bn.toNumber();\n                }\n                else {\n                    throw new Error('number too large to retain precision - use readVarIntBn');\n                }\n            default:\n                return first;\n        }\n    }\n    readVarInt() {\n        const first = this.bin[this.pos];\n        switch (first) {\n            case 0xfd:\n                return this.read(1 + 2);\n            case 0xfe:\n                return this.read(1 + 4);\n            case 0xff:\n                return this.read(1 + 8);\n            default:\n                return this.read(1);\n        }\n    }\n    readVarIntBn() {\n        const first = this.readUInt8();\n        switch (first) {\n            case 0xfd:\n                return new BigNumber(this.readUInt16LE());\n            case 0xfe:\n                return new BigNumber(this.readUInt32LE());\n            case 0xff:\n                return this.readUInt64LEBn();\n            default:\n                return new BigNumber(first);\n        }\n    }\n}\nexport const minimallyEncode = (buf) => {\n    if (buf.length === 0) {\n        return buf;\n    }\n    // If the last byte is not 0x00 or 0x80, we are minimally encoded.\n    const last = buf[buf.length - 1];\n    if ((last & 0x7f) !== 0) {\n        return buf;\n    }\n    // If the script is one byte long, then we have a zero, which encodes as an\n    // empty array.\n    if (buf.length === 1) {\n        return [];\n    }\n    // If the next byte has it sign bit set, then we are minimaly encoded.\n    if ((buf[buf.length - 2] & 0x80) !== 0) {\n        return buf;\n    }\n    // We are not minimally encoded, we need to figure out how much to trim.\n    for (let i = buf.length - 1; i > 0; i--) {\n        // We found a non zero byte, time to encode.\n        if (buf[i - 1] !== 0) {\n            if ((buf[i - 1] & 0x80) !== 0) {\n                // We found a byte with it sign bit set so we need one more\n                // byte.\n                buf[i] = last;\n                return buf.slice(0, i + 1);\n            }\n            else {\n                // the sign bit is clear, we can use it.\n                buf[i - 1] |= last;\n                return buf.slice(0, i);\n            }\n        }\n    }\n    // If we found the whole thing is zeros, then we have a zero.\n    return [];\n};\nconst OverflowInt64 = new BigNumber(2).pow(new BigNumber(63));\nconst OverflowUint64 = new BigNumber(2).pow(new BigNumber(64));\n//# sourceMappingURL=utils.js.map","import BasePoint from './BasePoint.js';\nimport JPoint from './JacobianPoint.js';\nimport BigNumber from './BigNumber.js';\nimport { toArray, toHex } from './utils.js';\n// -----------------------------------------------------------------------------\n// BigInt helpers & constants (secp256k1) – hoisted so we don't recreate them on\n// every Point.mul() call.\n// -----------------------------------------------------------------------------\nexport const BI_ZERO = 0n;\nexport const BI_ONE = 1n;\nexport const BI_TWO = 2n;\nexport const BI_THREE = 3n;\nexport const BI_FOUR = 4n;\nexport const BI_EIGHT = 8n;\nexport const P_BIGINT = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn;\nexport const N_BIGINT = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n;\nexport const MASK_256 = (1n << 256n) - 1n; // 0xffff…ffff (256 sones)\nexport function red(x) {\n    // first fold\n    let hi = x >> 256n;\n    x = (x & MASK_256) + (hi << 32n) + hi * 977n;\n    // second fold  (hi ≤ 2³² + 977 here, so one more pass is enough)\n    hi = x >> 256n;\n    x = (x & MASK_256) + (hi << 32n) + hi * 977n;\n    // final conditional subtraction\n    if (x >= P_BIGINT)\n        x -= P_BIGINT;\n    return x;\n}\nexport const biMod = (a) => red((a % P_BIGINT + P_BIGINT) % P_BIGINT);\nexport const biModSub = (a, b) => (a >= b ? a - b : P_BIGINT - (b - a));\nexport const biModMul = (a, b) => red(a * b);\nexport const biModAdd = (a, b) => red(a + b);\nexport const biModInv = (a) => {\n    let lm = BI_ONE;\n    let hm = BI_ZERO;\n    let low = biMod(a);\n    let high = P_BIGINT;\n    while (low > BI_ONE) {\n        const r = high / low;\n        [lm, hm] = [hm - lm * r, lm];\n        [low, high] = [high - low * r, low];\n    }\n    return biMod(lm);\n};\nexport const biModSqr = (a) => biModMul(a, a);\nexport const biModPow = (base, exp) => {\n    let result = BI_ONE;\n    base = biMod(base);\n    let e = exp;\n    while (e > BI_ZERO) {\n        if ((e & BI_ONE) === BI_ONE)\n            result = biModMul(result, base);\n        base = biModMul(base, base);\n        e >>= BI_ONE;\n    }\n    return result;\n};\nexport const P_PLUS1_DIV4 = (P_BIGINT + 1n) >> 2n;\nexport const biModSqrt = (a) => {\n    const r = biModPow(a, P_PLUS1_DIV4);\n    return biModMul(r, r) === biMod(a) ? r : null;\n};\nconst toBigInt = (x) => {\n    if (BigNumber.isBN(x))\n        return BigInt('0x' + x.toString(16));\n    if (typeof x === 'string')\n        return BigInt('0x' + x);\n    if (Array.isArray(x))\n        return BigInt('0x' + toHex(x));\n    return BigInt(x);\n};\n// Generator point coordinates as bigint constants\nexport const GX_BIGINT = BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798');\nexport const GY_BIGINT = BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8');\n// Cache for precomputed windowed tables keyed by 'window:x:y'\nconst WNAF_TABLE_CACHE = new Map();\nexport const jpDouble = (P) => {\n    const { X: X1, Y: Y1, Z: Z1 } = P;\n    if (Y1 === BI_ZERO)\n        return { X: BI_ZERO, Y: BI_ONE, Z: BI_ZERO };\n    const Y1sq = biModMul(Y1, Y1);\n    const S = biModMul(BI_FOUR, biModMul(X1, Y1sq));\n    const M = biModMul(BI_THREE, biModMul(X1, X1));\n    const X3 = biModSub(biModMul(M, M), biModMul(BI_TWO, S));\n    const Y3 = biModSub(biModMul(M, biModSub(S, X3)), biModMul(BI_EIGHT, biModMul(Y1sq, Y1sq)));\n    const Z3 = biModMul(BI_TWO, biModMul(Y1, Z1));\n    return { X: X3, Y: Y3, Z: Z3 };\n};\nexport const jpAdd = (P, Q) => {\n    if (P.Z === BI_ZERO)\n        return Q;\n    if (Q.Z === BI_ZERO)\n        return P;\n    const Z1Z1 = biModMul(P.Z, P.Z);\n    const Z2Z2 = biModMul(Q.Z, Q.Z);\n    const U1 = biModMul(P.X, Z2Z2);\n    const U2 = biModMul(Q.X, Z1Z1);\n    const S1 = biModMul(P.Y, biModMul(Z2Z2, Q.Z));\n    const S2 = biModMul(Q.Y, biModMul(Z1Z1, P.Z));\n    const H = biModSub(U2, U1);\n    const r = biModSub(S2, S1);\n    if (H === BI_ZERO) {\n        if (r === BI_ZERO)\n            return jpDouble(P);\n        return { X: BI_ZERO, Y: BI_ONE, Z: BI_ZERO }; // Infinity\n    }\n    const HH = biModMul(H, H);\n    const HHH = biModMul(H, HH);\n    const V = biModMul(U1, HH);\n    const X3 = biModSub(biModSub(biModMul(r, r), HHH), biModMul(BI_TWO, V));\n    const Y3 = biModSub(biModMul(r, biModSub(V, X3)), biModMul(S1, HHH));\n    const Z3 = biModMul(H, biModMul(P.Z, Q.Z));\n    return { X: X3, Y: Y3, Z: Z3 };\n};\nexport const jpNeg = (P) => {\n    if (P.Z === BI_ZERO)\n        return P;\n    return { X: P.X, Y: P_BIGINT - P.Y, Z: P.Z };\n};\n// Fast windowed-NAF scalar multiplication (default window = 5) in Jacobian\n// coordinates.  Returns Q = k * P0 as a JacobianPoint.\nexport const scalarMultiplyWNAF = (k, P0, window = 5) => {\n    const key = `${window}:${P0.x.toString(16)}:${P0.y.toString(16)}`;\n    let tbl = WNAF_TABLE_CACHE.get(key);\n    let P;\n    if (tbl === undefined) {\n        // Convert affine to Jacobian and pre-compute odd multiples\n        const tblSize = 1 << (window - 1); // e.g. w=5 → 16 entries\n        tbl = new Array(tblSize);\n        P = { X: P0.x, Y: P0.y, Z: BI_ONE };\n        tbl[0] = P;\n        const twoP = jpDouble(P);\n        for (let i = 1; i < tblSize; i++) {\n            tbl[i] = jpAdd(tbl[i - 1], twoP);\n        }\n        WNAF_TABLE_CACHE.set(key, tbl);\n    }\n    else {\n        P = tbl[0];\n    }\n    // Build wNAF representation of k\n    const wnaf = [];\n    const wBig = 1n << BigInt(window);\n    const wHalf = wBig >> 1n;\n    let kTmp = k;\n    while (kTmp > 0n) {\n        if ((kTmp & BI_ONE) === BI_ZERO) {\n            wnaf.push(0);\n            kTmp >>= BI_ONE;\n        }\n        else {\n            let z = kTmp & (wBig - 1n); // kTmp mod 2^w\n            if (z > wHalf)\n                z -= wBig; // make it odd & within (-2^{w-1}, 2^{w-1})\n            wnaf.push(Number(z));\n            kTmp -= z;\n            kTmp >>= BI_ONE;\n        }\n    }\n    // Accumulate from MSB to LSB\n    let Q = { X: BI_ZERO, Y: BI_ONE, Z: BI_ZERO }; // infinity\n    for (let i = wnaf.length - 1; i >= 0; i--) {\n        Q = jpDouble(Q);\n        const di = wnaf[i];\n        if (di !== 0) {\n            const idx = Math.abs(di) >> 1; // (|di|-1)/2  because di is odd\n            const addend = di > 0 ? tbl[idx] : jpNeg(tbl[idx]);\n            Q = jpAdd(Q, addend);\n        }\n    }\n    return Q;\n};\nexport const modN = (a) => {\n    let r = a % N_BIGINT;\n    if (r < 0n)\n        r += N_BIGINT;\n    return r;\n};\nexport const modMulN = (a, b) => modN(a * b);\n/** modular inverse modulo n with plain extended‑gcd (not constant‑time) */\nexport const modInvN = (a) => {\n    let lm = 1n;\n    let hm = 0n;\n    let low = modN(a);\n    let high = N_BIGINT;\n    while (low > 1n) {\n        const q = high / low;\n        [lm, hm] = [hm - lm * q, lm];\n        [low, high] = [high - low * q, low];\n    }\n    return modN(lm);\n};\n/**\n * `Point` class is a representation of an elliptic curve point with affine coordinates.\n * It extends the functionality of BasePoint and carries x, y coordinates of point on the curve.\n * It also introduces new methods for handling Point operations in elliptic curve.\n *\n * @class Point\n * @extends {BasePoint}\n *\n * @property x - The x-coordinate of the point.\n * @property y - The y-coordinate of the point.\n * @property inf - Flag to record if the point is at infinity in the Elliptic Curve.\n */\nexport default class Point extends BasePoint {\n    x;\n    y;\n    inf;\n    /**\n     * Creates a point object from a given Array. These numbers can represent coordinates in hex format, or points\n     * in multiple established formats.\n     * The function verifies the integrity of the provided data and throws errors if inconsistencies are found.\n     *\n     * @method fromDER\n     * @static\n     * @param bytes - The point representation number array.\n     * @returns Returns a new point representing the given string.\n     * @throws `Error` If the point number[] value has a wrong length.\n     * @throws `Error` If the point format is unknown.\n     *\n     * @example\n     * const derPoint = [ 2, 18, 123, 108, 125, 83, 1, 251, 164, 214, 16, 119, 200, 216, 210, 193, 251, 193, 129, 67, 97, 146, 210, 216, 77, 254, 18, 6, 150, 190, 99, 198, 128 ];\n     * const point = Point.fromDER(derPoint);\n     */\n    static fromDER(bytes) {\n        const len = 32;\n        // uncompressed, hybrid-odd, hybrid-even\n        if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n            bytes.length - 1 === 2 * len) {\n            if (bytes[0] === 0x06) {\n                if (bytes[bytes.length - 1] % 2 !== 0) {\n                    throw new Error('Point string value is wrong length');\n                }\n            }\n            else if (bytes[0] === 0x07) {\n                if (bytes[bytes.length - 1] % 2 !== 1) {\n                    throw new Error('Point string value is wrong length');\n                }\n            }\n            const res = new Point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n            return res;\n        }\n        else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n            bytes.length - 1 === len) {\n            return Point.fromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n        }\n        throw new Error('Unknown point format');\n    }\n    /**\n     * Creates a point object from a given string. This string can represent coordinates in hex format, or points\n     * in multiple established formats.\n     * The function verifies the integrity of the provided data and throws errors if inconsistencies are found.\n     *\n     * @method fromString\n     * @static\n     *\n     * @param str The point representation string.\n     * @returns Returns a new point representing the given string.\n     * @throws `Error` If the point string value has a wrong length.\n     * @throws `Error` If the point format is unknown.\n     *\n     * @example\n     * const pointStr = 'abcdef';\n     * const point = Point.fromString(pointStr);\n     */\n    static fromString(str) {\n        const bytes = toArray(str, 'hex');\n        return Point.fromDER(bytes);\n    }\n    /**\n     * Generates a point from an x coordinate and a boolean indicating whether the corresponding\n     * y coordinate is odd.\n     *\n     * @method fromX\n     * @static\n     * @param x - The x coordinate of the point.\n     * @param odd - Boolean indicating whether the corresponding y coordinate is odd or not.\n     * @returns Returns the new point.\n     * @throws `Error` If the point is invalid.\n     *\n     * @example\n     * const xCoordinate = new BigNumber('10');\n     * const point = Point.fromX(xCoordinate, true);\n     */\n    static fromX(x, odd) {\n        let xBigInt = toBigInt(x);\n        xBigInt = biMod(xBigInt);\n        const y2 = biModAdd(biModMul(biModSqr(xBigInt), xBigInt), 7n);\n        const y = biModSqrt(y2);\n        if (y === null)\n            throw new Error('Invalid point');\n        let yBig = y;\n        if ((yBig & BI_ONE) !== (odd ? BI_ONE : BI_ZERO)) {\n            yBig = biModSub(P_BIGINT, yBig);\n        }\n        const xBN = new BigNumber(xBigInt.toString(16), 16);\n        const yBN = new BigNumber(yBig.toString(16), 16);\n        return new Point(xBN, yBN);\n    }\n    /**\n     * Generates a point from a serialized JSON object. The function accounts for different options in the JSON object,\n     * including precomputed values for optimization of EC operations, and calls another helper function to turn nested\n     * JSON points into proper Point objects.\n     *\n     * @method fromJSON\n     * @static\n     * @param obj - An object or array that holds the data for the point.\n     * @param isRed - A boolean to direct how the Point is constructed from the JSON object.\n     * @returns Returns a new point based on the deserialized JSON object.\n     *\n     * @example\n     * const serializedPoint = '{\"x\":52,\"y\":15}';\n     * const point = Point.fromJSON(serializedPoint, true);\n     */\n    static fromJSON(obj, isRed) {\n        if (typeof obj === 'string') {\n            obj = JSON.parse(obj);\n        }\n        const res = new Point(obj[0], obj[1], isRed);\n        if (typeof obj[2] !== 'object') {\n            return res;\n        }\n        const obj2point = (obj) => {\n            return new Point(obj[0], obj[1], isRed);\n        };\n        const pre = obj[2];\n        res.precomputed = {\n            beta: null,\n            doubles: typeof pre.doubles === 'object' && pre.doubles !== null\n                ? {\n                    step: pre.doubles.step,\n                    points: [res].concat(pre.doubles.points.map(obj2point))\n                }\n                : undefined,\n            naf: typeof pre.naf === 'object' && pre.naf !== null\n                ? {\n                    wnd: pre.naf.wnd,\n                    points: [res].concat(pre.naf.points.map(obj2point))\n                }\n                : undefined\n        };\n        return res;\n    }\n    /**\n     * @constructor\n     * @param x - The x-coordinate of the point. May be a number, a BigNumber, a string (which will be interpreted as hex), a number array, or null. If null, an \"Infinity\" point is constructed.\n     * @param y - The y-coordinate of the point, similar to x.\n     * @param isRed - A boolean indicating if the point is a member of the field of integers modulo the k256 prime. Default is true.\n     *\n     * @example\n     * new Point('abc123', 'def456');\n     * new Point(null, null); // Generates Infinity point.\n     */\n    constructor(x, y, isRed = true) {\n        super('affine');\n        this.precomputed = null;\n        if (x === null && y === null) {\n            this.x = null;\n            this.y = null;\n            this.inf = true;\n        }\n        else {\n            if (!BigNumber.isBN(x)) {\n                x = new BigNumber(x, 16);\n            }\n            this.x = x;\n            if (!BigNumber.isBN(y)) {\n                y = new BigNumber(y, 16);\n            }\n            this.y = y;\n            // Force redgomery representation when loading from JSON\n            if (isRed) {\n                this.x.forceRed(this.curve.red);\n                this.y.forceRed(this.curve.red);\n            }\n            if (this.x.red === null) {\n                this.x = this.x.toRed(this.curve.red);\n            }\n            if (this.y.red === null) {\n                this.y = this.y.toRed(this.curve.red);\n            }\n            this.inf = false;\n        }\n    }\n    /**\n     * Validates if a point belongs to the curve. Follows the short Weierstrass\n     * equation for elliptic curves: y^2 = x^3 + ax + b.\n     *\n     * @method validate\n     * @returns {boolean} true if the point is on the curve, false otherwise.\n     *\n     * @example\n     * const aPoint = new Point(x, y);\n     * const isValid = aPoint.validate();\n     */\n    validate() {\n        return this.curve.validate(this);\n    }\n    /**\n     * Encodes the coordinates of a point into an array or a hexadecimal string.\n     * The details of encoding are determined by the optional compact and enc parameters.\n     *\n     * @method encode\n     * @param compact - If true, an additional prefix byte 0x02 or 0x03 based on the 'y' coordinate being even or odd respectively is used. If false, byte 0x04 is used.\n     * @param enc - Expects the string 'hex' if hexadecimal string encoding is required instead of an array of numbers.\n     * @throws Will throw an error if the specified encoding method is not recognized. Expects 'hex'.\n     * @returns If enc is undefined, a byte array representation of the point will be returned. if enc is 'hex', a hexadecimal string representation of the point will be returned.\n     *\n     * @example\n     * const aPoint = new Point(x, y);\n     * const encodedPointArray = aPoint.encode();\n     * const encodedPointHex = aPoint.encode(true, 'hex');\n     */\n    encode(compact = true, enc) {\n        const len = this.curve.p.byteLength();\n        const x = this.getX().toArray('be', len);\n        let res;\n        if (compact) {\n            res = [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n        }\n        else {\n            res = [0x04].concat(x, this.getY().toArray('be', len));\n        }\n        if (enc !== 'hex') {\n            return res;\n        }\n        else {\n            return toHex(res);\n        }\n    }\n    /**\n     * Converts the point coordinates to a hexadecimal string. A wrapper method\n     * for encode. Byte 0x02 or 0x03 is used as prefix based on the 'y' coordinate being even or odd respectively.\n     *\n     * @method toString\n     * @returns {string} A hexadecimal string representation of the point coordinates.\n     *\n     * @example\n     * const aPoint = new Point(x, y);\n     * const stringPoint = aPoint.toString();\n     */\n    toString() {\n        return this.encode(true, 'hex');\n    }\n    /**\n     * Exports the x and y coordinates of the point, and the precomputed doubles and non-adjacent form (NAF) for optimization. The output is an array.\n     *\n     * @method toJSON\n     * @returns An Array where first two elements are the coordinates of the point and optional third element is an object with doubles and NAF points.\n     *\n     * @example\n     * const aPoint = new Point(x, y);\n     * const jsonPoint = aPoint.toJSON();\n     */\n    toJSON() {\n        if (this.precomputed == null) {\n            return [this.x, this.y];\n        }\n        return [\n            this.x,\n            this.y,\n            typeof this.precomputed === 'object' && this.precomputed !== null\n                ? {\n                    doubles: this.precomputed.doubles != null\n                        ? {\n                            step: this.precomputed.doubles.step,\n                            points: this.precomputed.doubles.points.slice(1)\n                        }\n                        : undefined,\n                    naf: this.precomputed.naf != null\n                        ? {\n                            wnd: this.precomputed.naf.wnd,\n                            points: this.precomputed.naf.points.slice(1)\n                        }\n                        : undefined\n                }\n                : undefined\n        ];\n    }\n    /**\n     * Provides the point coordinates in a human-readable string format for debugging purposes.\n     *\n     * @method inspect\n     * @returns String of the format '<EC Point x: x-coordinate y: y-coordinate>', or '<EC Point Infinity>' if the point is at infinity.\n     *\n     * @example\n     * const aPoint = new Point(x, y);\n     * console.log(aPoint.inspect());\n     */\n    inspect() {\n        if (this.isInfinity()) {\n            return '<EC Point Infinity>';\n        }\n        return ('<EC Point x: ' +\n            (this.x?.fromRed()?.toString(16, 2) ?? 'undefined') +\n            ' y: ' +\n            (this.y?.fromRed()?.toString(16, 2) ?? 'undefined') +\n            '>');\n    }\n    /**\n     * Checks if the point is at infinity.\n     * @method isInfinity\n     * @returns Returns whether or not the point is at infinity.\n     *\n     * @example\n     * const p = new Point(null, null);\n     * console.log(p.isInfinity()); // outputs: true\n     */\n    isInfinity() {\n        return this.inf;\n    }\n    /**\n     * Adds another Point to this Point, returning a new Point.\n     *\n     * @method add\n     * @param p - The Point to add to this one.\n     * @returns A new Point that results from the addition.\n     *\n     * @example\n     * const p1 = new Point(1, 2);\n     * const p2 = new Point(2, 3);\n     * const result = p1.add(p2);\n     */\n    add(p) {\n        // O + P = P\n        if (this.inf) {\n            return p;\n        }\n        // P + O = P\n        if (p.inf) {\n            return this;\n        }\n        // P + P = 2P\n        if (this.eq(p)) {\n            return this.dbl();\n        }\n        // P + (-P) = O\n        if (this.neg().eq(p)) {\n            return new Point(null, null);\n        }\n        // P + Q = O\n        if (this.x?.cmp(p.x ?? new BigNumber(0)) === 0) {\n            return new Point(null, null);\n        }\n        const P1 = {\n            X: BigInt('0x' + this.x.fromRed().toString(16)),\n            Y: BigInt('0x' + this.y.fromRed().toString(16)),\n            Z: BI_ONE\n        };\n        const Q1 = {\n            X: BigInt('0x' + p.x.fromRed().toString(16)),\n            Y: BigInt('0x' + p.y.fromRed().toString(16)),\n            Z: BI_ONE\n        };\n        const R = jpAdd(P1, Q1);\n        if (R.Z === BI_ZERO)\n            return new Point(null, null);\n        const zInv = biModInv(R.Z);\n        const zInv2 = biModMul(zInv, zInv);\n        const xRes = biModMul(R.X, zInv2);\n        const yRes = biModMul(R.Y, biModMul(zInv2, zInv));\n        return new Point(xRes.toString(16), yRes.toString(16));\n    }\n    /**\n     * Doubles the current point.\n     *\n     * @method dbl\n     *\n     * @example\n     * const P = new Point('123', '456');\n     * const result = P.dbl();\n     * */\n    dbl() {\n        if (this.inf)\n            return this;\n        if (this.x === null || this.y === null) {\n            throw new Error('Point coordinates cannot be null');\n        }\n        const X = BigInt('0x' + this.x.fromRed().toString(16));\n        const Y = BigInt('0x' + this.y.fromRed().toString(16));\n        if (Y === BI_ZERO)\n            return new Point(null, null);\n        const R = jpDouble({ X, Y, Z: BI_ONE });\n        const zInv = biModInv(R.Z);\n        const zInv2 = biModMul(zInv, zInv);\n        const xRes = biModMul(R.X, zInv2);\n        const yRes = biModMul(R.Y, biModMul(zInv2, zInv));\n        return new Point(xRes.toString(16), yRes.toString(16));\n    }\n    /**\n     * Returns X coordinate of point\n     *\n     * @example\n     * const P = new Point('123', '456');\n     * const x = P.getX();\n     */\n    getX() {\n        return (this.x ?? new BigNumber(0)).fromRed();\n    }\n    /**\n     * Returns X coordinate of point\n     *\n     * @example\n     * const P = new Point('123', '456');\n     * const x = P.getX();\n     */\n    getY() {\n        return (this.y ?? new BigNumber(0)).fromRed();\n    }\n    /**\n     * Multiplies this Point by a scalar value, returning a new Point.\n     *\n     * @method mul\n     * @param k - The scalar value to multiply this Point by.\n     * @returns  A new Point that results from the multiplication.\n     *\n     * @example\n     * const p = new Point(1, 2);\n     * const result = p.mul(2); // this doubles the Point\n     */\n    mul(k) {\n        if (!BigNumber.isBN(k)) {\n            k = new BigNumber(k, 16);\n        }\n        k = k;\n        if (this.inf) {\n            return this;\n        }\n        let kBig = BigInt('0x' + k.toString(16));\n        const isNeg = kBig < BI_ZERO;\n        if (isNeg)\n            kBig = -kBig;\n        kBig = biMod(kBig);\n        if (kBig === BI_ZERO) {\n            return new Point(null, null);\n        }\n        if (this.x === null || this.y === null) {\n            throw new Error('Point coordinates cannot be null');\n        }\n        let Px;\n        let Py;\n        if (this === this.curve.g) {\n            Px = GX_BIGINT;\n            Py = GY_BIGINT;\n        }\n        else {\n            Px = BigInt('0x' + this.x.fromRed().toString(16));\n            Py = BigInt('0x' + this.y.fromRed().toString(16));\n        }\n        const R = scalarMultiplyWNAF(kBig, { x: Px, y: Py });\n        if (R.Z === BI_ZERO) {\n            return new Point(null, null);\n        }\n        const zInv = biModInv(R.Z);\n        const zInv2 = biModMul(zInv, zInv);\n        const xRes = biModMul(R.X, zInv2);\n        const yRes = biModMul(R.Y, biModMul(zInv2, zInv));\n        const xBN = new BigNumber(xRes.toString(16), 16);\n        const yBN = new BigNumber(yRes.toString(16), 16);\n        const result = new Point(xBN, yBN);\n        if (isNeg) {\n            return result.neg();\n        }\n        return result;\n    }\n    /**\n     * Performs a multiplication and addition operation in a single step.\n     * Multiplies this Point by k1, adds the resulting Point to the result of p2 multiplied by k2.\n     *\n     * @method mulAdd\n     * @param k1 - The scalar value to multiply this Point by.\n     * @param p2 - The other Point to be involved in the operation.\n     * @param k2 - The scalar value to multiply the Point p2 by.\n     * @returns A Point that results from the combined multiplication and addition operations.\n     *\n     * @example\n     * const p1 = new Point(1, 2);\n     * const p2 = new Point(2, 3);\n     * const result = p1.mulAdd(2, p2, 3);\n     */\n    mulAdd(k1, p2, k2) {\n        const points = [this, p2];\n        const coeffs = [k1, k2];\n        return this._endoWnafMulAdd(points, coeffs);\n    }\n    /**\n     * Performs the Jacobian multiplication and addition operation in a single\n     * step. Instead of returning a regular Point, the result is a JacobianPoint.\n     *\n     * @method jmulAdd\n     * @param k1 - The scalar value to multiply this Point by.\n     * @param p2 - The other Point to be involved in the operation\n     * @param k2 - The scalar value to multiply the Point p2 by.\n     * @returns A JacobianPoint that results from the combined multiplication and addition operation.\n     *\n     * @example\n     * const p1 = new Point(1, 2);\n     * const p2 = new Point(2, 3);\n     * const result = p1.jmulAdd(2, p2, 3);\n     */\n    jmulAdd(k1, p2, k2) {\n        const points = [this, p2];\n        const coeffs = [k1, k2];\n        return this._endoWnafMulAdd(points, coeffs, true);\n    }\n    /**\n     * Checks if the Point instance is equal to another given Point.\n     *\n     * @method eq\n     * @param p - The Point to be checked if equal to the current instance.\n     *\n     * @returns Whether the two Point instances are equal. Both the 'x' and 'y' coordinates have to match, and both points have to either be valid or at infinity for equality. If both conditions are true, it returns true, else it returns false.\n     *\n     * @example\n     * const p1 = new Point(5, 20);\n     * const p2 = new Point(5, 20);\n     * const areEqual = p1.eq(p2); // returns true\n     */\n    eq(p) {\n        return (this === p ||\n            (this.inf === p.inf &&\n                (this.inf || ((this.x ?? new BigNumber(0)).cmp(p.x ?? new BigNumber(0)) === 0 && (this.y ?? new BigNumber(0)).cmp(p.y ?? new BigNumber(0)) === 0))));\n    }\n    /**\n     * Negate a point. The negation of a point P is the mirror of P about x-axis.\n     *\n     * @method neg\n     *\n     * @example\n     * const P = new Point('123', '456');\n     * const result = P.neg();\n     */\n    neg(_precompute) {\n        if (this.inf) {\n            return this;\n        }\n        const res = new Point(this.x, (this.y ?? new BigNumber(0)).redNeg());\n        if (_precompute === true && this.precomputed != null) {\n            const pre = this.precomputed;\n            const negate = (p) => p.neg();\n            res.precomputed = {\n                naf: pre.naf != null\n                    ? {\n                        wnd: pre.naf.wnd,\n                        points: pre.naf.points.map(negate)\n                    }\n                    : undefined,\n                doubles: pre.doubles != null\n                    ? {\n                        step: pre.doubles.step,\n                        points: pre.doubles.points.map((p) => p.neg())\n                    }\n                    : undefined,\n                beta: undefined\n            };\n        }\n        return res;\n    }\n    /**\n     * Performs the \"doubling\" operation on the Point a given number of times.\n     * This is used in elliptic curve operations to perform multiplication by 2, multiple times.\n     * If the point is at infinity, it simply returns the point because doubling\n     * a point at infinity is still infinity.\n     *\n     * @method dblp\n     * @param k - The number of times the \"doubling\" operation is to be performed on the Point.\n     * @returns The Point after 'k' \"doubling\" operations have been performed.\n     *\n     * @example\n     * const p = new Point(5, 20);\n     * const doubledPoint = p.dblp(10); // returns the point after \"doubled\" 10 times\n     */\n    dblp(k) {\n        /* eslint-disable @typescript-eslint/no-this-alias */\n        let r = this;\n        for (let i = 0; i < k; i++) {\n            r = r.dbl();\n        }\n        return r;\n    }\n    /**\n     * Converts the point to a Jacobian point. If the point is at infinity, the corresponding Jacobian point\n     * will also be at infinity.\n     *\n     * @method toJ\n     * @returns Returns a new Jacobian point based on the current point.\n     *\n     * @example\n     * const point = new Point(xCoordinate, yCoordinate);\n     * const jacobianPoint = point.toJ();\n     */\n    toJ() {\n        if (this.inf) {\n            return new JPoint(null, null, null);\n        }\n        const res = new JPoint(this.x, this.y, this.curve.one);\n        return res;\n    }\n    _getBeta() {\n        if (typeof this.curve.endo !== 'object') {\n            return;\n        }\n        const pre = this.precomputed;\n        if (typeof pre === 'object' &&\n            pre !== null &&\n            typeof pre.beta === 'object' &&\n            pre.beta !== null) {\n            return pre.beta;\n        }\n        const beta = new Point((this.x ?? new BigNumber(0)).redMul(this.curve.endo.beta), this.y);\n        if (pre != null) {\n            const curve = this.curve;\n            const endoMul = (p) => {\n                if (p.x === null) {\n                    throw new Error('p.x is null');\n                }\n                if (curve.endo === undefined || curve.endo === null) {\n                    throw new Error('curve.endo is undefined');\n                }\n                return new Point(p.x.redMul(curve.endo.beta), p.y);\n            };\n            pre.beta = beta;\n            beta.precomputed = {\n                beta: null,\n                naf: pre.naf != null\n                    ? {\n                        wnd: pre.naf.wnd,\n                        points: pre.naf.points.map(endoMul)\n                    }\n                    : undefined,\n                doubles: pre.doubles != null\n                    ? {\n                        step: pre.doubles.step,\n                        points: pre.doubles.points.map(endoMul)\n                    }\n                    : undefined\n            };\n        }\n        return beta;\n    }\n    _fixedNafMul(k) {\n        if (typeof this.precomputed !== 'object' || this.precomputed === null) {\n            throw new Error('_fixedNafMul requires precomputed values for the point');\n        }\n        const doubles = this._getDoubles();\n        const naf = this.curve.getNAF(k, 1, this.curve._bitLength);\n        let I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n        I /= 3;\n        // Translate into more windowed form\n        const repr = [];\n        for (let j = 0; j < naf.length; j += doubles.step) {\n            let nafW = 0;\n            for (let k = j + doubles.step - 1; k >= j; k--) {\n                nafW = (nafW << 1) + naf[k];\n            }\n            repr.push(nafW);\n        }\n        let a = new JPoint(null, null, null);\n        let b = new JPoint(null, null, null);\n        for (let i = I; i > 0; i--) {\n            for (let j = 0; j < repr.length; j++) {\n                const nafW = repr[j];\n                if (nafW === i) {\n                    b = b.mixedAdd(doubles.points[j]);\n                }\n                else if (nafW === -i) {\n                    b = b.mixedAdd(doubles.points[j].neg());\n                }\n            }\n            a = a.add(b);\n        }\n        return a.toP();\n    }\n    _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n        const wndWidth = this.curve._wnafT1.map(num => num.toNumber()); // Convert BigNumber to number\n        const wnd = this.curve._wnafT2.map(() => []); // Initialize as empty Point[][] array\n        const naf = this.curve._wnafT3.map(() => []); // Initialize as empty number[][] array\n        // Fill all arrays\n        let max = 0;\n        for (let i = 0; i < len; i++) {\n            const p = points[i];\n            const nafPoints = p._getNAFPoints(defW);\n            wndWidth[i] = nafPoints.wnd; // Ensure correct type\n            wnd[i] = nafPoints.points; // Ensure correct type\n        }\n        // Comb small window NAFs\n        for (let i = len - 1; i >= 1; i -= 2) {\n            const a = i - 1;\n            const b = i;\n            if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n                naf[a] = this.curve.getNAF(coeffs[a], wndWidth[a], this.curve._bitLength);\n                naf[b] = this.curve.getNAF(coeffs[b], wndWidth[b], this.curve._bitLength);\n                max = Math.max(naf[a].length, max);\n                max = Math.max(naf[b].length, max);\n                continue;\n            }\n            const comb = [\n                points[a] /* 1 */,\n                null /* 3 */,\n                null /* 5 */,\n                points[b] /* 7 */\n            ];\n            // Try to avoid Projective points, if possible\n            if ((points[a].y ?? new BigNumber(0)).cmp(points[b].y ?? new BigNumber(0)) === 0) {\n                comb[1] = points[a].add(points[b]);\n                comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n            }\n            else if ((points[a].y ?? new BigNumber(0)).cmp((points[b].y ?? new BigNumber(0)).redNeg()) === 0) {\n                comb[1] = points[a].toJ().mixedAdd(points[b]);\n                comb[2] = points[a].add(points[b].neg());\n            }\n            else {\n                comb[1] = points[a].toJ().mixedAdd(points[b]);\n                comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n            }\n            const index = [\n                -3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */,\n                0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */, 3 /* 1 1 */\n            ];\n            const jsf = this.curve.getJSF(coeffs[a], coeffs[b]);\n            max = Math.max(jsf[0].length, max);\n            naf[a] = new Array(max);\n            naf[b] = new Array(max);\n            for (let j = 0; j < max; j++) {\n                const ja = jsf[0][j] | 0;\n                const jb = jsf[1][j] | 0;\n                naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n                naf[b][j] = 0;\n                wnd[a] = comb;\n            }\n        }\n        let acc = new JPoint(null, null, null);\n        const tmp = this.curve._wnafT4;\n        for (let i = max; i >= 0; i--) {\n            let k = 0;\n            while (i >= 0) {\n                let zero = true;\n                for (let j = 0; j < len; j++) {\n                    tmp[j] = new BigNumber(typeof naf[j][i] === 'number' ? naf[j][i] : 0); // Ensure type consistency\n                    if (!tmp[j].isZero()) { // Use BigNumber's built-in comparison\n                        zero = false;\n                    }\n                }\n                if (!zero) {\n                    break;\n                }\n                k++;\n                i--;\n            }\n            if (i >= 0) {\n                k++;\n            }\n            acc = acc.dblp(k);\n            if (i < 0) {\n                break;\n            }\n            const one = new BigNumber(1);\n            const two = new BigNumber(2);\n            for (let j = 0; j < len; j++) {\n                const z = tmp[j];\n                let p;\n                if (z.cmpn(0) === 0) { // Check if z is 0\n                    continue;\n                }\n                else if (!z.isNeg()) { // If z is positive\n                    p = wnd[j][z.sub(one).div(two).toNumber()];\n                }\n                else { // If z is negative\n                    p = wnd[j][z.neg().sub(one).div(two).toNumber()].neg();\n                }\n                if (p.type === 'affine') {\n                    acc = acc.mixedAdd(p);\n                }\n                else {\n                    acc = acc.add(p);\n                }\n            }\n        }\n        // Zeroify references\n        for (let i = 0; i < len; i++) {\n            wnd[i] = [];\n        }\n        if (jacobianResult === true) {\n            return acc;\n        }\n        else {\n            return acc.toP();\n        }\n    }\n    _endoWnafMulAdd(points, coeffs, // Explicitly type coeffs\n    jacobianResult) {\n        const npoints = new Array(points.length * 2);\n        const ncoeffs = new Array(points.length * 2);\n        let i;\n        for (i = 0; i < points.length; i++) {\n            const split = this.curve._endoSplit(coeffs[i]);\n            let p = points[i];\n            let beta = p._getBeta() ?? new Point(null, null);\n            if (split.k1.negative !== 0) {\n                split.k1.ineg();\n                p = p.neg(true);\n            }\n            if (split.k2.negative !== 0) {\n                split.k2.ineg();\n                beta = beta.neg(true);\n            }\n            npoints[i * 2] = p;\n            npoints[i * 2 + 1] = beta;\n            ncoeffs[i * 2] = split.k1;\n            ncoeffs[i * 2 + 1] = split.k2;\n        }\n        const res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n        // Clean-up references to points and coefficients\n        for (let j = 0; j < i * 2; j++) {\n            npoints[j] = null;\n            ncoeffs[j] = null;\n        }\n        return res;\n    }\n    _hasDoubles(k) {\n        if (this.precomputed == null) {\n            return false;\n        }\n        const doubles = this.precomputed.doubles;\n        if (typeof doubles !== 'object') {\n            return false;\n        }\n        return (doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step));\n    }\n    _getDoubles(step, power) {\n        if (typeof this.precomputed === 'object' &&\n            this.precomputed !== null &&\n            typeof this.precomputed.doubles === 'object' &&\n            this.precomputed.doubles !== null) {\n            return this.precomputed.doubles;\n        }\n        const doubles = [this];\n        /* eslint-disable @typescript-eslint/no-this-alias */\n        let acc = this;\n        for (let i = 0; i < (power ?? 0); i += (step ?? 1)) {\n            for (let j = 0; j < (step ?? 1); j++) {\n                acc = acc.dbl();\n            }\n            doubles.push(acc);\n        }\n        return {\n            step: step ?? 1,\n            points: doubles\n        };\n    }\n    _getNAFPoints(wnd) {\n        if (typeof this.precomputed === 'object' &&\n            this.precomputed !== null &&\n            typeof this.precomputed.naf === 'object' &&\n            this.precomputed.naf !== null) {\n            return this.precomputed.naf;\n        }\n        const res = [this];\n        const max = (1 << wnd) - 1;\n        const dbl = max === 1 ? null : this.dbl();\n        for (let i = 1; i < max; i++) {\n            if (dbl !== null) {\n                res[i] = res[i - 1].add(dbl);\n            }\n        }\n        return {\n            wnd,\n            points: res\n        };\n    }\n}\n//# sourceMappingURL=Point.js.map","import BigNumber from './BigNumber.js';\nimport PublicKey from './PublicKey.js';\nimport { verify } from './ECDSA.js';\nimport { sha256 } from './Hash.js';\nimport { toArray, toHex, toBase64 } from './utils.js';\nimport Point from './Point.js';\nimport Curve from './Curve.js';\n/**\n * Represents a digital signature.\n *\n * A digital signature is a mathematical scheme for verifying the authenticity of\n * digital messages or documents. In many scenarios, it is equivalent to a handwritten signature or stamped seal.\n * The signature pair (R, S) corresponds to the raw ECDSA ([Elliptic Curve Digital Signature Algorithm](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)) signature.\n * Signatures are often serialized into a format known as '[DER encoding](https://en.wikipedia.org/wiki/X.690#DER_encoding)' for transmission.\n *\n * @class Signature\n */\nexport default class Signature {\n    /**\n     * @property Represents the \"r\" component of the digital signature\n     */\n    r;\n    /**\n     * @property Represents the \"s\" component of the digital signature\n     */\n    s;\n    /**\n     * Takes an array of numbers or a string and returns a new Signature instance.\n     * This method will throw an error if the DER encoding is invalid.\n     * If a string is provided, it is assumed to represent a hexadecimal sequence.\n     *\n     * @static\n     * @method fromDER\n     * @param data - The sequence to decode from DER encoding.\n     * @param enc - The encoding of the data string.\n     * @returns The decoded data in the form of Signature instance.\n     *\n     * @example\n     * const signature = Signature.fromDER('30440220018c1f5502f8...', 'hex');\n     */\n    static fromDER(data, enc) {\n        const getLength = (buf, p) => {\n            const initial = buf[p.place++];\n            if ((initial & 0x80) === 0) {\n                return initial;\n            }\n            else {\n                throw new Error('Invalid DER entity length');\n            }\n        };\n        class Position {\n            place;\n            constructor() {\n                this.place = 0;\n            }\n        }\n        data = toArray(data, enc);\n        const p = new Position();\n        if (data[p.place++] !== 0x30) {\n            throw new Error('Signature DER must start with 0x30');\n        }\n        const len = getLength(data, p);\n        if (len + p.place !== data.length) {\n            throw new Error('Signature DER invalid');\n        }\n        if (data[p.place++] !== 0x02) {\n            throw new Error('Signature DER invalid');\n        }\n        const rlen = getLength(data, p);\n        let r = data.slice(p.place, rlen + p.place);\n        p.place += rlen;\n        if (data[p.place++] !== 0x02) {\n            throw new Error('Signature DER invalid');\n        }\n        const slen = getLength(data, p);\n        if (data.length !== slen + p.place) {\n            throw new Error('Invalid R-length in signature DER');\n        }\n        let s = data.slice(p.place, slen + p.place);\n        if (r[0] === 0) {\n            if ((r[1] & 0x80) !== 0) {\n                r = r.slice(1);\n            }\n            else {\n                throw new Error('Invalid R-value in signature DER');\n            }\n        }\n        if (s[0] === 0) {\n            if ((s[1] & 0x80) !== 0) {\n                s = s.slice(1);\n            }\n            else {\n                throw new Error('Invalid S-value in signature DER');\n            }\n        }\n        return new Signature(new BigNumber(r), new BigNumber(s));\n    }\n    /**\n     * Takes an array of numbers or a string and returns a new Signature instance.\n     * This method will throw an error if the Compact encoding is invalid.\n     * If a string is provided, it is assumed to represent a hexadecimal sequence.\n     * compactByte value 27-30 means uncompressed public key.\n     * 31-34 means compressed public key.\n     * The range represents the recovery param which can be 0,1,2,3.\n     * We could support recovery functions in future if there's demand.\n     *\n     * @static\n     * @method fromCompact\n     * @param data - The sequence to decode from Compact encoding.\n     * @param enc - The encoding of the data string.\n     * @returns The decoded data in the form of Signature instance.\n     *\n     * @example\n     * const signature = Signature.fromCompact('1b18c1f5502f8...', 'hex');\n     */\n    static fromCompact(data, enc) {\n        data = toArray(data, enc);\n        if (data.length !== 65) {\n            throw new Error('Invalid Compact Signature');\n        }\n        const compactByte = data[0];\n        if (compactByte < 27 || compactByte >= 35) {\n            throw new Error('Invalid Compact Byte');\n        }\n        return new Signature(new BigNumber(data.slice(1, 33)), new BigNumber(data.slice(33, 65)));\n    }\n    /**\n     * Creates an instance of the Signature class.\n     *\n     * @constructor\n     * @param r - The R component of the signature.\n     * @param s - The S component of the signature.\n     *\n     * @example\n     * const r = new BigNumber('208755674028...');\n     * const s = new BigNumber('564745627577...');\n     * const signature = new Signature(r, s);\n     */\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n    }\n    /**\n     * Verifies a digital signature.\n     *\n     * This method will return true if the signature, key, and message hash match.\n     * If the data or key do not match the signature, the function returns false.\n     *\n     * @method verify\n     * @param msg - The message to verify.\n     * @param key - The public key used to sign the original message.\n     * @param enc - The encoding of the msg string.\n     * @returns A boolean representing whether the signature is valid.\n     *\n     * @example\n     * const msg = 'The quick brown fox jumps over the lazy dog';\n     * const publicKey = PublicKey.fromString('04188ca1050...');\n     * const isVerified = signature.verify(msg, publicKey);\n     */\n    verify(msg, key, enc) {\n        const msgHash = new BigNumber(sha256(msg, enc), 16);\n        return verify(msgHash, this, key);\n    }\n    /**\n     * Converts an instance of Signature into DER encoding.\n     * An alias for the toDER method.\n     *\n     * If the encoding parameter is set to 'hex', the function will return a hex string.\n     * If 'base64', it will return a base64 string.\n     * Otherwise, it will return an array of numbers.\n     *\n     * @method toDER\n     * @param enc - The encoding to use for the output.\n     * @returns The current instance in DER encoding.\n     *\n     * @example\n     * const der = signature.toString('base64');\n     */\n    toString(enc) {\n        return this.toDER(enc);\n    }\n    /**\n     * Converts an instance of Signature into DER encoding.\n     *\n     * If the encoding parameter is set to 'hex', the function will return a hex string.\n     * If 'base64', it will return a base64 string.\n     * Otherwise, it will return an array of numbers.\n     *\n     * @method toDER\n     * @param enc - The encoding to use for the output.\n     * @returns The current instance in DER encoding.\n     *\n     * @example\n     * const der = signature.toDER('hex');\n     */\n    toDER(enc) {\n        const constructLength = (arr, len) => {\n            if (len < 0x80) {\n                arr.push(len);\n            }\n            else {\n                throw new Error('len must be < 0x80');\n            }\n        };\n        const rmPadding = (buf) => {\n            let i = 0;\n            const len = buf.length - 1;\n            while (buf[i] === 0 && (buf[i + 1] & 0x80) === 0 && i < len) {\n                i++;\n            }\n            if (i === 0) {\n                return buf;\n            }\n            return buf.slice(i);\n        };\n        let r = this.r.toArray();\n        let s = this.s.toArray();\n        // Pad values\n        if ((r[0] & 0x80) !== 0) {\n            r = [0].concat(r);\n        }\n        // Pad values\n        if ((s[0] & 0x80) !== 0) {\n            s = [0].concat(s);\n        }\n        r = rmPadding(r);\n        s = rmPadding(s);\n        while (s[0] === 0 && (s[1] & 0x80) === 0) {\n            s = s.slice(1);\n        }\n        let arr = [0x02];\n        constructLength(arr, r.length);\n        arr = arr.concat(r);\n        arr.push(0x02);\n        constructLength(arr, s.length);\n        const backHalf = arr.concat(s);\n        let res = [0x30];\n        constructLength(res, backHalf.length);\n        res = res.concat(backHalf);\n        if (enc === 'hex') {\n            return toHex(res);\n        }\n        else if (enc === 'base64') {\n            return toBase64(res);\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Converts an instance of Signature into Compact encoding.\n     *\n     * If the encoding parameter is set to 'hex', the function will return a hex string.\n     * If 'base64', it will return a base64 string.\n     * Otherwise, it will return an array of numbers.\n     *\n     * @method toCompact\n     * @param enc - The encoding to use for the output.\n     * @returns The current instance in DER encoding.\n     *\n     * @example\n     * const compact = signature.toCompact(3, true, 'base64');\n     */\n    toCompact(recovery, compressed, enc) {\n        if (recovery < 0 || recovery > 3)\n            throw new Error('Invalid recovery param');\n        if (typeof compressed !== 'boolean') {\n            throw new Error('Invalid compressed param');\n        }\n        let compactByte = 27 + recovery;\n        if (compressed) {\n            compactByte += 4;\n        }\n        let arr = [compactByte];\n        arr = arr.concat(this.r.toArray('be', 32));\n        arr = arr.concat(this.s.toArray('be', 32));\n        if (enc === 'hex') {\n            return toHex(arr);\n        }\n        else if (enc === 'base64') {\n            return toBase64(arr);\n        }\n        else {\n            return arr;\n        }\n    }\n    /**\n     * Recovers the public key from a signature.\n     * This method will return the public key if it finds a valid public key.\n     * If it does not find a valid public key, it will throw an error.\n     * The recovery factor is a number between 0 and 3.\n     * @method RecoverPublicKey\n     * @param recovery - The recovery factor.\n     * @param e - The message hash.\n     * @returns The public key associated with the signature.\n     *\n     * @example\n     * const publicKey = signature.RecoverPublicKey(0, msgHash);\n     */\n    RecoverPublicKey(recovery, e) {\n        const r = this.r;\n        const s = this.s;\n        // A set LSB signifies that the y-coordinate is odd\n        const isYOdd = (recovery & 1) !== 0;\n        // The more significant bit specifies whether we should use the\n        // first or second candidate key.\n        const isSecondKey = recovery >> 1;\n        const curve = new Curve();\n        const n = curve.n;\n        const G = curve.g;\n        // 1.1 LEt x = r + jn\n        const x = isSecondKey !== 0 ? r.add(n) : r;\n        const R = Point.fromX(x, isYOdd);\n        // 1.4 Check that nR is at infinity\n        const nR = R.mul(n);\n        if (!nR.isInfinity()) {\n            throw new Error('nR is not at infinity');\n        }\n        // Compute -e from e\n        const eNeg = e.neg().umod(n);\n        // 1.6.1 Compute Q = r^-1 (sR - eG)\n        // Q = r^-1 (sR + -eG)\n        const rInv = r.invm(n);\n        // const Q = R.multiplyTwo(s, G, eNeg).mul(rInv)\n        const srInv = rInv.mul(s).umod(n);\n        const eInvrInv = rInv.mul(eNeg).umod(n);\n        const Q = G.mul(eInvrInv).add(R.mul(srInv));\n        const pubKey = new PublicKey(Q);\n        pubKey.validate();\n        return pubKey;\n    }\n    /**\n     * Calculates the recovery factor which will work for a particular public key and message hash.\n     * This method will return the recovery factor if it finds a valid recovery factor.\n     * If it does not find a valid recovery factor, it will throw an error.\n     * The recovery factor is a number between 0 and 3.\n     *\n     * @method CalculateRecoveryFactor\n     * @param msgHash - The message hash.\n     * @returns the recovery factor: number\n     * /\n     * @example\n     * const recovery = signature.CalculateRecoveryFactor(publicKey, msgHash);\n     */\n    CalculateRecoveryFactor(pubkey, msgHash) {\n        for (let recovery = 0; recovery < 4; recovery++) {\n            let Qprime;\n            try {\n                Qprime = this.RecoverPublicKey(recovery, msgHash);\n            }\n            catch {\n                continue;\n            }\n            if (pubkey.eq(Qprime)) {\n                return recovery;\n            }\n        }\n        throw new Error('Unable to find valid recovery factor');\n    }\n}\n//# sourceMappingURL=Signature.js.map","import { SHA256HMAC } from './Hash.js';\nimport { toHex, toArray } from './utils.js';\n/**\n * This class behaves as a HMAC-based deterministic random bit generator (DRBG). It implements a deterministic random number generator using SHA256HMAC HASH function. It takes an initial entropy and nonce when instantiated for seeding purpose.\n * @class DRBG\n *\n * @constructor\n * @param entropy - Initial entropy either in number array or hexadecimal string.\n * @param nonce - Initial nonce either in number array or hexadecimal string.\n *\n * @throws Throws an error message 'Not enough entropy. Minimum is 256 bits' when entropy's length is less than 32.\n *\n * @example\n * const drbg = new DRBG('af12de...', '123ef...');\n */\nexport default class DRBG {\n    K;\n    V;\n    constructor(entropy, nonce) {\n        entropy = toArray(entropy, 'hex');\n        nonce = toArray(nonce, 'hex');\n        if (entropy.length < 32) {\n            throw new Error('Not enough entropy. Minimum is 256 bits');\n        }\n        const seed = entropy.concat(nonce);\n        this.K = new Array(32);\n        this.V = new Array(32);\n        for (let i = 0; i < 32; i++) {\n            this.K[i] = 0x00;\n            this.V[i] = 0x01;\n        }\n        this.update(seed);\n    }\n    /**\n     * Generates HMAC using the K value of the instance. This method is used internally for operations.\n     *\n     * @method hmac\n     * @returns The SHA256HMAC object created with K value.\n     *\n     * @example\n     * const hmac = drbg.hmac();\n     */\n    hmac() {\n        return new SHA256HMAC(this.K);\n    }\n    /**\n     * Updates the `K` and `V` values of the instance based on the seed.\n     * The seed if not provided uses `V` as seed.\n     *\n     * @method update\n     * @param seed - an optional value that used to update `K` and `V`. Default is `undefined`.\n     * @returns Nothing, but updates the internal state `K` and `V` value.\n     *\n     * @example\n     * drbg.update('e13af...');\n     */\n    update(seed) {\n        let kmac = this.hmac().update(this.V).update([0x00]);\n        if (seed !== undefined) {\n            kmac = kmac.update(seed);\n        }\n        this.K = kmac.digest();\n        this.V = this.hmac().update(this.V).digest();\n        if (seed === undefined) {\n            return;\n        }\n        this.K = this.hmac().update(this.V).update([0x01]).update(seed).digest();\n        this.V = this.hmac().update(this.V).digest();\n    }\n    /**\n     * Generates deterministic random hexadecimal string of given length.\n     * In every generation process, it also updates the internal state `K` and `V`.\n     *\n     * @method generate\n     * @param len - The length of required random number.\n     * @returns The required deterministic random hexadecimal string.\n     *\n     * @example\n     * const randomHex = drbg.generate(256);\n     */\n    generate(len) {\n        let temp = [];\n        while (temp.length < len) {\n            this.V = this.hmac().update(this.V).digest();\n            temp = temp.concat(this.V);\n        }\n        const res = temp.slice(0, len);\n        this.update();\n        return toHex(res);\n    }\n}\n//# sourceMappingURL=DRBG.js.map","import BigNumber from './BigNumber.js';\nimport Signature from './Signature.js';\nimport Curve from './Curve.js';\nimport { scalarMultiplyWNAF, biModInv, BI_ZERO, biModMul, GX_BIGINT, GY_BIGINT, jpAdd, N_BIGINT, modInvN, modMulN, modN } from './Point.js';\nimport DRBG from './DRBG.js';\n/**\n * Truncates a BigNumber message to the length of the curve order n, in the context of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n * This method is used as part of ECDSA signing and verification.\n *\n * The method calculates `delta`, which is a difference obtained by subtracting the bit length of the curve order `n` from the byte length of the message in bits.\n * If `delta` is greater than zero, logical shifts msg to the right by `delta`, retaining the sign.\n *\n * Another condition is tested, but only if `truncOnly` is false. This condition compares the value of msg to curve order `n`.\n * If msg is greater or equal to `n`, it is decreased by `n` and returned.\n *\n * @method truncateToN\n * @param msg - The BigNumber message to be truncated.\n * @param truncOnly - An optional boolean parameter that if set to true, the method will only perform truncation of the BigNumber without doing the additional subtraction from the curve order.\n * @returns Returns the truncated BigNumber value, potentially subtracted by the curve order n.\n *\n * @example\n * let msg = new BigNumber('1234567890abcdef', 16);\n * let truncatedMsg = truncateToN(msg);\n */\nfunction truncateToN(msg, truncOnly, curve = new Curve()) {\n    const delta = msg.byteLength() * 8 - curve.n.bitLength();\n    if (delta > 0) {\n        msg.iushrn(delta);\n    }\n    if (truncOnly === null && msg.cmp(curve.n) >= 0) {\n        return msg.sub(curve.n);\n    }\n    else {\n        return msg;\n    }\n}\nconst curve = new Curve();\nconst bytes = curve.n.byteLength();\nconst ns1 = curve.n.subn(1);\nconst halfN = N_BIGINT >> 1n;\n/**\n * Generates a digital signature for a given message.\n *\n * @function sign\n * @param msg - The BigNumber message for which the signature has to be computed.\n * @param key - Private key in BigNumber.\n * @param forceLowS - Optional boolean flag if True forces \"s\" to be the lower of two possible values.\n * @param customK - Optional specification for k value, which can be a function or BigNumber.\n * @returns Returns the elliptic curve digital signature of the message.\n *\n * @example\n * const msg = new BigNumber('2664878')\n * const key = new BigNumber('123456')\n * const signature = sign(msg, key)\n */\nexport const sign = (msg, key, forceLowS = false, customK) => {\n    // —— prepare inputs ────────────────────────────────────────────────────────\n    msg = truncateToN(msg);\n    const msgBig = BigInt('0x' + msg.toString(16));\n    const keyBig = BigInt('0x' + key.toString(16));\n    // DRBG seeding identical to previous implementation\n    const bkey = key.toArray('be', bytes);\n    const nonce = msg.toArray('be', bytes);\n    const drbg = new DRBG(bkey, nonce);\n    for (let iter = 0;; iter++) {\n        // —— k generation & basic validity checks ───────────────────────────────\n        let kBN = typeof customK === 'function'\n            ? customK(iter)\n            : BigNumber.isBN(customK)\n                ? customK\n                : new BigNumber(drbg.generate(bytes), 16);\n        if (kBN == null)\n            throw new Error('k is undefined');\n        kBN = truncateToN(kBN, true);\n        if (kBN.cmpn(1) <= 0 || kBN.cmp(ns1) >= 0) {\n            if (BigNumber.isBN(customK)) {\n                throw new Error('Invalid fixed custom K value (must be >1 and <N‑1)');\n            }\n            continue;\n        }\n        const kBig = BigInt('0x' + kBN.toString(16));\n        // —— R = k·G (Jacobian, window‑NAF) ──────────────────────────────────────\n        const R = scalarMultiplyWNAF(kBig, { x: GX_BIGINT, y: GY_BIGINT });\n        if (R.Z === 0n) { // point at infinity – should never happen for valid k\n            if (BigNumber.isBN(customK)) {\n                throw new Error('Invalid fixed custom K value (k·G at infinity)');\n            }\n            continue;\n        }\n        // affine X coordinate of R\n        const zInv = biModInv(R.Z);\n        const zInv2 = biModMul(zInv, zInv);\n        const xAff = biModMul(R.X, zInv2);\n        const rBig = modN(xAff);\n        if (rBig === 0n) {\n            if (BigNumber.isBN(customK)) {\n                throw new Error('Invalid fixed custom K value (r == 0)');\n            }\n            continue;\n        }\n        // —— s = k⁻¹ · (msg + r·key)  mod n ─────────────────────────────────────\n        const kInv = modInvN(kBig);\n        const rTimesKey = modMulN(rBig, keyBig);\n        const sum = modN(msgBig + rTimesKey);\n        let sBig = modMulN(kInv, sum);\n        if (sBig === 0n) {\n            if (BigNumber.isBN(customK)) {\n                throw new Error('Invalid fixed custom K value (s == 0)');\n            }\n            continue;\n        }\n        // low‑S mitigation (BIP‑62/BIP‑340 style)\n        if (forceLowS && sBig > halfN) {\n            sBig = N_BIGINT - sBig;\n        }\n        // —— convert back to BigNumber & return ─────────────────────────────────\n        const r = new BigNumber(rBig.toString(16), 16);\n        const s = new BigNumber(sBig.toString(16), 16);\n        return new Signature(r, s);\n    }\n};\n/**\n * Verifies a digital signature of a given message.\n *\n * Message and key used during the signature generation process, and the previously computed signature\n * are used to validate the authenticity of the digital signature.\n *\n * @function verify\n * @param msg - The BigNumber message for which the signature has to be verified.\n * @param sig - Signature object consisting of parameters 'r' and 's'.\n * @param key - Public key in Point.\n * @returns Returns true if the signature is valid and false otherwise.\n *\n * @example\n * const msg = new BigNumber('2664878', 16)\n * const key = new Point(new BigNumber(10), new BigNumber(20)\n * const signature = sign(msg, new BigNumber('123456'))\n * const isVerified = verify(msg, sig, key)\n */\nexport const verify = (msg, sig, key) => {\n    // Convert inputs to BigInt\n    const hash = BigInt('0x' + msg.toString(16));\n    if ((key.x == null) || (key.y == null)) {\n        throw new Error('Invalid public key: missing coordinates.');\n    }\n    const publicKey = {\n        x: BigInt('0x' + key.x.toString(16)),\n        y: BigInt('0x' + key.y.toString(16))\n    };\n    const signature = {\n        r: BigInt('0x' + sig.r.toString(16)),\n        s: BigInt('0x' + sig.s.toString(16))\n    };\n    const { r, s } = signature;\n    const z = hash;\n    // Check r and s are in [1, n - 1]\n    if (r <= BI_ZERO || r >= N_BIGINT || s <= BI_ZERO || s >= N_BIGINT) {\n        return false;\n    }\n    // ── compute u₁ = z·s⁻¹ mod n  and  u₂ = r·s⁻¹ mod n ───────────────────────\n    const w = modInvN(s); // s⁻¹ mod n\n    if (w === 0n)\n        return false; // should never happen\n    const u1 = modMulN(z, w);\n    const u2 = modMulN(r, w);\n    // ── R = u₁·G + u₂·Q  (Jacobian, window‑NAF) ──────────────────────────────\n    const RG = scalarMultiplyWNAF(u1, { x: GX_BIGINT, y: GY_BIGINT });\n    const RQ = scalarMultiplyWNAF(u2, publicKey);\n    const R = jpAdd(RG, RQ);\n    if (R.Z === 0n)\n        return false; // point at infinity\n    // ── affine x‑coordinate of R  (mod p) ─────────────────────────────────────\n    const zInv = biModInv(R.Z); // (Z⁻¹ mod p)\n    const zInv2 = biModMul(zInv, zInv); // Z⁻²\n    const xAff = biModMul(R.X, zInv2); // X / Z²  mod p\n    // ── v = xAff mod n  and final check ───────────────────────────────────────\n    const v = modN(xAff);\n    return v === r;\n};\n//# sourceMappingURL=ECDSA.js.map","import Point from './Point.js';\nimport Curve from './Curve.js';\nimport { verify } from './ECDSA.js';\nimport BigNumber from './BigNumber.js';\nimport { sha256, sha256hmac, hash160 } from './Hash.js';\nimport Signature from './Signature.js';\nimport { toArray, toBase58Check, toHex } from './utils.js';\n/**\n * The PublicKey class extends the Point class. It is used in public-key cryptography to derive shared secret, verify message signatures, and encode the public key in the DER format.\n * The class comes with static methods to generate PublicKey instances from private keys or from strings.\n *\n * @extends {Point}\n * @see {@link Point} for more information on Point.\n */\nexport default class PublicKey extends Point {\n    /**\n     * Static factory method to derive a public key from a private key.\n     * It multiplies the generator point 'g' on the elliptic curve by the private key.\n     *\n     * @static\n     * @method fromPrivateKey\n     *\n     * @param key - The private key from which to derive the public key.\n     *\n     * @returns Returns the PublicKey derived from the given PrivateKey.\n     *\n     * @example\n     * const myPrivKey = new PrivateKey(...)\n     * const myPubKey = PublicKey.fromPrivateKey(myPrivKey)\n     */\n    static fromPrivateKey(key) {\n        const c = new Curve();\n        const p = c.g.mul(key);\n        return new PublicKey(p.x, p.y);\n    }\n    /**\n     * Static factory method to create a PublicKey instance from a string.\n     *\n     * @param str - A string representing a public key.\n     *\n     * @returns Returns the PublicKey created from the string.\n     *\n     * @example\n     * const myPubKey = PublicKey.fromString(\"03....\")\n     */\n    static fromString(str) {\n        const p = Point.fromString(str);\n        return new PublicKey(p.x, p.y);\n    }\n    /**\n     * Static factory method to create a PublicKey instance from a number array.\n     *\n     * @param bytes - A number array representing a public key.\n     *\n     * @returns Returns the PublicKey created from the number array.\n     *\n     * @example\n     * const myPubKey = PublicKey.fromString(\"03....\")\n     */\n    static fromDER(bytes) {\n        const p = Point.fromDER(bytes);\n        return new PublicKey(p.x, p.y);\n    }\n    /**\n     * @constructor\n     * @param x - A point or the x-coordinate of the point. May be a number, a BigNumber, a string (which will be interpreted as hex), a number array, or null. If null, an \"Infinity\" point is constructed.\n     * @param y - If x is not a point, the y-coordinate of the point, similar to x.\n     * @param isRed - A boolean indicating if the point is a member of the field of integers modulo the k256 prime. Default is true.\n     *\n     * @example\n     * new PublicKey(point1);\n     * new PublicKey('abc123', 'def456');\n     */\n    constructor(x, y = null, isRed = true) {\n        if (x instanceof Point) {\n            super(x.getX(), x.getY());\n        }\n        else {\n            // Common gotcha: constructing PublicKey with a DER value when you should use .fromString()\n            if (y === null && isRed && typeof x === 'string') {\n                if (x.length === 66 || x.length === 130) {\n                    throw new Error('You are using the \"new PublicKey()\" constructor with a DER hex string. You need to use \"PublicKey.fromString()\" instead.');\n                }\n            }\n            super(x, y, isRed);\n        }\n    }\n    /**\n     * Derive a shared secret from a public key and a private key for use in symmetric encryption.\n     * This method multiplies the public key (an instance of Point) with a private key.\n     *\n     * @param priv - The private key to use in deriving the shared secret.\n     *\n     * @returns Returns the Point representing the shared secret.\n     *\n     * @throws Will throw an error if the public key is not valid for ECDH secret derivation.\n     *\n     * @example\n     * const myPrivKey = new PrivateKey(...)\n     * const sharedSecret = myPubKey.deriveSharedSecret(myPrivKey)\n     */\n    deriveSharedSecret(priv) {\n        if (!this.validate()) {\n            throw new Error('Public key not valid for ECDH secret derivation');\n        }\n        return this.mul(priv);\n    }\n    /**\n     * Verify a signature of a message using this public key.\n     *\n     * @param msg - The message to verify. It can be a string or an array of numbers.\n     * @param sig - The Signature of the message that needs verification.\n     * @param enc - The encoding of the message. It defaults to 'utf8'.\n     *\n     * @returns Returns true if the signature is verified successfully, otherwise false.\n     *\n     * @example\n     * const myMessage = \"Hello, world!\"\n     * const mySignature = new Signature(...)\n     * const isVerified = myPubKey.verify(myMessage, mySignature)\n     */\n    verify(msg, sig, enc) {\n        const msgHash = new BigNumber(sha256(msg, enc), 16);\n        return verify(msgHash, sig, this);\n    }\n    /**\n     * Encode the public key to DER (Distinguished Encoding Rules) format.\n     *\n     * @returns Returns the DER-encoded public key in number array or string.\n     *\n     * @param enc - The encoding of the DER string. undefined = number array, 'hex' = hex string.\n     *\n     * @example\n     * const derPublicKey = myPubKey.toDER()\n     */\n    toDER(enc) {\n        if (enc === 'hex')\n            return this.encode(true, enc);\n        return this.encode(true);\n    }\n    /**\n     * Hash sha256 and ripemd160 of the public key.\n     *\n     * @returns Returns the hash of the public key.\n     *\n     * @example\n     * const publicKeyHash = pubkey.toHash()\n     */\n    toHash(enc) {\n        const pkh = hash160(this.encode(true));\n        if (enc === 'hex') {\n            return toHex(pkh);\n        }\n        return pkh;\n    }\n    /**\n     * Base58Check encodes the hash of the public key with a prefix to indicate locking script type.\n     * Defaults to P2PKH for mainnet, otherwise known as a \"Bitcoin Address\".\n     *\n     * @param prefix defaults to [0x00] for mainnet, set to [0x6f] for testnet or use the strings 'mainnet' or 'testnet'\n     *\n     * @returns Returns the address encoding associated with the hash of the public key.\n     *\n     * @example\n     * const address = pubkey.toAddress()\n     * const address = pubkey.toAddress('mainnet')\n     * const testnetAddress = pubkey.toAddress([0x6f])\n     * const testnetAddress = pubkey.toAddress('testnet')\n     */\n    toAddress(prefix = [0x00]) {\n        if (typeof prefix === 'string') {\n            if (prefix === 'testnet' || prefix === 'test') {\n                prefix = [0x6f];\n            }\n            else if (prefix === 'mainnet' || prefix === 'main') {\n                prefix = [0x00];\n            }\n            else {\n                throw new Error(`Invalid prefix ${prefix}`);\n            }\n        }\n        return toBase58Check(this.toHash(), prefix);\n    }\n    /**\n     * Derives a child key with BRC-42.\n     * @param privateKey The private key of the other party\n     * @param invoiceNumber The invoice number used to derive the child key\n     * @param cacheSharedSecret Optional function to cache shared secrets\n     * @param retrieveCachedSharedSecret Optional function to retrieve shared secrets from the cache\n     * @returns The derived child key.\n     */\n    deriveChild(privateKey, invoiceNumber, cacheSharedSecret, retrieveCachedSharedSecret) {\n        let sharedSecret;\n        if (typeof retrieveCachedSharedSecret === 'function') {\n            const retrieved = retrieveCachedSharedSecret(privateKey, this);\n            if (typeof retrieved !== 'undefined') {\n                sharedSecret = retrieved;\n            }\n            else {\n                sharedSecret = this.deriveSharedSecret(privateKey);\n                if (typeof cacheSharedSecret === 'function') {\n                    cacheSharedSecret(privateKey, this, sharedSecret);\n                }\n            }\n        }\n        else {\n            sharedSecret = this.deriveSharedSecret(privateKey);\n        }\n        const invoiceNumberBin = toArray(invoiceNumber, 'utf8');\n        const hmac = sha256hmac(sharedSecret.encode(true), invoiceNumberBin);\n        const curve = new Curve();\n        const point = curve.g.mul(new BigNumber(hmac));\n        const finalPoint = this.add(point);\n        return new PublicKey(finalPoint.x, finalPoint.y);\n    }\n    /**\n     * Takes an array of numbers or a string and returns a new PublicKey instance.\n     * This method will throw an error if the Compact encoding is invalid.\n     * If a string is provided, it is assumed to represent a hexadecimal sequence.\n     * compactByte value 27-30 means uncompressed public key.\n     * 31-34 means compressed public key.\n     * The range represents the recovery param which can be 0,1,2,3.\n     *\n     * @static\n     * @method fromMsgHashAndCompactSignature\n     * @param msgHash - The message hash which was signed.\n     * @param signature - The signature in compact format.\n     * @param enc - The encoding of the signature string.\n     * @returns A PublicKey instance derived from the message hash and compact signature.\n     * @example\n     * const publicKey = Signature.fromMsgHashAndCompactSignature(msgHash, 'IMOl2mVKfDgsSsHT4uIYBNN4e...', 'base64');\n     */\n    static fromMsgHashAndCompactSignature(msgHash, signature, enc) {\n        const data = toArray(signature, enc);\n        if (data.length !== 65) {\n            throw new Error('Invalid Compact Signature');\n        }\n        const compactByte = data[0];\n        if (compactByte < 27 || compactByte >= 35) {\n            throw new Error('Invalid Compact Byte');\n        }\n        let r = data[0] - 27;\n        // NOTE: We don't use uncompressed pubkeys in this library,\n        // but whether the key is compressed is captured in the recovery param.\n        // Code below is commented out for reference of how you could capture this.\n        // let compressed = false\n        if (r > 3) {\n            // compressed = true\n            r -= 4;\n        }\n        const s = new Signature(new BigNumber(data.slice(1, 33)), new BigNumber(data.slice(33, 65)));\n        return s.RecoverPublicKey(r, msgHash);\n    }\n}\n//# sourceMappingURL=PublicKey.js.map","class Rand {\n    _rand; // ✅ Explicit function type\n    constructor() {\n        const noRand = () => {\n            throw new Error('No secure random number generator is available in this environment.');\n        };\n        this._rand = noRand; // Assign the function\n        if (typeof self === 'object') {\n            /* eslint-disable-next-line */\n            if (self.crypto?.getRandomValues) {\n                this._rand = (n) => {\n                    const arr = new Uint8Array(n);\n                    /* eslint-disable-next-line */\n                    self.crypto.getRandomValues(arr);\n                    return [...arr];\n                };\n            } /* if (typeof window === 'object') */\n            else {\n                this._rand = noRand;\n            }\n        }\n        else {\n            try {\n                /* eslint-disable-next-line */\n                const crypto = require(\"crypto\");\n                if (typeof crypto.randomBytes === 'function') {\n                    this._rand = (n) => [...crypto.randomBytes(n)];\n                }\n            }\n            catch {\n                this._rand = noRand;\n            }\n        }\n    }\n    generate(len) {\n        return this._rand(len);\n    }\n}\nlet ayn = null;\n/**\n * Generates a sequence of pseudo-random bytes with the given length.\n *\n * @param len - The number of bytes to generate\n *\n * @returns The generated bytes\n *\n * @example\n * import Random from '@bsv/sdk/primitives/Random'\n * const bytes = Random(32) // Produces 32 random bytes\n */\nexport default (len) => {\n    if (ayn == null) {\n        ayn = new Rand();\n    }\n    return ayn.generate(len);\n};\n//# sourceMappingURL=Random.js.map","import BigNumber from './BigNumber.js';\nimport Curve from './Curve.js';\nimport Random from './Random.js';\nimport { fromBase58, toBase58 } from './utils.js';\nexport class PointInFiniteField {\n    x;\n    y;\n    constructor(x, y) {\n        const P = new Curve().p; // arithmetic is mod P\n        this.x = x.umod(P);\n        this.y = y.umod(P);\n    }\n    toString() {\n        return toBase58(this.x.toArray()) + '.' + toBase58(this.y.toArray());\n    }\n    static fromString(str) {\n        const [x, y] = str.split('.');\n        return new PointInFiniteField(new BigNumber(fromBase58(x)), new BigNumber(fromBase58(y)));\n    }\n}\n/**\n * Polynomial class\n *\n * This class is used to create a polynomial with a given threshold and a private key.\n * The polynomial is used to create shares of the private key.\n *\n * @param key - The private key to split\n * @param threshold - The number of shares required to recombine the private key\n *\n * @example\n * const key = new PrivateKey()\n * const threshold = 2\n * const polynomial = new Polynomial(key, threshold)\n *\n */\nexport default class Polynomial {\n    points;\n    threshold;\n    constructor(points, threshold) {\n        this.points = points;\n        this.threshold = threshold ?? points.length; // ✅ Handles undefined safely\n    }\n    static fromPrivateKey(key, threshold) {\n        const P = new Curve().p; // arithmetic is mod P\n        // The key is the y-intercept of the polynomial where x=0.\n        const points = [\n            new PointInFiniteField(new BigNumber(0), new BigNumber(key.toArray()))\n        ];\n        // The other values are random\n        for (let i = 1; i < threshold; i++) {\n            const randomX = new BigNumber(Random(32)).umod(P);\n            const randomY = new BigNumber(Random(32)).umod(P);\n            points.push(new PointInFiniteField(randomX, randomY));\n        }\n        return new Polynomial(points);\n    }\n    // Evaluate the polynomial at x by using Lagrange interpolation\n    valueAt(x) {\n        const P = new Curve().p; // arithmetic is mod P\n        let y = new BigNumber(0);\n        for (let i = 0; i < this.threshold; i++) {\n            let term = this.points[i].y;\n            for (let j = 0; j < this.threshold; j++) {\n                if (i !== j) {\n                    const xj = this.points[j].x;\n                    const xi = this.points[i].x;\n                    const numerator = x.sub(xj).umod(P);\n                    const denominator = xi.sub(xj).umod(P);\n                    const denominatorInverse = denominator.invm(P);\n                    const fraction = numerator.mul(denominatorInverse).umod(P);\n                    term = term.mul(fraction).umod(P);\n                }\n            }\n            y = y.add(term).umod(P);\n        }\n        return y;\n    }\n}\n//# sourceMappingURL=Polynomial.js.map","import BigNumber from './BigNumber.js';\nimport PublicKey from './PublicKey.js';\nimport Curve from './Curve.js';\nimport { sign, verify } from './ECDSA.js';\nimport { sha256, sha256hmac, sha512hmac } from './Hash.js';\nimport Random from './Random.js';\nimport { fromBase58Check, toArray, toBase58Check } from './utils.js';\nimport Polynomial, { PointInFiniteField } from './Polynomial.js';\n/**\n * @class KeyShares\n *\n * This class is used to store the shares of a private key.\n *\n * @param shares - An array of shares\n * @param threshold - The number of shares required to recombine the private key\n *\n * @returns KeyShares\n *\n * @example\n * const key = PrivateKey.fromShares(shares)\n *\n */\nexport class KeyShares {\n    points;\n    threshold;\n    integrity;\n    constructor(points, threshold, integrity) {\n        this.points = points;\n        this.threshold = threshold;\n        this.integrity = integrity;\n    }\n    static fromBackupFormat(shares) {\n        let threshold = 0;\n        let integrity = '';\n        const points = shares.map((share, idx) => {\n            const shareParts = share.split('.');\n            if (shareParts.length !== 4) {\n                throw new Error('Invalid share format in share ' +\n                    idx.toString() +\n                    '. Expected format: \"x.y.t.i\" - received ' +\n                    share);\n            }\n            const [x, y, t, i] = shareParts;\n            if (t === undefined)\n                throw new Error('Threshold not found in share ' + idx.toString());\n            if (i === undefined)\n                throw new Error('Integrity not found in share ' + idx.toString());\n            const tInt = parseInt(t);\n            if (idx !== 0 && threshold !== tInt) {\n                throw new Error('Threshold mismatch in share ' + idx.toString());\n            }\n            if (idx !== 0 && integrity !== i) {\n                throw new Error('Integrity mismatch in share ' + idx.toString());\n            }\n            threshold = tInt;\n            integrity = i;\n            return PointInFiniteField.fromString([x, y].join('.'));\n        });\n        return new KeyShares(points, threshold, integrity);\n    }\n    toBackupFormat() {\n        return this.points.map((share) => share.toString() + '.' + this.threshold.toString() + '.' + this.integrity);\n    }\n}\n/**\n * Represents a Private Key, which is a secret that can be used to generate signatures in a cryptographic system.\n *\n * The `PrivateKey` class extends from the `BigNumber` class. It offers methods to create signatures, verify them,\n * create a corresponding public key and derive a shared secret from a public key.\n *\n * @extends {BigNumber}\n * @see {@link BigNumber} for more information on BigNumber.\n */\nexport default class PrivateKey extends BigNumber {\n    /**\n     * Generates a private key randomly.\n     *\n     * @method fromRandom\n     * @static\n     * @returns The newly generated Private Key.\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     */\n    static fromRandom() {\n        return new PrivateKey(Random(32));\n    }\n    /**\n     * Generates a private key from a string.\n     *\n     * @method fromString\n     * @static\n     * @param str - The string to generate the private key from.\n     * @param base - The base of the string.\n     * @returns The generated Private Key.\n     * @throws Will throw an error if the string is not valid.\n     **/\n    static fromString(str, base = 'hex') {\n        return new PrivateKey(super.fromString(str, base).toArray());\n    }\n    /**\n     * Generates a private key from a hexadecimal string.\n     *\n     * @method fromHex\n     * @static\n     * @param {string} str - The hexadecimal string representing the private key. The string must represent a valid private key in big-endian format.\n     * @returns {PrivateKey} The generated Private Key instance.\n     * @throws {Error} If the string is not a valid hexadecimal or represents an invalid private key.\n     **/\n    static fromHex(str) {\n        return new PrivateKey(super.fromHex(str, 'big'));\n    }\n    /**\n     * Generates a private key from a WIF (Wallet Import Format) string.\n     *\n     * @method fromWif\n     * @static\n     * @param wif - The WIF string to generate the private key from.\n     * @param base - The base of the string.\n     * @returns The generated Private Key.\n     * @throws Will throw an error if the string is not a valid WIF.\n     **/\n    static fromWif(wif, prefixLength = 1) {\n        const decoded = fromBase58Check(wif, undefined, prefixLength);\n        if (decoded.data.length !== 33) {\n            throw new Error('Invalid WIF length');\n        }\n        if (decoded.data[32] !== 1) {\n            throw new Error('Invalid WIF padding');\n        }\n        return new PrivateKey(decoded.data.slice(0, 32));\n    }\n    /**\n     * @constructor\n     *\n     * @param number - The number (various types accepted) to construct a BigNumber from. Default is 0.\n     *\n     * @param base - The base of number provided. By default is 10. Ignored if number is BigNumber.\n     *\n     * @param endian - The endianness provided. By default is 'big endian'. Ignored if number is BigNumber.\n     *\n     * @param modN - Optional. Default 'apply. If 'apply', apply modN to input to guarantee a valid PrivateKey. If 'error', if input is out of field throw new Error('Input is out of field'). If 'nocheck', assumes input is in field.\n     *\n     * @example\n     * import PrivateKey from './PrivateKey';\n     * import BigNumber from './BigNumber';\n     * const privKey = new PrivateKey(new BigNumber('123456', 10, 'be'));\n     */\n    constructor(number = 0, base = 10, endian = 'be', modN = 'apply') {\n        if (number instanceof BigNumber) {\n            super();\n            number.copy(this);\n        }\n        else {\n            super(number, base, endian);\n        }\n        if (modN !== 'nocheck') {\n            const check = this.checkInField();\n            if (!check.inField) {\n                if (modN === 'error') {\n                    throw new Error('Input is out of field');\n                }\n                // Force the PrivateKey BigNumber value to lie in the field limited by curve.n\n                BigNumber.move(this, check.modN);\n            }\n        }\n    }\n    /**\n     * A utility function to check that the value of this PrivateKey lies in the field limited by curve.n\n     * @returns { inField, modN } where modN is this PrivateKey's current BigNumber value mod curve.n, and inField is true only if modN equals current BigNumber value.\n     */\n    checkInField() {\n        const curve = new Curve();\n        const modN = this.mod(curve.n);\n        const inField = this.cmp(modN) === 0;\n        return { inField, modN };\n    }\n    /**\n     * @returns true if the PrivateKey's current BigNumber value lies in the field limited by curve.n\n     */\n    isValid() {\n        return this.checkInField().inField;\n    }\n    /**\n     * Signs a message using the private key.\n     *\n     * @method sign\n     * @param msg - The message (array of numbers or string) to be signed.\n     * @param enc - If 'hex' the string will be treated as hex, utf8 otherwise.\n     * @param forceLowS - If true (the default), the signature will be forced to have a low S value.\n     * @param customK — If provided, uses a custom K-value for the signature. Provie a function that returns a BigNumber, or the BigNumber itself.\n     * @returns A digital signature generated from the hash of the message and the private key.\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     * const signature = privateKey.sign('Hello, World!');\n     */\n    sign(msg, enc, forceLowS = true, customK) {\n        const msgHash = new BigNumber(sha256(msg, enc), 16);\n        return sign(msgHash, this, forceLowS, customK);\n    }\n    /**\n     * Verifies a message's signature using the public key associated with this private key.\n     *\n     * @method verify\n     * @param msg - The original message which has been signed.\n     * @param sig - The signature to be verified.\n     * @param enc - The data encoding method.\n     * @returns Whether or not the signature is valid.\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     * const signature = privateKey.sign('Hello, World!');\n     * const isSignatureValid = privateKey.verify('Hello, World!', signature);\n     */\n    verify(msg, sig, enc) {\n        const msgHash = new BigNumber(sha256(msg, enc), 16);\n        return verify(msgHash, sig, this.toPublicKey());\n    }\n    /**\n     * Converts the private key to its corresponding public key.\n     *\n     * The public key is generated by multiplying the base point G of the curve and the private key.\n     *\n     * @method toPublicKey\n     * @returns The generated PublicKey.\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     * const publicKey = privateKey.toPublicKey();\n     */\n    toPublicKey() {\n        const c = new Curve();\n        const p = c.g.mul(this);\n        return new PublicKey(p.x, p.y);\n    }\n    /**\n     * Converts the private key to a Wallet Import Format (WIF) string.\n     *\n     * Base58Check encoding is used for encoding the private key.\n     * The prefix\n     *\n     * @method toWif\n     * @returns The WIF string.\n     *\n     * @param prefix defaults to [0x80] for mainnet, set it to [0xef] for testnet.\n     *\n     * @throws Error('Value is out of field') if current BigNumber value is out of field limited by curve.n\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     * const wif = privateKey.toWif();\n     * const testnetWif = privateKey.toWif([0xef]);\n     */\n    toWif(prefix = [0x80]) {\n        if (!this.isValid()) {\n            throw new Error('Value is out of field');\n        }\n        return toBase58Check([...this.toArray('be', 32), 1], prefix);\n    }\n    /**\n     * Base58Check encodes the hash of the public key associated with this private key with a prefix to indicate locking script type.\n     * Defaults to P2PKH for mainnet, otherwise known as a \"Bitcoin Address\".\n     *\n     * @param prefix defaults to [0x00] for mainnet, set to [0x6f] for testnet or use the strings 'testnet' or 'mainnet'\n     *\n     * @returns Returns the address encoding associated with the hash of the public key associated with this private key.\n     *\n     * @example\n     * const address = privkey.toAddress()\n     * const address = privkey.toAddress('mainnet')\n     * const testnetAddress = privkey.toAddress([0x6f])\n     * const testnetAddress = privkey.toAddress('testnet')\n     */\n    toAddress(prefix = [0x00]) {\n        return this.toPublicKey().toAddress(prefix);\n    }\n    /**\n     * Converts this PrivateKey to a hexadecimal string.\n     *\n     * @method toHex\n     * @param length - The minimum length of the hex string\n     * @returns Returns a string representing the hexadecimal value of this BigNumber.\n     *\n     * @example\n     * const bigNumber = new BigNumber(255);\n     * const hex = bigNumber.toHex();\n     */\n    toHex() {\n        return super.toHex(32);\n    }\n    /**\n     * Converts this PrivateKey to a string representation.\n     *\n     * @method toString\n     * @param {number | 'hex'} [base='hex'] - The base for representing the number. Default is hexadecimal ('hex').\n     * @param {number} [padding=64] - The minimum number of digits for the output string. Default is 64, ensuring a 256-bit representation in hexadecimal.\n     * @returns {string} A string representation of the PrivateKey in the specified base, padded to the specified length.\n     *\n     **/\n    toString(base = 'hex', padding = 64) {\n        return super.toString(base, padding);\n    }\n    /**\n     * Derives a shared secret from the public key.\n     *\n     * @method deriveSharedSecret\n     * @param key - The public key to derive the shared secret from.\n     * @returns The derived shared secret (a point on the curve).\n     * @throws Will throw an error if the public key is not valid.\n     *\n     * @example\n     * const privateKey = PrivateKey.fromRandom();\n     * const publicKey = privateKey.toPublicKey();\n     * const sharedSecret = privateKey.deriveSharedSecret(publicKey);\n     */\n    deriveSharedSecret(key) {\n        if (!key.validate()) {\n            throw new Error('Public key not valid for ECDH secret derivation');\n        }\n        return key.mul(this);\n    }\n    /**\n     * Derives a child key with BRC-42.\n     * @param publicKey The public key of the other party\n     * @param invoiceNumber The invoice number used to derive the child key\n     * @param cacheSharedSecret Optional function to cache shared secrets\n     * @param retrieveCachedSharedSecret Optional function to retrieve shared secrets from the cache\n     * @returns The derived child key.\n     */\n    deriveChild(publicKey, invoiceNumber, cacheSharedSecret, retrieveCachedSharedSecret) {\n        let sharedSecret;\n        if (typeof retrieveCachedSharedSecret === 'function') {\n            const retrieved = retrieveCachedSharedSecret(this, publicKey);\n            if (typeof retrieved !== 'undefined') {\n                sharedSecret = retrieved;\n            }\n            else {\n                sharedSecret = this.deriveSharedSecret(publicKey);\n                if (typeof cacheSharedSecret === 'function') {\n                    cacheSharedSecret(this, publicKey, sharedSecret);\n                }\n            }\n        }\n        else {\n            sharedSecret = this.deriveSharedSecret(publicKey);\n        }\n        const invoiceNumberBin = toArray(invoiceNumber, 'utf8');\n        const hmac = sha256hmac(sharedSecret.encode(true), invoiceNumberBin);\n        const curve = new Curve();\n        return new PrivateKey(this.add(new BigNumber(hmac)).mod(curve.n).toArray());\n    }\n    /**\n     * Splits the private key into shares using Shamir's Secret Sharing Scheme.\n     *\n     * @param threshold The minimum number of shares required to reconstruct the private key.\n     * @param totalShares The total number of shares to generate.\n     * @param prime The prime number to be used in Shamir's Secret Sharing Scheme.\n     * @returns An array of shares.\n     *\n     * @example\n     * const key = PrivateKey.fromRandom()\n     * const shares = key.toKeyShares(2, 5)\n     */\n    toKeyShares(threshold, totalShares) {\n        if (typeof threshold !== 'number' || typeof totalShares !== 'number') {\n            throw new Error('threshold and totalShares must be numbers');\n        }\n        if (threshold < 2)\n            throw new Error('threshold must be at least 2');\n        if (totalShares < 2)\n            throw new Error('totalShares must be at least 2');\n        if (threshold > totalShares) {\n            throw new Error('threshold should be less than or equal to totalShares');\n        }\n        const poly = Polynomial.fromPrivateKey(this, threshold);\n        const points = [];\n        const usedXCoordinates = new Set();\n        const curve = new Curve();\n        /**\n         * Cryptographically secure x-coordinate generation for Shamir's Secret Sharing (toKeyShares)\n         *\n         * - Each x-coordinate is derived using a master seed (Random(64)) as the HMAC key and a per-attempt counter array as the message.\n         * - The counter array includes the share index, the attempt number (to handle rare collisions), and 32 bytes of fresh randomness for each attempt.\n         * - This ensures:\n         *   1. **Non-determinism**: Each split is unique, even for the same key and parameters, due to the per-attempt randomness.\n         *   2. **Uniqueness**: x-coordinates are checked for zero and duplication; retry logic ensures no repeats or invalid values.\n         *   3. **Cryptographic strength**: HMAC-SHA-512 is robust, and combining deterministic and random values protects against RNG compromise or bias.\n         *   4. **Defensive programming**: Attempts are capped (5 per share) to prevent infinite loops in pathological cases.\n         *\n         * This approach is robust against all practical attacks and is suitable for high-security environments where deterministic splits are not desired.\n         */\n        const seed = Random(64);\n        for (let i = 0; i < totalShares; i++) {\n            let x;\n            let attempts = 0;\n            do {\n                // To ensure no two points are ever the same, even if the system RNG is compromised,\n                // we'll use a different counter value for each point and use SHA-512 HMAC.\n                const counter = [i, attempts, ...Random(32)];\n                const h = sha512hmac(seed, counter);\n                x = new BigNumber(h).umod(curve.p);\n                // repeat generation if x is zero or has already been used (insanely unlikely)\n                attempts++;\n                if (attempts > 5) {\n                    throw new Error('Failed to generate unique x coordinate after 5 attempts');\n                }\n            } while (x.isZero() || usedXCoordinates.has(x.toString()));\n            usedXCoordinates.add(x.toString());\n            const y = poly.valueAt(x);\n            points.push(new PointInFiniteField(x, y));\n        }\n        const integrity = this.toPublicKey().toHash('hex').slice(0, 8);\n        return new KeyShares(points, threshold, integrity);\n    }\n    /**\n     * @method toBackupShares\n     *\n     * Creates a backup of the private key by splitting it into shares.\n     *\n     *\n     * @param threshold The number of shares which will be required to reconstruct the private key.\n     * @param totalShares The number of shares to generate for distribution.\n     * @returns\n     */\n    toBackupShares(threshold, totalShares) {\n        return this.toKeyShares(threshold, totalShares).toBackupFormat();\n    }\n    /**\n     *\n     * @method fromBackupShares\n     *\n     * Creates a private key from backup shares.\n     *\n     * @param shares\n     * @returns PrivateKey\n     *\n     * @example\n     *\n     * const share1 = '3znuzt7DZp8HzZTfTh5MF9YQKNX3oSxTbSYmSRGrH2ev.2Nm17qoocmoAhBTCs8TEBxNXCskV9N41rB2PckcgYeqV.2.35449bb9'\n     * const share2 = 'Cm5fuUc39X5xgdedao8Pr1kvCSm8Gk7Cfenc7xUKcfLX.2juyK9BxCWn2DiY5JUAgj9NsQ77cc9bWksFyW45haXZm.2.35449bb9'\n     *\n     * const recoveredKey = PrivateKey.fromBackupShares([share1, share2])\n     */\n    static fromBackupShares(shares) {\n        return PrivateKey.fromKeyShares(KeyShares.fromBackupFormat(shares));\n    }\n    /**\n     * Combines shares to reconstruct the private key.\n     *\n     * @param shares An array of points (shares) to be used to reconstruct the private key.\n     * @param threshold The minimum number of shares required to reconstruct the private key.\n     *\n     * @returns The reconstructed private key.\n     *\n     **/\n    static fromKeyShares(keyShares) {\n        const { points, threshold, integrity } = keyShares;\n        if (threshold < 2)\n            throw new Error('threshold must be at least 2');\n        if (points.length < threshold) {\n            throw new Error(`At least ${threshold} shares are required to reconstruct the private key`);\n        }\n        // check to see if two points have the same x value\n        for (let i = 0; i < threshold; i++) {\n            for (let j = i + 1; j < threshold; j++) {\n                if (points[i].x.eq(points[j].x)) {\n                    throw new Error('Duplicate share detected, each must be unique.');\n                }\n            }\n        }\n        const poly = new Polynomial(points, threshold);\n        const privateKey = new PrivateKey(poly.valueAt(new BigNumber(0)).toArray());\n        const integrityHash = privateKey.toPublicKey().toHash('hex').slice(0, 8);\n        if (integrityHash !== integrity) {\n            throw new Error('Integrity hash mismatch');\n        }\n        return privateKey;\n    }\n}\n//# sourceMappingURL=PrivateKey.js.map","// @ts-nocheck\nconst SBox = new Uint8Array([\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16\n]);\nconst Rcon = [\n    [0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00], [0x02, 0x00, 0x00, 0x00], [0x04, 0x00, 0x00, 0x00],\n    [0x08, 0x00, 0x00, 0x00], [0x10, 0x00, 0x00, 0x00], [0x20, 0x00, 0x00, 0x00], [0x40, 0x00, 0x00, 0x00],\n    [0x80, 0x00, 0x00, 0x00], [0x1b, 0x00, 0x00, 0x00], [0x36, 0x00, 0x00, 0x00]\n].map(v => new Uint8Array(v));\nconst mul2 = new Uint8Array(256);\nconst mul3 = new Uint8Array(256);\nfor (let i = 0; i < 256; i++) {\n    const m2 = ((i << 1) ^ ((i & 0x80) !== 0 ? 0x1b : 0)) & 0xff;\n    mul2[i] = m2;\n    mul3[i] = m2 ^ i;\n}\nfunction addRoundKey(state, roundKeyArray, offset) {\n    for (let c = 0; c < 4; c++) {\n        const keyCol = roundKeyArray[offset + c];\n        for (let r = 0; r < 4; r++) {\n            state[r][c] ^= keyCol[r];\n        }\n    }\n}\nfunction subBytes(state) {\n    for (let r = 0; r < 4; r++) {\n        for (let c = 0; c < 4; c++) {\n            state[r][c] = SBox[state[r][c]];\n        }\n    }\n}\nfunction subWord(value) {\n    for (let i = 0; i < 4; i++) {\n        value[i] = SBox[value[i]];\n    }\n}\nfunction rotWord(value) {\n    const temp = value[0];\n    value[0] = value[1];\n    value[1] = value[2];\n    value[2] = value[3];\n    value[3] = temp;\n}\nfunction shiftRows(state) {\n    let tmp = state[1][0];\n    state[1][0] = state[1][1];\n    state[1][1] = state[1][2];\n    state[1][2] = state[1][3];\n    state[1][3] = tmp;\n    tmp = state[2][0];\n    const tmp2 = state[2][1];\n    state[2][0] = state[2][2];\n    state[2][1] = state[2][3];\n    state[2][2] = tmp;\n    state[2][3] = tmp2;\n    tmp = state[3][3];\n    state[3][3] = state[3][2];\n    state[3][2] = state[3][1];\n    state[3][1] = state[3][0];\n    state[3][0] = tmp;\n}\nfunction mixColumns(state) {\n    for (let c = 0; c < 4; c++) {\n        const s0 = state[0][c];\n        const s1 = state[1][c];\n        const s2 = state[2][c];\n        const s3 = state[3][c];\n        state[0][c] = mul2[s0] ^ mul3[s1] ^ s2 ^ s3;\n        state[1][c] = s0 ^ mul2[s1] ^ mul3[s2] ^ s3;\n        state[2][c] = s0 ^ s1 ^ mul2[s2] ^ mul3[s3];\n        state[3][c] = mul3[s0] ^ s1 ^ s2 ^ mul2[s3];\n    }\n}\nfunction keyExpansion(roundLimit, key) {\n    const nK = key.length / 4;\n    const result = [];\n    for (let i = 0; i < key.length; i++) {\n        if (i % 4 === 0)\n            result.push([]);\n        result[i >> 2].push(key[i]);\n    }\n    for (let i = nK; i < 4 * roundLimit; i++) {\n        result[i] = [];\n        const temp = result[i - 1].slice();\n        if (i % nK === 0) {\n            rotWord(temp);\n            subWord(temp);\n            const r = Rcon[i / nK];\n            for (let j = 0; j < 4; j++) {\n                temp[j] ^= r[j];\n            }\n        }\n        else if (nK > 6 && (i % nK) === 4) {\n            subWord(temp);\n        }\n        for (let j = 0; j < 4; j++) {\n            result[i][j] = result[i - nK][j] ^ temp[j];\n        }\n    }\n    return result;\n}\nexport function AES(input, key) {\n    let i;\n    let j;\n    let round;\n    let roundLimit;\n    const state = [[], [], [], []];\n    const output = [];\n    // Since the BigNumber representation of keys ignores big endian zeroes,\n    // extend incoming key arrays with zeros to the smallest standard key size.\n    const ekey = Array.from(key);\n    if (ekey.length <= 16) {\n        while (ekey.length < 16)\n            ekey.unshift(0);\n        roundLimit = 11;\n    }\n    else if (ekey.length <= 24) {\n        while (ekey.length < 24)\n            ekey.unshift(0);\n        roundLimit = 13;\n    }\n    else if (key.length <= 32) {\n        while (ekey.length < 32)\n            ekey.unshift(0);\n        roundLimit = 15;\n    }\n    else {\n        throw new Error('Illegal key length: ' + String(key.length));\n    }\n    const w = keyExpansion(roundLimit, ekey);\n    for (let c = 0; c < 4; c++) {\n        state[0][c] = input[c * 4];\n        state[1][c] = input[c * 4 + 1];\n        state[2][c] = input[c * 4 + 2];\n        state[3][c] = input[c * 4 + 3];\n    }\n    addRoundKey(state, w, 0);\n    for (round = 1; round < roundLimit; round++) {\n        subBytes(state);\n        shiftRows(state);\n        if (round + 1 < roundLimit) {\n            mixColumns(state);\n        }\n        addRoundKey(state, w, round * 4);\n    }\n    for (i = 0; i < 4; i++) {\n        for (j = 0; j < 4; j++) {\n            output.push(state[j][i]);\n        }\n    }\n    return output;\n}\nexport const checkBit = function (byteArray, byteIndex, bitIndex) {\n    return (byteArray[byteIndex] & (0x01 << bitIndex)) !== 0 ? 1 : 0;\n};\nexport const getBytes = function (numericValue) {\n    return [\n        (numericValue & 0xFF000000) >>> 24,\n        (numericValue & 0x00FF0000) >> 16,\n        (numericValue & 0x0000FF00) >> 8,\n        numericValue & 0x000000FF\n    ];\n};\nconst createZeroBlock = function (length) {\n    return new Array(length).fill(0);\n};\nconst R = [0xe1].concat(createZeroBlock(15));\nexport const exclusiveOR = function (block0, block1) {\n    const len = block0.length;\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = block0[i] ^ block1[i];\n    }\n    return result;\n};\nconst xorInto = function (target, block) {\n    for (let i = 0; i < target.length; i++) {\n        target[i] ^= block[i];\n    }\n};\nexport const rightShift = function (block) {\n    let i;\n    let carry = 0;\n    let oldCarry = 0;\n    for (i = 0; i < block.length; i++) {\n        oldCarry = carry;\n        carry = block[i] & 0x01;\n        block[i] = block[i] >> 1;\n        if (oldCarry !== 0) {\n            block[i] = block[i] | 0x80;\n        }\n    }\n    return block;\n};\nexport const multiply = function (block0, block1) {\n    const v = block1.slice();\n    const z = createZeroBlock(16);\n    for (let i = 0; i < 16; i++) {\n        for (let j = 7; j >= 0; j--) {\n            if ((block0[i] & (1 << j)) !== 0) {\n                xorInto(z, v);\n            }\n            if ((v[15] & 1) !== 0) {\n                rightShift(v);\n                xorInto(v, R);\n            }\n            else {\n                rightShift(v);\n            }\n        }\n    }\n    return z;\n};\nexport const incrementLeastSignificantThirtyTwoBits = function (block) {\n    let i;\n    const result = block.slice();\n    for (i = 15; i !== 11; i--) {\n        result[i] = result[i] + 1;\n        if (result[i] === 256) {\n            result[i] = 0;\n        }\n        else {\n            break;\n        }\n    }\n    return result;\n};\nexport function ghash(input, hashSubKey) {\n    let result = createZeroBlock(16);\n    for (let i = 0; i < input.length; i += 16) {\n        const block = result.slice();\n        for (let j = 0; j < 16; j++) {\n            block[j] ^= input[i + j] ?? 0;\n        }\n        result = multiply(block, hashSubKey);\n    }\n    return result;\n}\nfunction gctr(input, initialCounterBlock, key) {\n    if (input.length === 0)\n        return [];\n    const output = new Array(input.length);\n    let counterBlock = initialCounterBlock;\n    let pos = 0;\n    const n = Math.ceil(input.length / 16);\n    for (let i = 0; i < n; i++) {\n        const counter = AES(counterBlock, key);\n        const chunk = Math.min(16, input.length - pos);\n        for (let j = 0; j < chunk; j++) {\n            output[pos] = input[pos] ^ counter[j];\n            pos++;\n        }\n        if (i + 1 < n) {\n            counterBlock = incrementLeastSignificantThirtyTwoBits(counterBlock);\n        }\n    }\n    return output;\n}\nexport function AESGCM(plainText, additionalAuthenticatedData, initializationVector, key) {\n    let preCounterBlock;\n    let plainTag;\n    const hashSubKey = AES(createZeroBlock(16), key);\n    preCounterBlock = [...initializationVector];\n    if (initializationVector.length === 12) {\n        preCounterBlock = preCounterBlock.concat(createZeroBlock(3)).concat([0x01]);\n    }\n    else {\n        if (initializationVector.length % 16 !== 0) {\n            preCounterBlock = preCounterBlock.concat(createZeroBlock(16 - (initializationVector.length % 16)));\n        }\n        preCounterBlock = preCounterBlock.concat(createZeroBlock(8));\n        preCounterBlock = ghash(preCounterBlock.concat(createZeroBlock(4))\n            .concat(getBytes(initializationVector.length * 8)), hashSubKey);\n    }\n    const cipherText = gctr(plainText, incrementLeastSignificantThirtyTwoBits(preCounterBlock), key);\n    plainTag = additionalAuthenticatedData.slice();\n    if (additionalAuthenticatedData.length === 0) {\n        plainTag = plainTag.concat(createZeroBlock(16));\n    }\n    else if (additionalAuthenticatedData.length % 16 !== 0) {\n        plainTag = plainTag.concat(createZeroBlock(16 - (additionalAuthenticatedData.length % 16)));\n    }\n    plainTag = plainTag.concat(cipherText);\n    if (cipherText.length === 0) {\n        plainTag = plainTag.concat(createZeroBlock(16));\n    }\n    else if (cipherText.length % 16 !== 0) {\n        plainTag = plainTag.concat(createZeroBlock(16 - (cipherText.length % 16)));\n    }\n    plainTag = plainTag.concat(createZeroBlock(4))\n        .concat(getBytes(additionalAuthenticatedData.length * 8))\n        .concat(createZeroBlock(4)).concat(getBytes(cipherText.length * 8));\n    return {\n        result: cipherText,\n        authenticationTag: gctr(ghash(plainTag, hashSubKey), preCounterBlock, key)\n    };\n}\nexport function AESGCMDecrypt(cipherText, additionalAuthenticatedData, initializationVector, authenticationTag, key) {\n    let preCounterBlock;\n    let compareTag;\n    // Generate the hash subkey\n    const hashSubKey = AES(createZeroBlock(16), key);\n    preCounterBlock = [...initializationVector];\n    if (initializationVector.length === 12) {\n        preCounterBlock = preCounterBlock.concat(createZeroBlock(3)).concat([0x01]);\n    }\n    else {\n        if (initializationVector.length % 16 !== 0) {\n            preCounterBlock = preCounterBlock.concat(createZeroBlock(16 - (initializationVector.length % 16)));\n        }\n        preCounterBlock = preCounterBlock.concat(createZeroBlock(8));\n        preCounterBlock = ghash(preCounterBlock.concat(createZeroBlock(4)).concat(getBytes(initializationVector.length * 8)), hashSubKey);\n    }\n    // Decrypt to obtain the plain text\n    const plainText = gctr(cipherText, incrementLeastSignificantThirtyTwoBits(preCounterBlock), key);\n    compareTag = additionalAuthenticatedData.slice();\n    if (additionalAuthenticatedData.length === 0) {\n        compareTag = compareTag.concat(createZeroBlock(16));\n    }\n    else if (additionalAuthenticatedData.length % 16 !== 0) {\n        compareTag = compareTag.concat(createZeroBlock(16 - (additionalAuthenticatedData.length % 16)));\n    }\n    compareTag = compareTag.concat(cipherText);\n    if (cipherText.length === 0) {\n        compareTag = compareTag.concat(createZeroBlock(16));\n    }\n    else if (cipherText.length % 16 !== 0) {\n        compareTag = compareTag.concat(createZeroBlock(16 - (cipherText.length % 16)));\n    }\n    compareTag = compareTag.concat(createZeroBlock(4))\n        .concat(getBytes(additionalAuthenticatedData.length * 8))\n        .concat(createZeroBlock(4)).concat(getBytes(cipherText.length * 8));\n    // Generate the authentication tag\n    const calculatedTag = gctr(ghash(compareTag, hashSubKey), preCounterBlock, key);\n    // If the calculated tag does not match the provided tag, return null - the decryption failed.\n    if (calculatedTag.join() !== authenticationTag.join()) {\n        return null;\n    }\n    return plainText;\n}\n//# sourceMappingURL=AESGCM.js.map","import BigNumber from './BigNumber.js';\nimport { AESGCM, AESGCMDecrypt } from './AESGCM.js';\nimport Random from './Random.js';\nimport { toArray, encode } from './utils.js';\n/**\n * `SymmetricKey` is a class that extends the `BigNumber` class and implements symmetric encryption and decryption methods.\n * Symmetric-Key encryption is a form of encryption where the same key is used to encrypt and decrypt the message.\n * It leverages the Advanced Encryption Standard Galois/Counter Mode (AES-GCM) for encryption and decryption of messages.\n *\n * @class SymmetricKey\n * @extends {BigNumber}\n */\nexport default class SymmetricKey extends BigNumber {\n    /**\n     * Generates a symmetric key randomly.\n     *\n     * @method fromRandom\n     * @static\n     * @returns The newly generated Symmetric Key.\n     *\n     * @example\n     * const symmetricKey = SymmetricKey.fromRandom();\n     */\n    static fromRandom() {\n        return new SymmetricKey(Random(32));\n    }\n    /**\n     * Encrypts a given message using AES-GCM encryption.\n     * The generated Initialization Vector (IV) is attached to the encrypted message for decryption purposes.\n     * The OpenSSL format of |IV|encryptedContent|authTag| is used.\n     *\n     * @method encrypt\n     * @param msg - The message to be encrypted. It can be a string or an array of numbers.\n     * @param enc - optional. The encoding of the message. If hex, the string is assumed to be hex, UTF-8 otherwise.\n     * @returns Returns the encrypted message as a string or an array of numbers, depending on `enc` argument.\n     *\n     * @example\n     * const key = new SymmetricKey(1234);\n     * const encryptedMessage = key.encrypt('plainText', 'utf8');\n     */\n    encrypt(msg, enc) {\n        const iv = Random(32);\n        msg = toArray(msg, enc);\n        const { result, authenticationTag } = AESGCM(msg, [], iv, this.toArray('be', 32));\n        return encode([...iv, ...result, ...authenticationTag], enc);\n    }\n    /**\n     * Decrypts a given AES-GCM encrypted message using the same key that was used for encryption.\n     * The method extracts the IV and the authentication tag from the encrypted message, then attempts to decrypt it.\n     * If the decryption fails (e.g., due to message tampering), an error is thrown.\n     *\n     * @method decrypt\n     * @param msg - The encrypted message to be decrypted. It can be a string or an array of numbers.\n     * @param enc - optional. The encoding of the message (if no encoding is provided, uses utf8 for strings, unless specified as hex).\n     * @returns Returns the decrypted message as a string or an array of numbers, depending on `enc` argument. If absent, an array of numbers is returned.\n     *\n     * @example\n     * const key = new SymmetricKey(1234);\n     * const decryptedMessage = key.decrypt(encryptedMessage, 'utf8');\n     *\n     * @throws {Error} Will throw an error if the decryption fails, likely due to message tampering or incorrect decryption key.\n     */\n    decrypt(msg, enc) {\n        msg = toArray(msg, enc);\n        const iv = msg.slice(0, 32);\n        const ciphertextWithTag = msg.slice(32);\n        const messageTag = ciphertextWithTag.slice(-16);\n        const ciphertext = ciphertextWithTag.slice(0, -16);\n        const result = AESGCMDecrypt(ciphertext, [], iv, messageTag, this.toArray());\n        if (result === null) {\n            throw new Error('Decryption failed!');\n        }\n        return encode(result, enc);\n    }\n}\n//# sourceMappingURL=SymmetricKey.js.map","import Signature from './Signature.js';\nimport BigNumber from './BigNumber.js';\nimport * as Hash from './Hash.js';\nimport { toArray, Writer } from './utils.js';\nexport default class TransactionSignature extends Signature {\n    static SIGHASH_ALL = 0x00000001;\n    static SIGHASH_NONE = 0x00000002;\n    static SIGHASH_SINGLE = 0x00000003;\n    static SIGHASH_FORKID = 0x00000040;\n    static SIGHASH_ANYONECANPAY = 0x00000080;\n    scope;\n    static format(params) {\n        const currentInput = {\n            sourceTXID: params.sourceTXID,\n            sourceOutputIndex: params.sourceOutputIndex,\n            sequence: params.inputSequence\n        };\n        const inputs = [...params.otherInputs];\n        inputs.splice(params.inputIndex, 0, currentInput);\n        const getPrevoutHash = () => {\n            const writer = new Writer();\n            for (const input of inputs) {\n                if (typeof input.sourceTXID === 'undefined') {\n                    if (input.sourceTransaction == null) {\n                        throw new Error('Missing sourceTransaction for input');\n                    }\n                    writer.write(input.sourceTransaction.hash());\n                }\n                else {\n                    writer.writeReverse(toArray(input.sourceTXID, 'hex'));\n                }\n                writer.writeUInt32LE(input.sourceOutputIndex);\n            }\n            const buf = writer.toArray();\n            const ret = Hash.hash256(buf);\n            return ret;\n        };\n        const getSequenceHash = () => {\n            const writer = new Writer();\n            for (const input of inputs) {\n                const sequence = input.sequence ?? 0xffffffff; // Default to max sequence number\n                writer.writeUInt32LE(sequence);\n            }\n            const buf = writer.toArray();\n            const ret = Hash.hash256(buf);\n            return ret;\n        };\n        function getOutputsHash(outputIndex) {\n            const writer = new Writer();\n            if (typeof outputIndex === 'undefined') {\n                for (const output of params.outputs) {\n                    const satoshis = output.satoshis ?? 0; // Default to 0 if undefined\n                    writer.writeUInt64LE(satoshis);\n                    const script = output.lockingScript?.toBinary() ?? [];\n                    writer.writeVarIntNum(script.length);\n                    writer.write(script);\n                }\n            }\n            else {\n                const output = params.outputs[outputIndex];\n                if (output === undefined) { // ✅ Explicitly check for undefined\n                    throw new Error(`Output at index ${outputIndex} does not exist`);\n                }\n                const satoshis = output.satoshis ?? 0; // Default to 0 if undefined\n                writer.writeUInt64LE(satoshis);\n                const script = output.lockingScript?.toBinary() ?? [];\n                writer.writeVarIntNum(script.length);\n                writer.write(script);\n            }\n            const buf = writer.toArray();\n            const ret = Hash.hash256(buf);\n            return ret;\n        }\n        let hashPrevouts = new Array(32).fill(0);\n        let hashSequence = new Array(32).fill(0);\n        let hashOutputs = new Array(32).fill(0);\n        if ((params.scope & TransactionSignature.SIGHASH_ANYONECANPAY) === 0) {\n            hashPrevouts = getPrevoutHash();\n        }\n        if ((params.scope & TransactionSignature.SIGHASH_ANYONECANPAY) === 0 &&\n            (params.scope & 31) !== TransactionSignature.SIGHASH_SINGLE &&\n            (params.scope & 31) !== TransactionSignature.SIGHASH_NONE) {\n            hashSequence = getSequenceHash();\n        }\n        if ((params.scope & 31) !== TransactionSignature.SIGHASH_SINGLE &&\n            (params.scope & 31) !== TransactionSignature.SIGHASH_NONE) {\n            hashOutputs = getOutputsHash();\n        }\n        else if ((params.scope & 31) === TransactionSignature.SIGHASH_SINGLE &&\n            params.inputIndex < params.outputs.length) {\n            hashOutputs = getOutputsHash(params.inputIndex);\n        }\n        const writer = new Writer();\n        // Version\n        writer.writeInt32LE(params.transactionVersion);\n        // Input prevouts/nSequence (none/all, depending on flags)\n        writer.write(hashPrevouts);\n        writer.write(hashSequence);\n        //  outpoint (32-byte hash + 4-byte little endian)\n        writer.writeReverse(toArray(params.sourceTXID, 'hex'));\n        writer.writeUInt32LE(params.sourceOutputIndex);\n        // scriptCode of the input (serialized as scripts inside CTxOuts)\n        const subscriptBin = params.subscript.toBinary();\n        writer.writeVarIntNum(subscriptBin.length);\n        writer.write(subscriptBin);\n        // value of the output spent by this input (8-byte little endian)\n        writer.writeUInt64LE(params.sourceSatoshis);\n        // nSequence of the input (4-byte little endian)\n        const sequenceNumber = currentInput.sequence;\n        writer.writeUInt32LE(sequenceNumber);\n        // Outputs (none/one/all, depending on flags)\n        writer.write(hashOutputs);\n        // Locktime\n        writer.writeUInt32LE(params.lockTime);\n        // sighashType\n        writer.writeUInt32LE(params.scope >>> 0);\n        const buf = writer.toArray();\n        return buf;\n    }\n    // The format used in a tx\n    static fromChecksigFormat(buf) {\n        if (buf.length === 0) {\n            // allow setting a \"blank\" signature\n            const r = new BigNumber(1);\n            const s = new BigNumber(1);\n            const scope = 1;\n            return new TransactionSignature(r, s, scope);\n        }\n        const scope = buf[buf.length - 1];\n        const derbuf = buf.slice(0, buf.length - 1);\n        const tempSig = Signature.fromDER(derbuf);\n        return new TransactionSignature(tempSig.r, tempSig.s, scope);\n    }\n    constructor(r, s, scope) {\n        super(r, s);\n        this.scope = scope;\n    }\n    /**\n     * Compares to bitcoind's IsLowDERSignature\n     * See also Ecdsa signature algorithm which enforces this.\n     * See also Bip 62, \"low S values in signatures\"\n     */\n    hasLowS() {\n        if (this.s.ltn(1) ||\n            this.s.gt(new BigNumber('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex'))) {\n            return false;\n        }\n        return true;\n    }\n    toChecksigFormat() {\n        const derbuf = this.toDER();\n        return [...derbuf, this.scope];\n    }\n}\n//# sourceMappingURL=TransactionSignature.js.map","import BigNumber from './BigNumber.js';\nimport Curve from './Curve.js';\nimport { sha256 } from './Hash.js';\nimport { PrivateKey } from './index.js';\n/**\n * Class representing the Schnorr Zero-Knowledge Proof (ZKP) protocol.\n *\n * This class provides methods to generate and verify proofs that demonstrate knowledge of a secret without revealing it.\n * Specifically, it allows one party to prove to another that they know the private key corresponding to a public key\n * and have correctly computed a shared secret, without disclosing the private key itself.\n *\n * The protocol involves two main methods:\n * - `generateProof`: Generates a proof linking a public key `A` and a shared secret `S`, proving knowledge of the corresponding private key `a`.\n * - `verifyProof`: Verifies the provided proof, ensuring its validity without revealing any secret information.\n *\n * The class utilizes elliptic curve cryptography (ECC) and the SHA-256 hash function to compute challenges within the proof.\n *\n * @example\n * ```typescript\n * const schnorr = new Schnorr();\n * const a = PrivateKey.fromRandom(); // Prover's private key\n * const A = a.toPublicKey();         // Prover's public key\n * const b = PrivateKey.fromRandom(); // Other party's private key\n * const B = b.toPublicKey();         // Other party's public key\n * const S = B.mul(a);                // Shared secret\n *\n * // Prover generates the proof\n * const proof = schnorr.generateProof(a, A, B, S);\n *\n * // Verifier verifies the proof\n * const isValid = schnorr.verifyProof(A.point, B.point, S.point, proof);\n * console.log(`Proof is valid: ${isValid}`);\n * ```\n */\nexport default class Schnorr {\n    curve;\n    constructor() {\n        this.curve = new Curve();\n    }\n    /**\n     * Generates a proof that demonstrates the link between public key A and shared secret S\n     * @param a Private key corresponding to public key A\n     * @param A Public key\n     * @param B Other party's public key\n     * @param S Shared secret\n     * @returns Proof (R, S', z)\n     */\n    generateProof(aArg, AArg, BArg, S) {\n        const r = PrivateKey.fromRandom();\n        const R = r.toPublicKey();\n        const SPrime = BArg.mul(r);\n        const e = this.computeChallenge(AArg, BArg, S, SPrime, R);\n        const z = r.add(e.mul(aArg)).umod(this.curve.n);\n        return { R, SPrime, z };\n    }\n    /**\n     * Verifies the proof of the link between public key A and shared secret S\n     * @param A Public key\n     * @param B Other party's public key\n     * @param S Shared secret\n     * @param proof Proof (R, S', z)\n     * @returns True if the proof is valid, false otherwise\n     */\n    verifyProof(A, B, S, proof) {\n        const { R, SPrime, z } = proof;\n        const e = this.computeChallenge(A, B, S, SPrime, R);\n        // Check zG = R + eA\n        const zG = this.curve.g.mul(z);\n        const RpluseA = R.add(A.mul(e));\n        if (!zG.eq(RpluseA)) {\n            return false;\n        }\n        // Check zB = S' + eS\n        const zB = B.mul(z);\n        const SprimeeS = SPrime.add(S.mul(e));\n        if (!zB.eq(SprimeeS)) {\n            return false;\n        }\n        return true;\n    }\n    computeChallenge(A, B, S, SPrime, R) {\n        const message = [\n            ...A.encode(true),\n            ...B.encode(true),\n            ...S.encode(true),\n            ...SPrime.encode(true),\n            ...R.encode(true)\n        ];\n        const hash = sha256(message);\n        return new BigNumber(hash).umod(this.curve.n);\n    }\n}\n//# sourceMappingURL=Schnorr.js.map","/**\n * An object mapping opcode names (such as OP_DUP) to their corresponding numbers (such as 0x76), and vice versa.\n */\nconst OP = {\n    // push value\n    OP_FALSE: 0x00,\n    OP_0: 0x00,\n    OP_PUSHDATA1: 0x4c,\n    OP_PUSHDATA2: 0x4d,\n    OP_PUSHDATA4: 0x4e,\n    OP_1NEGATE: 0x4f,\n    OP_RESERVED: 0x50,\n    OP_TRUE: 0x51,\n    OP_1: 0x51,\n    OP_2: 0x52,\n    OP_3: 0x53,\n    OP_4: 0x54,\n    OP_5: 0x55,\n    OP_6: 0x56,\n    OP_7: 0x57,\n    OP_8: 0x58,\n    OP_9: 0x59,\n    OP_10: 0x5a,\n    OP_11: 0x5b,\n    OP_12: 0x5c,\n    OP_13: 0x5d,\n    OP_14: 0x5e,\n    OP_15: 0x5f,\n    OP_16: 0x60,\n    // control\n    OP_NOP: 0x61,\n    OP_VER: 0x62,\n    OP_IF: 0x63,\n    OP_NOTIF: 0x64,\n    OP_VERIF: 0x65,\n    OP_VERNOTIF: 0x66,\n    OP_ELSE: 0x67,\n    OP_ENDIF: 0x68,\n    OP_VERIFY: 0x69,\n    OP_RETURN: 0x6a,\n    // stack ops\n    OP_TOALTSTACK: 0x6b,\n    OP_FROMALTSTACK: 0x6c,\n    OP_2DROP: 0x6d,\n    OP_2DUP: 0x6e,\n    OP_3DUP: 0x6f,\n    OP_2OVER: 0x70,\n    OP_2ROT: 0x71,\n    OP_2SWAP: 0x72,\n    OP_IFDUP: 0x73,\n    OP_DEPTH: 0x74,\n    OP_DROP: 0x75,\n    OP_DUP: 0x76,\n    OP_NIP: 0x77,\n    OP_OVER: 0x78,\n    OP_PICK: 0x79,\n    OP_ROLL: 0x7a,\n    OP_ROT: 0x7b,\n    OP_SWAP: 0x7c,\n    OP_TUCK: 0x7d,\n    // data manipulation ops\n    OP_CAT: 0x7e,\n    OP_SUBSTR: 0x7f,\n    OP_SPLIT: 0x7f,\n    OP_LEFT: 0x80,\n    OP_NUM2BIN: 0x80,\n    OP_RIGHT: 0x81,\n    OP_BIN2NUM: 0x81,\n    OP_SIZE: 0x82,\n    // bit logic\n    OP_INVERT: 0x83,\n    OP_AND: 0x84,\n    OP_OR: 0x85,\n    OP_XOR: 0x86,\n    OP_EQUAL: 0x87,\n    OP_EQUALVERIFY: 0x88,\n    OP_RESERVED1: 0x89,\n    OP_RESERVED2: 0x8a,\n    // numeric\n    OP_1ADD: 0x8b,\n    OP_1SUB: 0x8c,\n    OP_2MUL: 0x8d,\n    OP_2DIV: 0x8e,\n    OP_NEGATE: 0x8f,\n    OP_ABS: 0x90,\n    OP_NOT: 0x91,\n    OP_0NOTEQUAL: 0x92,\n    OP_ADD: 0x93,\n    OP_SUB: 0x94,\n    OP_MUL: 0x95,\n    OP_DIV: 0x96,\n    OP_MOD: 0x97,\n    OP_LSHIFT: 0x98,\n    OP_RSHIFT: 0x99,\n    OP_BOOLAND: 0x9a,\n    OP_BOOLOR: 0x9b,\n    OP_NUMEQUAL: 0x9c,\n    OP_NUMEQUALVERIFY: 0x9d,\n    OP_NUMNOTEQUAL: 0x9e,\n    OP_LESSTHAN: 0x9f,\n    OP_GREATERTHAN: 0xa0,\n    OP_LESSTHANOREQUAL: 0xa1,\n    OP_GREATERTHANOREQUAL: 0xa2,\n    OP_MIN: 0xa3,\n    OP_MAX: 0xa4,\n    OP_WITHIN: 0xa5,\n    // crypto\n    OP_RIPEMD160: 0xa6,\n    OP_SHA1: 0xa7,\n    OP_SHA256: 0xa8,\n    OP_HASH160: 0xa9,\n    OP_HASH256: 0xaa,\n    OP_CODESEPARATOR: 0xab,\n    OP_CHECKSIG: 0xac,\n    OP_CHECKSIGVERIFY: 0xad,\n    OP_CHECKMULTISIG: 0xae,\n    OP_CHECKMULTISIGVERIFY: 0xaf,\n    // expansion\n    OP_NOP1: 0xb0,\n    OP_NOP2: 0xb1,\n    OP_NOP3: 0xb2,\n    OP_NOP4: 0xb3,\n    OP_NOP5: 0xb4,\n    OP_NOP6: 0xb5,\n    OP_NOP7: 0xb6,\n    OP_NOP8: 0xb7,\n    OP_NOP9: 0xb8,\n    OP_NOP10: 0xb9,\n    OP_NOP11: 0xba,\n    OP_NOP12: 0xbb,\n    OP_NOP13: 0xbc,\n    OP_NOP14: 0xbd,\n    OP_NOP15: 0xbe,\n    OP_NOP16: 0xbf,\n    OP_NOP17: 0xc0,\n    OP_NOP18: 0xc1,\n    OP_NOP19: 0xc2,\n    OP_NOP20: 0xc3,\n    OP_NOP21: 0xc4,\n    OP_NOP22: 0xc5,\n    OP_NOP23: 0xc6,\n    OP_NOP24: 0xc7,\n    OP_NOP25: 0xc8,\n    OP_NOP26: 0xc9,\n    OP_NOP27: 0xca,\n    OP_NOP28: 0xcb,\n    OP_NOP29: 0xcc,\n    OP_NOP30: 0xcd,\n    OP_NOP31: 0xce,\n    OP_NOP32: 0xcf,\n    OP_NOP33: 0xd0,\n    OP_NOP34: 0xd1,\n    OP_NOP35: 0xd2,\n    OP_NOP36: 0xd3,\n    OP_NOP37: 0xd4,\n    OP_NOP38: 0xd5,\n    OP_NOP39: 0xd6,\n    OP_NOP40: 0xd7,\n    OP_NOP41: 0xd8,\n    OP_NOP42: 0xd9,\n    OP_NOP43: 0xda,\n    OP_NOP44: 0xdb,\n    OP_NOP45: 0xdc,\n    OP_NOP46: 0xdd,\n    OP_NOP47: 0xde,\n    OP_NOP48: 0xdf,\n    OP_NOP49: 0xe0,\n    OP_NOP50: 0xe1,\n    OP_NOP51: 0xe2,\n    OP_NOP52: 0xe3,\n    OP_NOP53: 0xe4,\n    OP_NOP54: 0xe5,\n    OP_NOP55: 0xe6,\n    OP_NOP56: 0xe7,\n    OP_NOP57: 0xe8,\n    OP_NOP58: 0xe9,\n    OP_NOP59: 0xea,\n    OP_NOP60: 0xeb,\n    OP_NOP61: 0xec,\n    OP_NOP62: 0xed,\n    OP_NOP63: 0xee,\n    OP_NOP64: 0xef,\n    OP_NOP65: 0xf0,\n    OP_NOP66: 0xf1,\n    OP_NOP67: 0xf2,\n    OP_NOP68: 0xf3,\n    OP_NOP69: 0xf4,\n    OP_NOP70: 0xf5,\n    OP_NOP71: 0xf6,\n    OP_NOP72: 0xf7,\n    OP_NOP73: 0xf8,\n    OP_NOP77: 0xfc,\n    // template matching params\n    OP_SMALLDATA: 0xf9,\n    OP_SMALLINTEGER: 0xfa,\n    OP_PUBKEYS: 0xfb,\n    OP_PUBKEYHASH: 0xfd,\n    OP_PUBKEY: 0xfe,\n    OP_INVALIDOPCODE: 0xff\n};\nfor (const name in OP) {\n    OP[OP[name]] = name;\n}\nexport default OP;\n//# sourceMappingURL=OP.js.map","import OP from './OP.js';\nimport { encode, toHex, Reader, Writer, toArray } from '../primitives/utils.js';\nimport BigNumber from '../primitives/BigNumber.js';\n/**\n * The Script class represents a script in a Bitcoin SV transaction,\n * encapsulating the functionality to construct, parse, and serialize\n * scripts used in both locking (output) and unlocking (input) scripts.\n *\n * @property {ScriptChunk[]} chunks - An array of script chunks that make up the script.\n */\nexport default class Script {\n    chunks;\n    /**\n     * @method fromASM\n     * Static method to construct a Script instance from an ASM (Assembly) formatted string.\n     * @param asm - The script in ASM string format.\n     * @returns A new Script instance.\n     * @example\n     * const script = Script.fromASM(\"OP_DUP OP_HASH160 abcd... OP_EQUALVERIFY OP_CHECKSIG\")\n     */\n    static fromASM(asm) {\n        const chunks = [];\n        const tokens = asm.split(' ');\n        let i = 0;\n        while (i < tokens.length) {\n            const token = tokens[i];\n            let opCode;\n            let opCodeNum = 0;\n            if (token.startsWith('OP_') && typeof OP[token] !== 'undefined') {\n                opCode = token;\n                opCodeNum = OP[token];\n            }\n            // we start with two special cases, 0 and -1, which are handled specially in\n            // toASM. see _chunkToString.\n            if (token === '0') {\n                opCodeNum = 0;\n                chunks.push({\n                    op: opCodeNum\n                });\n                i = i + 1;\n            }\n            else if (token === '-1') {\n                opCodeNum = OP.OP_1NEGATE;\n                chunks.push({\n                    op: opCodeNum\n                });\n                i = i + 1;\n            }\n            else if (opCode === undefined) {\n                let hex = tokens[i];\n                if (hex.length % 2 !== 0) {\n                    hex = '0' + hex;\n                }\n                const arr = toArray(hex, 'hex');\n                if (encode(arr, 'hex') !== hex) {\n                    throw new Error('invalid hex string in script');\n                }\n                const len = arr.length;\n                if (len >= 0 && len < OP.OP_PUSHDATA1) {\n                    opCodeNum = len;\n                }\n                else if (len < Math.pow(2, 8)) {\n                    opCodeNum = OP.OP_PUSHDATA1;\n                }\n                else if (len < Math.pow(2, 16)) {\n                    opCodeNum = OP.OP_PUSHDATA2;\n                }\n                else if (len < Math.pow(2, 32)) {\n                    opCodeNum = OP.OP_PUSHDATA4;\n                }\n                chunks.push({\n                    data: arr,\n                    op: opCodeNum\n                });\n                i = i + 1;\n            }\n            else if (opCodeNum === OP.OP_PUSHDATA1 ||\n                opCodeNum === OP.OP_PUSHDATA2 ||\n                opCodeNum === OP.OP_PUSHDATA4) {\n                chunks.push({\n                    data: toArray(tokens[i + 2], 'hex'),\n                    op: opCodeNum\n                });\n                i = i + 3;\n            }\n            else {\n                chunks.push({\n                    op: opCodeNum\n                });\n                i = i + 1;\n            }\n        }\n        return new Script(chunks);\n    }\n    /**\n     * @method fromHex\n     * Static method to construct a Script instance from a hexadecimal string.\n     * @param hex - The script in hexadecimal format.\n     * @returns A new Script instance.\n     * @example\n     * const script = Script.fromHex(\"76a9...\");\n     */\n    static fromHex(hex) {\n        if (hex.length === 0)\n            return Script.fromBinary([]);\n        if (hex.length % 2 !== 0) {\n            throw new Error('There is an uneven number of characters in the string which suggests it is not hex encoded.');\n        }\n        if (!/^[0-9a-fA-F]+$/.test(hex)) {\n            throw new Error('Some elements in this string are not hex encoded.');\n        }\n        return Script.fromBinary(toArray(hex, 'hex'));\n    }\n    /**\n     * @method fromBinary\n     * Static method to construct a Script instance from a binary array.\n     * @param bin - The script in binary array format.\n     * @returns A new Script instance.\n     * @example\n     * const script = Script.fromBinary([0x76, 0xa9, ...])\n     */\n    static fromBinary(bin) {\n        bin = [...bin];\n        const chunks = [];\n        let inConditionalBlock = 0;\n        const br = new Reader(bin);\n        while (!br.eof()) {\n            const op = br.readUInt8();\n            // if OP_RETURN and not in a conditional block, do not parse the rest of the data,\n            // rather just return the last chunk as data without prefixing with data length.\n            if (op === OP.OP_RETURN && inConditionalBlock === 0) {\n                chunks.push({\n                    op,\n                    data: br.read()\n                });\n                break;\n            }\n            if (op === OP.OP_IF || op === OP.OP_NOTIF || op === OP.OP_VERIF || op === OP.OP_VERNOTIF) {\n                inConditionalBlock++;\n            }\n            else if (op === OP.OP_ENDIF) {\n                inConditionalBlock--;\n            }\n            let len = 0;\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            let data = [];\n            if (op > 0 && op < OP.OP_PUSHDATA1) {\n                len = op;\n                chunks.push({\n                    data: br.read(len),\n                    op\n                });\n            }\n            else if (op === OP.OP_PUSHDATA1) {\n                try {\n                    len = br.readUInt8();\n                    data = br.read(len);\n                }\n                catch {\n                    br.read();\n                }\n                chunks.push({\n                    data,\n                    op\n                });\n            }\n            else if (op === OP.OP_PUSHDATA2) {\n                try {\n                    len = br.readUInt16LE();\n                    data = br.read(len);\n                }\n                catch {\n                    br.read();\n                }\n                chunks.push({\n                    data,\n                    op\n                });\n            }\n            else if (op === OP.OP_PUSHDATA4) {\n                try {\n                    len = br.readUInt32LE();\n                    data = br.read(len);\n                }\n                catch {\n                    br.read();\n                }\n                chunks.push({\n                    data,\n                    op\n                });\n            }\n            else {\n                chunks.push({\n                    op\n                });\n            }\n        }\n        return new Script(chunks);\n    }\n    /**\n     * @constructor\n     * Constructs a new Script object.\n     * @param chunks=[] - An array of script chunks to directly initialize the script.\n     */\n    constructor(chunks = []) {\n        this.chunks = chunks;\n    }\n    /**\n     * @method toASM\n     * Serializes the script to an ASM formatted string.\n     * @returns The script in ASM string format.\n     */\n    toASM() {\n        let str = '';\n        for (let i = 0; i < this.chunks.length; i++) {\n            const chunk = this.chunks[i];\n            str += this._chunkToString(chunk);\n        }\n        return str.slice(1);\n    }\n    /**\n     * @method toHex\n     * Serializes the script to a hexadecimal string.\n     * @returns The script in hexadecimal format.\n     */\n    toHex() {\n        return encode(this.toBinary(), 'hex');\n    }\n    /**\n     * @method toBinary\n     * Serializes the script to a binary array.\n     * @returns The script in binary array format.\n     */\n    toBinary() {\n        const writer = new Writer();\n        for (let i = 0; i < this.chunks.length; i++) {\n            const chunk = this.chunks[i];\n            const op = chunk.op;\n            writer.writeUInt8(op);\n            if (op === OP.OP_RETURN && chunk.data != null) { // special case for unformatted data\n                writer.write(chunk.data);\n                break;\n            }\n            else if (chunk.data != null) {\n                if (op < OP.OP_PUSHDATA1) {\n                    writer.write(chunk.data);\n                }\n                else if (op === OP.OP_PUSHDATA1) {\n                    writer.writeUInt8(chunk.data.length);\n                    writer.write(chunk.data);\n                }\n                else if (op === OP.OP_PUSHDATA2) {\n                    writer.writeUInt16LE(chunk.data.length);\n                    writer.write(chunk.data);\n                }\n                else if (op === OP.OP_PUSHDATA4) {\n                    writer.writeUInt32LE(chunk.data.length);\n                    writer.write(chunk.data);\n                }\n            }\n        }\n        return writer.toArray();\n    }\n    /**\n     * @method writeScript\n     * Appends another script to this script.\n     * @param script - The script to append.\n     * @returns This script instance for chaining.\n     */\n    writeScript(script) {\n        this.chunks = this.chunks.concat(script.chunks);\n        return this;\n    }\n    /**\n     * @method writeOpCode\n     * Appends an opcode to the script.\n     * @param op - The opcode to append.\n     * @returns This script instance for chaining.\n     */\n    writeOpCode(op) {\n        this.chunks.push({ op });\n        return this;\n    }\n    /**\n     * @method setChunkOpCode\n     * Sets the opcode of a specific chunk in the script.\n     * @param i - The index of the chunk.\n     * @param op - The opcode to set.\n     * @returns This script instance for chaining.\n     */\n    setChunkOpCode(i, op) {\n        this.chunks[i] = { op };\n        return this;\n    }\n    /**\n     * @method writeBn\n     * Appends a BigNumber to the script as an opcode.\n     * @param bn - The BigNumber to append.\n     * @returns This script instance for chaining.\n     */\n    writeBn(bn) {\n        if (bn.cmpn(0) === OP.OP_0) {\n            this.chunks.push({\n                op: OP.OP_0\n            });\n        }\n        else if (bn.cmpn(-1) === 0) {\n            this.chunks.push({\n                op: OP.OP_1NEGATE\n            });\n        }\n        else if (bn.cmpn(1) >= 0 && bn.cmpn(16) <= 0) {\n            // see OP_1 - OP_16\n            this.chunks.push({\n                op: bn.toNumber() + OP.OP_1 - 1\n            });\n        }\n        else {\n            const buf = bn.toSm('little');\n            this.writeBin(buf);\n        }\n        return this;\n    }\n    /**\n     * @method writeBin\n     * Appends binary data to the script, determining the appropriate opcode based on length.\n     * @param bin - The binary data to append.\n     * @returns This script instance for chaining.\n     * @throws {Error} Throws an error if the data is too large to be pushed.\n     */\n    writeBin(bin) {\n        let op;\n        const data = bin.length > 0 ? bin : undefined;\n        if (bin.length > 0 && bin.length < OP.OP_PUSHDATA1) {\n            op = bin.length;\n        }\n        else if (bin.length === 0) {\n            op = OP.OP_0;\n        }\n        else if (bin.length < Math.pow(2, 8)) {\n            op = OP.OP_PUSHDATA1;\n        }\n        else if (bin.length < Math.pow(2, 16)) {\n            op = OP.OP_PUSHDATA2;\n        }\n        else if (bin.length < Math.pow(2, 32)) {\n            op = OP.OP_PUSHDATA4;\n        }\n        else {\n            throw new Error(\"You can't push that much data\");\n        }\n        this.chunks.push({\n            data,\n            op\n        });\n        return this;\n    }\n    /**\n     * @method writeNumber\n     * Appends a number to the script.\n     * @param num - The number to append.\n     * @returns This script instance for chaining.\n     */\n    writeNumber(num) {\n        this.writeBn(new BigNumber(num));\n        return this;\n    }\n    /**\n     * @method removeCodeseparators\n     * Removes all OP_CODESEPARATOR opcodes from the script.\n     * @returns This script instance for chaining.\n     */\n    removeCodeseparators() {\n        const chunks = [];\n        for (let i = 0; i < this.chunks.length; i++) {\n            if (this.chunks[i].op !== OP.OP_CODESEPARATOR) {\n                chunks.push(this.chunks[i]);\n            }\n        }\n        this.chunks = chunks;\n        return this;\n    }\n    /**\n     * Deletes the given item wherever it appears in the current script.\n     *\n     * @param script - The script containing the item to delete from the current script.\n     *\n     * @returns This script instance for chaining.\n     */\n    findAndDelete(script) {\n        const buf = script.toHex();\n        for (let i = 0; i < this.chunks.length; i++) {\n            const script2 = new Script([this.chunks[i]]);\n            const buf2 = script2.toHex();\n            if (buf === buf2) {\n                this.chunks.splice(i, 1);\n            }\n        }\n        return this;\n    }\n    /**\n     * @method isPushOnly\n     * Checks if the script contains only push data operations.\n     * @returns True if the script is push-only, otherwise false.\n     */\n    isPushOnly() {\n        for (let i = 0; i < this.chunks.length; i++) {\n            const chunk = this.chunks[i];\n            const opCodeNum = chunk.op;\n            if (opCodeNum > OP.OP_16) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * @method isLockingScript\n     * Determines if the script is a locking script.\n     * @returns True if the script is a locking script, otherwise false.\n     */\n    isLockingScript() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * @method isUnlockingScript\n     * Determines if the script is an unlocking script.\n     * @returns True if the script is an unlocking script, otherwise false.\n     */\n    isUnlockingScript() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * @private\n     * @method _chunkToString\n     * Converts a script chunk to its string representation.\n     * @param chunk - The script chunk.\n     * @returns The string representation of the chunk.\n     */\n    _chunkToString(chunk) {\n        const op = chunk.op;\n        let str = '';\n        if (typeof chunk.data === 'undefined') {\n            const val = OP[op];\n            str = `${str} ${val}`;\n        }\n        else {\n            str = `${str} ${toHex(chunk.data)}`;\n        }\n        return str;\n    }\n}\n//# sourceMappingURL=Script.js.map","import Script from './Script.js';\n/**\n * The LockingScript class represents a locking script in a Bitcoin SV transaction.\n * It extends the Script class and is used specifically for output scripts that lock funds.\n *\n * Inherits all properties and methods from the Script class.\n *\n * @extends {Script}\n * @see {@link Script} for more information on Script.\n */\nexport default class LockingScript extends Script {\n    /**\n     * @method isLockingScript\n     * Determines if the script is a locking script.\n     * @returns {boolean} Always returns true for a LockingScript instance.\n     */\n    isLockingScript() {\n        return true;\n    }\n    /**\n     * @method isUnlockingScript\n     * Determines if the script is an unlocking script.\n     * @returns {boolean} Always returns false for a LockingScript instance.\n     */\n    isUnlockingScript() {\n        return false;\n    }\n}\n//# sourceMappingURL=LockingScript.js.map","import Script from './Script.js';\n/**\n * The UnlockingScript class represents an unlocking script in a Bitcoin SV transaction.\n * It extends the Script class and is used specifically for input scripts that unlock funds.\n *\n * Inherits all properties and methods from the Script class.\n *\n * @extends {Script}\n * @see {@link Script} for more information on Script.\n */\nexport default class UnlockingScript extends Script {\n    /**\n     * @method isLockingScript\n     * Determines if the script is a locking script.\n     * @returns {boolean} Always returns false for an UnlockingScript instance.\n     */\n    isLockingScript() {\n        return false;\n    }\n    /**\n     * @method isUnlockingScript\n     * Determines if the script is an unlocking script.\n     * @returns {boolean} Always returns true for an UnlockingScript instance.\n     */\n    isUnlockingScript() {\n        return true;\n    }\n}\n//# sourceMappingURL=UnlockingScript.js.map","import { toHex } from '../primitives/utils.js';\nexport default class ScriptEvaluationError extends Error {\n    txid;\n    outputIndex;\n    context;\n    programCounter;\n    stackState;\n    altStackState;\n    ifStackState;\n    stackMem;\n    altStackMem;\n    constructor(params) {\n        const stackHex = params.stackState.map(s => s != null && typeof s.length !== 'undefined' ? toHex(s) : (s === null || s === undefined ? 'null/undef' : 'INVALID_STACK_ITEM')).join(', ');\n        const altStackHex = params.altStackState.map(s => s != null && typeof s.length !== 'undefined' ? toHex(s) : (s === null || s === undefined ? 'null/undef' : 'INVALID_STACK_ITEM')).join(', ');\n        const pcInfo = `Context: ${params.context}, PC: ${params.programCounter}`;\n        const stackInfo = `Stack: [${stackHex}] (len: ${params.stackState.length}, mem: ${params.stackMem})`;\n        const altStackInfo = `AltStack: [${altStackHex}] (len: ${params.altStackState.length}, mem: ${params.altStackMem})`;\n        const ifStackInfo = `IfStack: [${params.ifStackState.join(', ')}]`;\n        const fullMessage = `Script evaluation error: ${params.message}\\nTXID: ${params.txid}, OutputIdx: ${params.outputIndex}\\n${pcInfo}\\n${stackInfo}\\n${altStackInfo}\\n${ifStackInfo}`;\n        super(fullMessage);\n        this.name = this.constructor.name;\n        this.txid = params.txid;\n        this.outputIndex = params.outputIndex;\n        this.context = params.context;\n        this.programCounter = params.programCounter;\n        this.stackState = params.stackState.map(s => s.slice());\n        this.altStackState = params.altStackState.map(s => s.slice());\n        this.ifStackState = params.ifStackState.slice();\n        this.stackMem = params.stackMem;\n        this.altStackMem = params.altStackMem;\n    }\n}\n//# sourceMappingURL=ScriptEvaluationError.js.map","import Script from './Script.js';\nimport BigNumber from '../primitives/BigNumber.js';\nimport OP from './OP.js';\nimport { minimallyEncode } from '../primitives/utils.js';\nimport ScriptEvaluationError from './ScriptEvaluationError.js';\nimport * as Hash from '../primitives/Hash.js';\nimport TransactionSignature from '../primitives/TransactionSignature.js';\nimport PublicKey from '../primitives/PublicKey.js';\nimport { verify } from '../primitives/ECDSA.js';\n// These constants control the current behavior of the interpreter.\nconst maxScriptElementSize = 1024 * 1024 * 1024;\nconst maxMultisigKeyCount = Math.pow(2, 31) - 1;\nconst requireMinimalPush = true;\nconst requirePushOnlyUnlockingScripts = true;\nconst requireLowSSignatures = true;\nconst requireCleanStack = true;\n// --- Optimization: Pre-computed script numbers ---\nconst SCRIPTNUM_NEG_1 = Object.freeze(new BigNumber(-1).toScriptNum());\nconst SCRIPTNUMS_0_TO_16 = Object.freeze(Array.from({ length: 17 }, (_, i) => Object.freeze(new BigNumber(i).toScriptNum())));\n// --- Helper functions ---\nfunction compareNumberArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nfunction isMinimallyEncodedHelper(buf, maxNumSize = Number.MAX_SAFE_INTEGER) {\n    if (buf.length > maxNumSize) {\n        return false;\n    }\n    if (buf.length > 0) {\n        if ((buf[buf.length - 1] & 0x7f) === 0) {\n            if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction isChecksigFormatHelper(buf) {\n    // This is a simplified check. The full DER check is more complex and typically\n    // done by TransactionSignature.fromChecksigFormat which can throw.\n    // This helper is mostly for early bailout or non-throwing checks if needed.\n    if (buf.length < 9 || buf.length > 73)\n        return false;\n    if (buf[0] !== 0x30)\n        return false; // DER SEQUENCE\n    if (buf[1] !== buf.length - 3)\n        return false; // Total length (excluding type and length byte for sequence, and hash type)\n    const rMarker = buf[2];\n    const rLen = buf[3];\n    if (rMarker !== 0x02)\n        return false; // DER INTEGER\n    if (rLen === 0)\n        return false; // R length is zero\n    if (5 + rLen >= buf.length)\n        return false; // S length misplaced or R too long\n    const sMarkerOffset = 4 + rLen;\n    const sMarker = buf[sMarkerOffset];\n    const sLen = buf[sMarkerOffset + 1];\n    if (sMarker !== 0x02)\n        return false; // DER INTEGER\n    if (sLen === 0)\n        return false; // S length is zero\n    // Check R value negative or excessively padded\n    if ((buf[4] & 0x80) !== 0)\n        return false; // R value negative\n    if (rLen > 1 && buf[4] === 0x00 && (buf[5] & 0x80) === 0)\n        return false; // R value excessively padded\n    // Check S value negative or excessively padded\n    const sValueOffset = sMarkerOffset + 2;\n    if ((buf[sValueOffset] & 0x80) !== 0)\n        return false; // S value negative\n    if (sLen > 1 && buf[sValueOffset] === 0x00 && (buf[sValueOffset + 1] & 0x80) === 0)\n        return false; // S value excessively padded\n    if (rLen + sLen + 7 !== buf.length)\n        return false; // Final length check including hash type\n    return true;\n}\nfunction isOpcodeDisabledHelper(op) {\n    return (op === OP.OP_2MUL ||\n        op === OP.OP_2DIV ||\n        op === OP.OP_VERIF ||\n        op === OP.OP_VERNOTIF ||\n        op === OP.OP_VER);\n}\nfunction isChunkMinimalPushHelper(chunk) {\n    const data = chunk.data;\n    const op = chunk.op;\n    if (!Array.isArray(data))\n        return true;\n    if (data.length === 0)\n        return op === OP.OP_0;\n    if (data.length === 1 && data[0] >= 1 && data[0] <= 16)\n        return op === OP.OP_1 + (data[0] - 1);\n    if (data.length === 1 && data[0] === 0x81)\n        return op === OP.OP_1NEGATE;\n    if (data.length <= 75)\n        return op === data.length;\n    if (data.length <= 255)\n        return op === OP.OP_PUSHDATA1;\n    if (data.length <= 65535)\n        return op === OP.OP_PUSHDATA2;\n    return true;\n}\n/**\n * The Spend class represents a spend action within a Bitcoin SV transaction.\n * It encapsulates all the necessary data required for spending a UTXO (Unspent Transaction Output)\n * and includes details about the source transaction, output, and the spending transaction itself.\n *\n * @property {string} sourceTXID - The transaction ID of the source UTXO.\n * @property {number} sourceOutputIndex - The index of the output in the source transaction.\n * @property {BigNumber} sourceSatoshis - The amount of satoshis in the source UTXO.\n * @property {LockingScript} lockingScript - The locking script associated with the UTXO.\n * @property {number} transactionVersion - The version of the current transaction.\n * @property {Array<{ sourceTXID: string, sourceOutputIndex: number, sequence: number }>} otherInputs -\n *           An array of other inputs in the transaction, each with a txid, outputIndex, and sequence number.\n * @property {Array<{ satoshis: BigNumber, lockingScript: LockingScript }>} outputs -\n *           An array of outputs of the current transaction, including the satoshi value and locking script for each.\n * @property {number} inputIndex - The index of this input in the current transaction.\n * @property {UnlockingScript} unlockingScript - The unlocking script that unlocks the UTXO for spending.\n * @property {number} inputSequence - The sequence number of this input.\n * @property {number} lockTime - The lock time of the transaction.\n */\nexport default class Spend {\n    sourceTXID;\n    sourceOutputIndex;\n    sourceSatoshis;\n    lockingScript;\n    transactionVersion;\n    otherInputs;\n    outputs;\n    inputIndex;\n    unlockingScript;\n    inputSequence;\n    lockTime;\n    context;\n    programCounter;\n    lastCodeSeparator;\n    stack;\n    altStack;\n    ifStack;\n    memoryLimit;\n    stackMem;\n    altStackMem;\n    /**\n     * @constructor\n     * Constructs the Spend object with necessary transaction details.\n     * @param {string} params.sourceTXID - The transaction ID of the source UTXO.\n     * @param {number} params.sourceOutputIndex - The index of the output in the source transaction.\n     * @param {BigNumber} params.sourceSatoshis - The amount of satoshis in the source UTXO.\n     * @param {LockingScript} params.lockingScript - The locking script associated with the UTXO.\n     * @param {number} params.transactionVersion - The version of the current transaction.\n     * @param {Array<{ sourceTXID: string, sourceOutputIndex: number, sequence: number }>} params.otherInputs -\n     *        An array of other inputs in the transaction.\n     * @param {Array<{ satoshis: BigNumber, lockingScript: LockingScript }>} params.outputs -\n     *        The outputs of the current transaction.\n     * @param {number} params.inputIndex - The index of this input in the current transaction.\n     * @param {UnlockingScript} params.unlockingScript - The unlocking script for this spend.\n     * @param {number} params.inputSequence - The sequence number of this input.\n     * @param {number} params.lockTime - The lock time of the transaction.\n     *\n     * @example\n     * const spend = new Spend({\n     *   sourceTXID: \"abcd1234\", // sourceTXID\n     *   sourceOutputIndex: 0, // sourceOutputIndex\n     *   sourceSatoshis: new BigNumber(1000), // sourceSatoshis\n     *   lockingScript: LockingScript.fromASM(\"OP_DUP OP_HASH160 abcd1234... OP_EQUALVERIFY OP_CHECKSIG\"),\n     *   transactionVersion: 1, // transactionVersion\n     *   otherInputs: [{ sourceTXID: \"abcd1234\", sourceOutputIndex: 1, sequence: 0xffffffff }], // otherInputs\n     *   outputs: [{ satoshis: new BigNumber(500), lockingScript: LockingScript.fromASM(\"OP_DUP...\") }], // outputs\n     *   inputIndex: 0, // inputIndex\n     *   unlockingScript: UnlockingScript.fromASM(\"3045... 02ab...\"),\n     *   inputSequence: 0xffffffff // inputSequence\n     *   memoryLimit: 100000 // memoryLimit\n     * });\n     */\n    constructor(params) {\n        this.sourceTXID = params.sourceTXID;\n        this.sourceOutputIndex = params.sourceOutputIndex;\n        this.sourceSatoshis = params.sourceSatoshis;\n        this.lockingScript = params.lockingScript;\n        this.transactionVersion = params.transactionVersion;\n        this.otherInputs = params.otherInputs;\n        this.outputs = params.outputs;\n        this.inputIndex = params.inputIndex;\n        this.unlockingScript = params.unlockingScript;\n        this.inputSequence = params.inputSequence;\n        this.lockTime = params.lockTime;\n        this.memoryLimit = params.memoryLimit ?? 32000000;\n        this.stack = [];\n        this.altStack = [];\n        this.ifStack = [];\n        this.stackMem = 0;\n        this.altStackMem = 0;\n        this.reset();\n    }\n    reset() {\n        this.context = 'UnlockingScript';\n        this.programCounter = 0;\n        this.lastCodeSeparator = null;\n        this.stack = [];\n        this.altStack = [];\n        this.ifStack = [];\n        this.stackMem = 0;\n        this.altStackMem = 0;\n    }\n    ensureStackMem(additional) {\n        if (this.stackMem + additional > this.memoryLimit) {\n            this.scriptEvaluationError('Stack memory usage has exceeded ' + String(this.memoryLimit) + ' bytes');\n        }\n    }\n    ensureAltStackMem(additional) {\n        if (this.altStackMem + additional > this.memoryLimit) {\n            this.scriptEvaluationError('Alt stack memory usage has exceeded ' + String(this.memoryLimit) + ' bytes');\n        }\n    }\n    pushStack(item) {\n        this.ensureStackMem(item.length);\n        this.stack.push(item);\n        this.stackMem += item.length;\n    }\n    pushStackCopy(item) {\n        this.ensureStackMem(item.length);\n        const copy = item.slice();\n        this.stack.push(copy);\n        this.stackMem += copy.length;\n    }\n    popStack() {\n        if (this.stack.length === 0) {\n            this.scriptEvaluationError('Attempted to pop from an empty stack.');\n        }\n        const item = this.stack.pop();\n        this.stackMem -= item.length;\n        return item;\n    }\n    stackTop(index = -1) {\n        // index = -1 for top, -2 for second top, etc.\n        // stack.length + index provides 0-based index from start\n        if (this.stack.length === 0 || this.stack.length < Math.abs(index) || (index >= 0 && index >= this.stack.length)) {\n            this.scriptEvaluationError(`Stack underflow accessing element at index ${index}. Stack length is ${this.stack.length}.`);\n        }\n        return this.stack[this.stack.length + index];\n    }\n    pushAltStack(item) {\n        this.ensureAltStackMem(item.length);\n        this.altStack.push(item);\n        this.altStackMem += item.length;\n    }\n    popAltStack() {\n        if (this.altStack.length === 0) {\n            this.scriptEvaluationError('Attempted to pop from an empty alt stack.');\n        }\n        const item = this.altStack.pop();\n        this.altStackMem -= item.length;\n        return item;\n    }\n    checkSignatureEncoding(buf) {\n        if (buf.length === 0)\n            return true;\n        if (!isChecksigFormatHelper(buf)) {\n            this.scriptEvaluationError('The signature format is invalid.'); // Generic message like original\n            return false;\n        }\n        try {\n            const sig = TransactionSignature.fromChecksigFormat(buf); // This can throw for stricter DER rules\n            if (requireLowSSignatures && !sig.hasLowS()) {\n                this.scriptEvaluationError('The signature must have a low S value.');\n                return false;\n            }\n            if ((sig.scope & TransactionSignature.SIGHASH_FORKID) === 0) {\n                this.scriptEvaluationError('The signature must use SIGHASH_FORKID.');\n                return false;\n            }\n        }\n        catch (e) {\n            this.scriptEvaluationError('The signature format is invalid.');\n            return false;\n        }\n        return true;\n    }\n    checkPublicKeyEncoding(buf) {\n        if (buf.length === 0) {\n            this.scriptEvaluationError('Public key is empty.');\n            return false;\n        }\n        if (buf.length < 33) {\n            this.scriptEvaluationError('The public key is too short, it must be at least 33 bytes.');\n            return false;\n        }\n        if (buf[0] === 0x04) {\n            if (buf.length !== 65) {\n                this.scriptEvaluationError('The non-compressed public key must be 65 bytes.');\n                return false;\n            }\n        }\n        else if (buf[0] === 0x02 || buf[0] === 0x03) {\n            if (buf.length !== 33) {\n                this.scriptEvaluationError('The compressed public key must be 33 bytes.');\n                return false;\n            }\n        }\n        else {\n            this.scriptEvaluationError('The public key is in an unknown format.');\n            return false;\n        }\n        try {\n            PublicKey.fromDER(buf); // This can throw for stricter DER rules\n        }\n        catch (e) {\n            this.scriptEvaluationError('The public key is in an unknown format.');\n            return false;\n        }\n        return true;\n    }\n    verifySignature(sig, pubkey, subscript) {\n        const preimage = TransactionSignature.format({\n            sourceTXID: this.sourceTXID,\n            sourceOutputIndex: this.sourceOutputIndex,\n            sourceSatoshis: this.sourceSatoshis,\n            transactionVersion: this.transactionVersion,\n            otherInputs: this.otherInputs,\n            outputs: this.outputs,\n            inputIndex: this.inputIndex,\n            subscript,\n            inputSequence: this.inputSequence,\n            lockTime: this.lockTime,\n            scope: sig.scope\n        });\n        const hash = new BigNumber(Hash.hash256(preimage));\n        return verify(hash, sig, pubkey);\n    }\n    step() {\n        if (this.stackMem > this.memoryLimit) {\n            this.scriptEvaluationError('Stack memory usage has exceeded ' + String(this.memoryLimit) + ' bytes');\n            return false; // Error thrown\n        }\n        if (this.altStackMem > this.memoryLimit) {\n            this.scriptEvaluationError('Alt stack memory usage has exceeded ' + String(this.memoryLimit) + ' bytes');\n            return false; // Error thrown\n        }\n        if (this.context === 'UnlockingScript' &&\n            this.programCounter >= this.unlockingScript.chunks.length) {\n            this.context = 'LockingScript';\n            this.programCounter = 0;\n        }\n        const currentScript = this.context === 'UnlockingScript' ? this.unlockingScript : this.lockingScript;\n        if (this.programCounter >= currentScript.chunks.length) {\n            return false;\n        }\n        const operation = currentScript.chunks[this.programCounter];\n        const currentOpcode = operation.op;\n        if (typeof currentOpcode === 'undefined') {\n            this.scriptEvaluationError(`Missing opcode in ${this.context} at pc=${this.programCounter}.`); // Error thrown\n        }\n        if (Array.isArray(operation.data) && operation.data.length > maxScriptElementSize) {\n            this.scriptEvaluationError(`Data push > ${maxScriptElementSize} bytes (pc=${this.programCounter}).`); // Error thrown\n        }\n        const isScriptExecuting = !this.ifStack.includes(false);\n        if (isScriptExecuting && isOpcodeDisabledHelper(currentOpcode)) {\n            this.scriptEvaluationError(`This opcode is currently disabled. (Opcode: ${OP[currentOpcode]}, PC: ${this.programCounter})`); // Error thrown\n        }\n        if (isScriptExecuting && currentOpcode >= 0 && currentOpcode <= OP.OP_PUSHDATA4) {\n            if (requireMinimalPush && !isChunkMinimalPushHelper(operation)) {\n                this.scriptEvaluationError(`This data is not minimally-encoded. (PC: ${this.programCounter})`); // Error thrown\n            }\n            this.pushStack(Array.isArray(operation.data) ? operation.data : []);\n        }\n        else if (isScriptExecuting || (currentOpcode >= OP.OP_IF && currentOpcode <= OP.OP_ENDIF)) {\n            let buf, buf1, buf2, buf3;\n            let x1, x2, x3;\n            let bn, bn1, bn2, bn3;\n            let n, size, fValue, fSuccess, subscript;\n            let bufSig, bufPubkey;\n            let sig, pubkey;\n            let i, ikey, isig, nKeysCount, nSigsCount, fOk;\n            switch (currentOpcode) {\n                case OP.OP_1NEGATE:\n                    this.pushStackCopy(SCRIPTNUM_NEG_1);\n                    break;\n                case OP.OP_0:\n                    this.pushStackCopy(SCRIPTNUMS_0_TO_16[0]);\n                    break;\n                case OP.OP_1:\n                case OP.OP_2:\n                case OP.OP_3:\n                case OP.OP_4:\n                case OP.OP_5:\n                case OP.OP_6:\n                case OP.OP_7:\n                case OP.OP_8:\n                case OP.OP_9:\n                case OP.OP_10:\n                case OP.OP_11:\n                case OP.OP_12:\n                case OP.OP_13:\n                case OP.OP_14:\n                case OP.OP_15:\n                case OP.OP_16:\n                    n = currentOpcode - (OP.OP_1 - 1);\n                    this.pushStackCopy(SCRIPTNUMS_0_TO_16[n]);\n                    break;\n                case OP.OP_NOP:\n                case OP.OP_NOP2: // Formerly CHECKLOCKTIMEVERIFY\n                case OP.OP_NOP3: // Formerly CHECKSEQUENCEVERIFY\n                case OP.OP_NOP1:\n                case OP.OP_NOP4:\n                case OP.OP_NOP5:\n                case OP.OP_NOP6:\n                case OP.OP_NOP7:\n                case OP.OP_NOP8:\n                case OP.OP_NOP9:\n                case OP.OP_NOP10:\n                /* falls through */\n                // eslint-disable-next-line no-fallthrough\n                // eslint-disable-next-line no-fallthrough\n                case OP.OP_NOP11:\n                case OP.OP_NOP12:\n                case OP.OP_NOP13:\n                case OP.OP_NOP14:\n                case OP.OP_NOP15:\n                case OP.OP_NOP16:\n                case OP.OP_NOP17:\n                case OP.OP_NOP18:\n                case OP.OP_NOP19:\n                case OP.OP_NOP20:\n                case OP.OP_NOP21:\n                case OP.OP_NOP22:\n                case OP.OP_NOP23:\n                case OP.OP_NOP24:\n                case OP.OP_NOP25:\n                case OP.OP_NOP26:\n                case OP.OP_NOP27:\n                case OP.OP_NOP28:\n                case OP.OP_NOP29:\n                case OP.OP_NOP30:\n                case OP.OP_NOP31:\n                case OP.OP_NOP32:\n                case OP.OP_NOP33:\n                case OP.OP_NOP34:\n                case OP.OP_NOP35:\n                case OP.OP_NOP36:\n                case OP.OP_NOP37:\n                case OP.OP_NOP38:\n                case OP.OP_NOP39:\n                case OP.OP_NOP40:\n                case OP.OP_NOP41:\n                case OP.OP_NOP42:\n                case OP.OP_NOP43:\n                case OP.OP_NOP44:\n                case OP.OP_NOP45:\n                case OP.OP_NOP46:\n                case OP.OP_NOP47:\n                case OP.OP_NOP48:\n                case OP.OP_NOP49:\n                case OP.OP_NOP50:\n                case OP.OP_NOP51:\n                case OP.OP_NOP52:\n                case OP.OP_NOP53:\n                case OP.OP_NOP54:\n                case OP.OP_NOP55:\n                case OP.OP_NOP56:\n                case OP.OP_NOP57:\n                case OP.OP_NOP58:\n                case OP.OP_NOP59:\n                case OP.OP_NOP60:\n                case OP.OP_NOP61:\n                case OP.OP_NOP62:\n                case OP.OP_NOP63:\n                case OP.OP_NOP64:\n                case OP.OP_NOP65:\n                case OP.OP_NOP66:\n                case OP.OP_NOP67:\n                case OP.OP_NOP68:\n                case OP.OP_NOP69:\n                case OP.OP_NOP70:\n                case OP.OP_NOP71:\n                case OP.OP_NOP72:\n                case OP.OP_NOP73:\n                case OP.OP_NOP77:\n                    break;\n                case OP.OP_IF:\n                case OP.OP_NOTIF:\n                    fValue = false;\n                    if (isScriptExecuting) {\n                        if (this.stack.length < 1)\n                            this.scriptEvaluationError('OP_IF and OP_NOTIF require at least one item on the stack when they are used!');\n                        buf = this.popStack();\n                        fValue = this.castToBool(buf);\n                        if (currentOpcode === OP.OP_NOTIF)\n                            fValue = !fValue;\n                    }\n                    this.ifStack.push(fValue);\n                    break;\n                case OP.OP_ELSE:\n                    if (this.ifStack.length === 0)\n                        this.scriptEvaluationError('OP_ELSE requires a preceeding OP_IF.');\n                    this.ifStack[this.ifStack.length - 1] = !this.ifStack[this.ifStack.length - 1];\n                    break;\n                case OP.OP_ENDIF:\n                    if (this.ifStack.length === 0)\n                        this.scriptEvaluationError('OP_ENDIF requires a preceeding OP_IF.');\n                    this.ifStack.pop();\n                    break;\n                case OP.OP_VERIFY:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_VERIFY requires at least one item to be on the stack.');\n                    buf1 = this.stackTop();\n                    fValue = this.castToBool(buf1);\n                    if (!fValue)\n                        this.scriptEvaluationError('OP_VERIFY requires the top stack value to be truthy.');\n                    this.popStack();\n                    break;\n                case OP.OP_RETURN:\n                    if (this.context === 'UnlockingScript')\n                        this.programCounter = this.unlockingScript.chunks.length;\n                    else\n                        this.programCounter = this.lockingScript.chunks.length;\n                    this.ifStack = [];\n                    this.programCounter--; // To counteract the final increment and ensure loop termination\n                    break;\n                case OP.OP_TOALTSTACK:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_TOALTSTACK requires at oeast one item to be on the stack.');\n                    this.pushAltStack(this.popStack());\n                    break;\n                case OP.OP_FROMALTSTACK:\n                    if (this.altStack.length < 1)\n                        this.scriptEvaluationError('OP_FROMALTSTACK requires at least one item to be on the stack.'); // \"stack\" here means altstack\n                    this.pushStack(this.popAltStack());\n                    break;\n                case OP.OP_2DROP:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_2DROP requires at least two items to be on the stack.');\n                    this.popStack();\n                    this.popStack();\n                    break;\n                case OP.OP_2DUP:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_2DUP requires at least two items to be on the stack.');\n                    buf1 = this.stackTop(-2);\n                    buf2 = this.stackTop(-1);\n                    this.pushStackCopy(buf1);\n                    this.pushStackCopy(buf2);\n                    break;\n                case OP.OP_3DUP:\n                    if (this.stack.length < 3)\n                        this.scriptEvaluationError('OP_3DUP requires at least three items to be on the stack.');\n                    buf1 = this.stackTop(-3);\n                    buf2 = this.stackTop(-2);\n                    buf3 = this.stackTop(-1);\n                    this.pushStackCopy(buf1);\n                    this.pushStackCopy(buf2);\n                    this.pushStackCopy(buf3);\n                    break;\n                case OP.OP_2OVER:\n                    if (this.stack.length < 4)\n                        this.scriptEvaluationError('OP_2OVER requires at least four items to be on the stack.');\n                    buf1 = this.stackTop(-4);\n                    buf2 = this.stackTop(-3);\n                    this.pushStackCopy(buf1);\n                    this.pushStackCopy(buf2);\n                    break;\n                case OP.OP_2ROT: {\n                    if (this.stack.length < 6)\n                        this.scriptEvaluationError('OP_2ROT requires at least six items to be on the stack.');\n                    const rot6 = this.popStack();\n                    const rot5 = this.popStack();\n                    const rot4 = this.popStack();\n                    const rot3 = this.popStack();\n                    const rot2 = this.popStack();\n                    const rot1 = this.popStack();\n                    this.pushStack(rot3);\n                    this.pushStack(rot4);\n                    this.pushStack(rot5);\n                    this.pushStack(rot6);\n                    this.pushStack(rot1);\n                    this.pushStack(rot2);\n                    break;\n                }\n                case OP.OP_2SWAP: {\n                    if (this.stack.length < 4)\n                        this.scriptEvaluationError('OP_2SWAP requires at least four items to be on the stack.');\n                    const swap4 = this.popStack();\n                    const swap3 = this.popStack();\n                    const swap2 = this.popStack();\n                    const swap1 = this.popStack();\n                    this.pushStack(swap3);\n                    this.pushStack(swap4);\n                    this.pushStack(swap1);\n                    this.pushStack(swap2);\n                    break;\n                }\n                case OP.OP_IFDUP:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_IFDUP requires at least one item to be on the stack.');\n                    buf1 = this.stackTop();\n                    if (this.castToBool(buf1)) {\n                        this.pushStackCopy(buf1);\n                    }\n                    break;\n                case OP.OP_DEPTH:\n                    this.pushStack(new BigNumber(this.stack.length).toScriptNum());\n                    break;\n                case OP.OP_DROP:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_DROP requires at least one item to be on the stack.');\n                    this.popStack();\n                    break;\n                case OP.OP_DUP:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_DUP requires at least one item to be on the stack.');\n                    this.pushStackCopy(this.stackTop());\n                    break;\n                case OP.OP_NIP:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_NIP requires at least two items to be on the stack.');\n                    buf2 = this.popStack();\n                    this.popStack();\n                    this.pushStack(buf2);\n                    break;\n                case OP.OP_OVER:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_OVER requires at least two items to be on the stack.');\n                    this.pushStackCopy(this.stackTop(-2));\n                    break;\n                case OP.OP_PICK:\n                case OP.OP_ROLL: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items to be on the stack.`);\n                    bn = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush);\n                    n = bn.toNumber();\n                    if (n < 0 || n >= this.stack.length) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires the top stack element to be 0 or a positive number less than the current size of the stack.`);\n                    }\n                    const itemToMoveOrCopy = this.stack[this.stack.length - 1 - n];\n                    if (currentOpcode === OP.OP_ROLL) {\n                        this.stack.splice(this.stack.length - 1 - n, 1);\n                        this.stackMem -= itemToMoveOrCopy.length;\n                        this.pushStack(itemToMoveOrCopy);\n                    }\n                    else { // OP_PICK\n                        this.pushStackCopy(itemToMoveOrCopy);\n                    }\n                    break;\n                }\n                case OP.OP_ROT:\n                    if (this.stack.length < 3)\n                        this.scriptEvaluationError('OP_ROT requires at least three items to be on the stack.');\n                    x3 = this.popStack();\n                    x2 = this.popStack();\n                    x1 = this.popStack();\n                    this.pushStack(x2);\n                    this.pushStack(x3);\n                    this.pushStack(x1);\n                    break;\n                case OP.OP_SWAP:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_SWAP requires at least two items to be on the stack.');\n                    x2 = this.popStack();\n                    x1 = this.popStack();\n                    this.pushStack(x2);\n                    this.pushStack(x1);\n                    break;\n                case OP.OP_TUCK:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_TUCK requires at least two items to be on the stack.');\n                    buf1 = this.stackTop(-1); // Top element (x2)\n                    // stack is [... rest, x1, x2]\n                    // We want [... rest, x2_copy, x1, x2]\n                    this.ensureStackMem(buf1.length);\n                    this.stack.splice(this.stack.length - 2, 0, buf1.slice()); // Insert copy of x2 before x1\n                    this.stackMem += buf1.length; // Account for the new copy\n                    break;\n                case OP.OP_SIZE:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_SIZE requires at least one item to be on the stack.');\n                    this.pushStack(new BigNumber(this.stackTop().length).toScriptNum());\n                    break;\n                case OP.OP_AND:\n                case OP.OP_OR:\n                case OP.OP_XOR: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items on the stack.`);\n                    buf2 = this.popStack();\n                    buf1 = this.popStack();\n                    if (buf1.length !== buf2.length)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires the top two stack items to be the same size.`);\n                    const resultBufBitwiseOp = new Array(buf1.length);\n                    for (let k = 0; k < buf1.length; k++) {\n                        if (currentOpcode === OP.OP_AND)\n                            resultBufBitwiseOp[k] = buf1[k] & buf2[k];\n                        else if (currentOpcode === OP.OP_OR)\n                            resultBufBitwiseOp[k] = buf1[k] | buf2[k];\n                        else\n                            resultBufBitwiseOp[k] = buf1[k] ^ buf2[k];\n                    }\n                    this.pushStack(resultBufBitwiseOp);\n                    break;\n                }\n                case OP.OP_INVERT: {\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_INVERT requires at least one item to be on the stack.');\n                    buf = this.popStack();\n                    const invertedBufOp = new Array(buf.length);\n                    for (let k = 0; k < buf.length; k++) {\n                        invertedBufOp[k] = (~buf[k]) & 0xff;\n                    }\n                    this.pushStack(invertedBufOp);\n                    break;\n                }\n                case OP.OP_LSHIFT:\n                case OP.OP_RSHIFT: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items to be on the stack.`);\n                    bn2 = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush); // n (shift amount)\n                    buf1 = this.popStack(); // value to shift\n                    n = bn2.toNumber();\n                    if (n < 0)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires the top item on the stack not to be negative.`);\n                    if (buf1.length === 0) {\n                        this.pushStack([]);\n                        break;\n                    }\n                    bn1 = new BigNumber(buf1);\n                    let shiftedBn;\n                    if (currentOpcode === OP.OP_LSHIFT)\n                        shiftedBn = bn1.ushln(n);\n                    else\n                        shiftedBn = bn1.ushrn(n);\n                    const shiftedArr = shiftedBn.toArray('le', buf1.length);\n                    this.pushStack(shiftedArr);\n                    break;\n                }\n                case OP.OP_EQUAL:\n                case OP.OP_EQUALVERIFY:\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items to be on the stack.`);\n                    buf2 = this.popStack();\n                    buf1 = this.popStack();\n                    fValue = compareNumberArrays(buf1, buf2);\n                    this.pushStack(fValue ? [1] : []);\n                    if (currentOpcode === OP.OP_EQUALVERIFY) {\n                        if (!fValue)\n                            this.scriptEvaluationError('OP_EQUALVERIFY requires the top two stack items to be equal.');\n                        this.popStack();\n                    }\n                    break;\n                case OP.OP_1ADD:\n                case OP.OP_1SUB:\n                case OP.OP_NEGATE:\n                case OP.OP_ABS:\n                case OP.OP_NOT:\n                case OP.OP_0NOTEQUAL:\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least one item to be on the stack.`);\n                    bn = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush);\n                    switch (currentOpcode) {\n                        case OP.OP_1ADD:\n                            bn = bn.add(new BigNumber(1));\n                            break;\n                        case OP.OP_1SUB:\n                            bn = bn.sub(new BigNumber(1));\n                            break;\n                        case OP.OP_NEGATE:\n                            bn = bn.neg();\n                            break;\n                        case OP.OP_ABS:\n                            if (bn.isNeg())\n                                bn = bn.neg();\n                            break;\n                        case OP.OP_NOT:\n                            bn = new BigNumber(bn.cmpn(0) === 0 ? 1 : 0);\n                            break;\n                        case OP.OP_0NOTEQUAL:\n                            bn = new BigNumber(bn.cmpn(0) !== 0 ? 1 : 0);\n                            break;\n                    }\n                    this.pushStack(bn.toScriptNum());\n                    break;\n                case OP.OP_ADD:\n                case OP.OP_SUB:\n                case OP.OP_MUL:\n                case OP.OP_DIV:\n                case OP.OP_MOD:\n                case OP.OP_BOOLAND:\n                case OP.OP_BOOLOR:\n                case OP.OP_NUMEQUAL:\n                case OP.OP_NUMEQUALVERIFY:\n                case OP.OP_NUMNOTEQUAL:\n                case OP.OP_LESSTHAN:\n                case OP.OP_GREATERTHAN:\n                case OP.OP_LESSTHANOREQUAL:\n                case OP.OP_GREATERTHANOREQUAL:\n                case OP.OP_MIN:\n                case OP.OP_MAX: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items to be on the stack.`);\n                    buf2 = this.popStack();\n                    buf1 = this.popStack();\n                    bn2 = BigNumber.fromScriptNum(buf2, requireMinimalPush);\n                    bn1 = BigNumber.fromScriptNum(buf1, requireMinimalPush);\n                    let predictedLen = 0;\n                    switch (currentOpcode) {\n                        case OP.OP_MUL:\n                            predictedLen = bn1.byteLength() + bn2.byteLength();\n                            break;\n                        case OP.OP_ADD:\n                        case OP.OP_SUB:\n                            predictedLen = Math.max(bn1.byteLength(), bn2.byteLength()) + 1;\n                            break;\n                        default:\n                            predictedLen = Math.max(bn1.byteLength(), bn2.byteLength());\n                    }\n                    this.ensureStackMem(predictedLen);\n                    let resultBnArithmetic = new BigNumber(0);\n                    switch (currentOpcode) {\n                        case OP.OP_ADD:\n                            resultBnArithmetic = bn1.add(bn2);\n                            break;\n                        case OP.OP_SUB:\n                            resultBnArithmetic = bn1.sub(bn2);\n                            break;\n                        case OP.OP_MUL:\n                            resultBnArithmetic = bn1.mul(bn2);\n                            break;\n                        case OP.OP_DIV:\n                            if (bn2.cmpn(0) === 0)\n                                this.scriptEvaluationError('OP_DIV cannot divide by zero!');\n                            resultBnArithmetic = bn1.div(bn2);\n                            break;\n                        case OP.OP_MOD:\n                            if (bn2.cmpn(0) === 0)\n                                this.scriptEvaluationError('OP_MOD cannot divide by zero!');\n                            resultBnArithmetic = bn1.mod(bn2);\n                            break;\n                        case OP.OP_BOOLAND:\n                            resultBnArithmetic = new BigNumber((bn1.cmpn(0) !== 0 && bn2.cmpn(0) !== 0) ? 1 : 0);\n                            break;\n                        case OP.OP_BOOLOR:\n                            resultBnArithmetic = new BigNumber((bn1.cmpn(0) !== 0 || bn2.cmpn(0) !== 0) ? 1 : 0);\n                            break;\n                        case OP.OP_NUMEQUAL:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) === 0 ? 1 : 0);\n                            break;\n                        case OP.OP_NUMEQUALVERIFY:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) === 0 ? 1 : 0);\n                            break;\n                        case OP.OP_NUMNOTEQUAL:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) !== 0 ? 1 : 0);\n                            break;\n                        case OP.OP_LESSTHAN:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) < 0 ? 1 : 0);\n                            break;\n                        case OP.OP_GREATERTHAN:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) > 0 ? 1 : 0);\n                            break;\n                        case OP.OP_LESSTHANOREQUAL:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) <= 0 ? 1 : 0);\n                            break;\n                        case OP.OP_GREATERTHANOREQUAL:\n                            resultBnArithmetic = new BigNumber(bn1.cmp(bn2) >= 0 ? 1 : 0);\n                            break;\n                        case OP.OP_MIN:\n                            resultBnArithmetic = bn1.cmp(bn2) < 0 ? bn1 : bn2;\n                            break;\n                        case OP.OP_MAX:\n                            resultBnArithmetic = bn1.cmp(bn2) > 0 ? bn1 : bn2;\n                            break;\n                    }\n                    this.pushStack(resultBnArithmetic.toScriptNum());\n                    if (currentOpcode === OP.OP_NUMEQUALVERIFY) {\n                        if (!this.castToBool(this.stackTop()))\n                            this.scriptEvaluationError('OP_NUMEQUALVERIFY requires the top stack item to be truthy.');\n                        this.popStack();\n                    }\n                    break;\n                }\n                case OP.OP_WITHIN:\n                    if (this.stack.length < 3)\n                        this.scriptEvaluationError('OP_WITHIN requires at least three items to be on the stack.');\n                    bn3 = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush); // max\n                    bn2 = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush); // min\n                    bn1 = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush); // x\n                    fValue = bn1.cmp(bn2) >= 0 && bn1.cmp(bn3) < 0;\n                    this.pushStack(fValue ? [1] : []);\n                    break;\n                case OP.OP_RIPEMD160:\n                case OP.OP_SHA1:\n                case OP.OP_SHA256:\n                case OP.OP_HASH160:\n                case OP.OP_HASH256: {\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least one item to be on the stack.`);\n                    buf = this.popStack();\n                    let hashResult = []; // Initialize to empty, to satisfy TS compiler\n                    if (currentOpcode === OP.OP_RIPEMD160)\n                        hashResult = Hash.ripemd160(buf);\n                    else if (currentOpcode === OP.OP_SHA1)\n                        hashResult = Hash.sha1(buf);\n                    else if (currentOpcode === OP.OP_SHA256)\n                        hashResult = Hash.sha256(buf);\n                    else if (currentOpcode === OP.OP_HASH160)\n                        hashResult = Hash.hash160(buf);\n                    else if (currentOpcode === OP.OP_HASH256)\n                        hashResult = Hash.hash256(buf);\n                    this.pushStack(hashResult);\n                    break;\n                }\n                case OP.OP_CODESEPARATOR:\n                    this.lastCodeSeparator = this.programCounter;\n                    break;\n                case OP.OP_CHECKSIG:\n                case OP.OP_CHECKSIGVERIFY: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least two items to be on the stack.`);\n                    bufPubkey = this.popStack();\n                    bufSig = this.popStack();\n                    if (!this.checkSignatureEncoding(bufSig) || !this.checkPublicKeyEncoding(bufPubkey)) {\n                        // Error already thrown by helpers\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires correct encoding for the public key and signature.`); // Fallback, should be unreachable\n                    }\n                    const scriptForChecksig = this.context === 'UnlockingScript' ? this.unlockingScript : this.lockingScript;\n                    const scriptCodeChunks = scriptForChecksig.chunks.slice(this.lastCodeSeparator === null ? 0 : this.lastCodeSeparator + 1);\n                    subscript = new Script(scriptCodeChunks);\n                    subscript.findAndDelete(new Script().writeBin(bufSig));\n                    fSuccess = false;\n                    if (bufSig.length > 0) {\n                        try {\n                            sig = TransactionSignature.fromChecksigFormat(bufSig);\n                            pubkey = PublicKey.fromDER(bufPubkey);\n                            fSuccess = this.verifySignature(sig, pubkey, subscript);\n                        }\n                        catch (e) {\n                            fSuccess = false;\n                        }\n                    }\n                    this.pushStack(fSuccess ? [1] : []);\n                    if (currentOpcode === OP.OP_CHECKSIGVERIFY) {\n                        if (!fSuccess)\n                            this.scriptEvaluationError('OP_CHECKSIGVERIFY requires that a valid signature is provided.');\n                        this.popStack();\n                    }\n                    break;\n                }\n                case OP.OP_CHECKMULTISIG:\n                case OP.OP_CHECKMULTISIGVERIFY: {\n                    i = 1;\n                    if (this.stack.length < i) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires at least 1 item for nKeys.`);\n                    }\n                    nKeysCount = BigNumber.fromScriptNum(this.stackTop(-i), requireMinimalPush).toNumber();\n                    if (nKeysCount < 0 || nKeysCount > maxMultisigKeyCount) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires a key count between 0 and ${maxMultisigKeyCount}.`);\n                    }\n                    ikey = ++i;\n                    i += nKeysCount;\n                    if (this.stack.length < i) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} stack too small for nKeys and keys. Need ${i}, have ${this.stack.length}.`);\n                    }\n                    nSigsCount = BigNumber.fromScriptNum(this.stackTop(-i), requireMinimalPush).toNumber();\n                    if (nSigsCount < 0 || nSigsCount > nKeysCount) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires the number of signatures to be no greater than the number of keys.`);\n                    }\n                    isig = ++i;\n                    i += nSigsCount;\n                    if (this.stack.length < i) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} stack too small for N, keys, M, sigs, and dummy. Need ${i}, have ${this.stack.length}.`);\n                    }\n                    const baseScriptCMS = this.context === 'UnlockingScript' ? this.unlockingScript : this.lockingScript;\n                    const subscriptChunksCMS = baseScriptCMS.chunks.slice(this.lastCodeSeparator === null ? 0 : this.lastCodeSeparator + 1);\n                    subscript = new Script(subscriptChunksCMS);\n                    for (let k = 0; k < nSigsCount; k++) {\n                        bufSig = this.stackTop(-isig - k); // Sigs are closer to top than keys\n                        subscript.findAndDelete(new Script().writeBin(bufSig));\n                    }\n                    fSuccess = true;\n                    while (fSuccess && nSigsCount > 0) {\n                        if (nKeysCount === 0) { // No more keys to check against but still sigs left\n                            fSuccess = false;\n                            break;\n                        }\n                        bufSig = this.stackTop(-isig);\n                        bufPubkey = this.stackTop(-ikey);\n                        if (!this.checkSignatureEncoding(bufSig) || !this.checkPublicKeyEncoding(bufPubkey)) {\n                            this.scriptEvaluationError(`${OP[currentOpcode]} requires correct encoding for the public key and signature.`);\n                        }\n                        fOk = false;\n                        if (bufSig.length > 0) {\n                            try {\n                                sig = TransactionSignature.fromChecksigFormat(bufSig);\n                                pubkey = PublicKey.fromDER(bufPubkey);\n                                fOk = this.verifySignature(sig, pubkey, subscript);\n                            }\n                            catch (e) {\n                                fOk = false;\n                            }\n                        }\n                        if (fOk) {\n                            isig++;\n                            nSigsCount--;\n                        }\n                        ikey++;\n                        nKeysCount--;\n                        if (nSigsCount > nKeysCount) {\n                            fSuccess = false;\n                        }\n                    }\n                    // Correct total items consumed by op (N_val, keys, M_val, sigs, dummy)\n                    const itemsConsumedByOp = 1 + // N_val\n                        BigNumber.fromScriptNum(this.stackTop(-1), false).toNumber() + // keys\n                        1 + // M_val\n                        BigNumber.fromScriptNum(this.stackTop(-(1 + BigNumber.fromScriptNum(this.stackTop(-1), false).toNumber() + 1)), false).toNumber() + // sigs\n                        1; // dummy\n                    let popCount = itemsConsumedByOp - 1; // Pop all except dummy\n                    while (popCount > 0) {\n                        this.popStack();\n                        popCount--;\n                    }\n                    // Check and pop dummy\n                    if (this.stack.length < 1) {\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires an extra item (dummy) to be on the stack.`);\n                    }\n                    const dummyBuf = this.popStack();\n                    if (dummyBuf.length > 0) { // SCRIPT_VERIFY_NULLDUMMY\n                        this.scriptEvaluationError(`${OP[currentOpcode]} requires the extra stack item (dummy) to be empty.`);\n                    }\n                    this.pushStack(fSuccess ? [1] : []);\n                    if (currentOpcode === OP.OP_CHECKMULTISIGVERIFY) {\n                        if (!fSuccess)\n                            this.scriptEvaluationError('OP_CHECKMULTISIGVERIFY requires that a sufficient number of valid signatures are provided.');\n                        this.popStack();\n                    }\n                    break;\n                }\n                case OP.OP_CAT: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_CAT requires at least two items to be on the stack.');\n                    buf2 = this.popStack();\n                    buf1 = this.popStack();\n                    const catResult = (buf1).concat(buf2);\n                    if (catResult.length > maxScriptElementSize)\n                        this.scriptEvaluationError(`It's not currently possible to push data larger than ${maxScriptElementSize} bytes.`);\n                    this.pushStack(catResult);\n                    break;\n                }\n                case OP.OP_SPLIT: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_SPLIT requires at least two items to be on the stack.');\n                    const posBuf = this.popStack();\n                    const dataToSplit = this.popStack();\n                    n = BigNumber.fromScriptNum(posBuf, requireMinimalPush).toNumber();\n                    if (n < 0 || n > dataToSplit.length) {\n                        this.scriptEvaluationError('OP_SPLIT requires the first stack item to be a non-negative number less than or equal to the size of the second-from-top stack item.');\n                    }\n                    this.pushStack(dataToSplit.slice(0, n));\n                    this.pushStack(dataToSplit.slice(n));\n                    break;\n                }\n                case OP.OP_NUM2BIN: {\n                    if (this.stack.length < 2)\n                        this.scriptEvaluationError('OP_NUM2BIN requires at least two items to be on the stack.');\n                    size = BigNumber.fromScriptNum(this.popStack(), requireMinimalPush).toNumber();\n                    if (size > maxScriptElementSize || size < 0) { // size can be 0\n                        this.scriptEvaluationError(`It's not currently possible to push data larger than ${maxScriptElementSize} bytes or negative size.`);\n                    }\n                    let rawnum = this.popStack(); // This is the number to convert\n                    rawnum = minimallyEncode(rawnum); // Get its minimal scriptnum form\n                    if (rawnum.length > size) {\n                        this.scriptEvaluationError('OP_NUM2BIN requires that the size expressed in the top stack item is large enough to hold the value expressed in the second-from-top stack item.');\n                    }\n                    if (rawnum.length === size) {\n                        this.pushStack(rawnum);\n                        break;\n                    }\n                    const resultN2B = new Array(size).fill(0x00);\n                    let signbit = 0x00;\n                    if (rawnum.length > 0) {\n                        signbit = rawnum[rawnum.length - 1] & 0x80; // Store sign bit\n                        rawnum[rawnum.length - 1] &= 0x7f; // Remove sign bit for padding\n                    }\n                    // Copy rawnum (now positive magnitude) into the result\n                    for (let k = 0; k < rawnum.length; k++) {\n                        resultN2B[k] = rawnum[k];\n                    }\n                    // If the original number was negative, the sign bit must be set on the new MSB\n                    if (signbit !== 0) {\n                        resultN2B[size - 1] |= 0x80;\n                    }\n                    this.pushStack(resultN2B);\n                    break;\n                }\n                case OP.OP_BIN2NUM: {\n                    if (this.stack.length < 1)\n                        this.scriptEvaluationError('OP_BIN2NUM requires at least one item to be on the stack.');\n                    buf1 = this.popStack();\n                    const b2nResult = minimallyEncode(buf1);\n                    if (!isMinimallyEncodedHelper(b2nResult)) {\n                        this.scriptEvaluationError('OP_BIN2NUM requires that the resulting number is valid.');\n                    }\n                    this.pushStack(b2nResult);\n                    break;\n                }\n                default:\n                    this.scriptEvaluationError(`Invalid opcode ${currentOpcode} (pc=${this.programCounter}).`);\n            }\n        }\n        this.programCounter++;\n        return true;\n    }\n    /**\n     * @method validate\n     * Validates the spend action by interpreting the locking and unlocking scripts.\n     * @returns {boolean} Returns true if the scripts are valid and the spend is legitimate, otherwise false.\n     * @example\n     * if (spend.validate()) {\n     *   console.log(\"Spend is valid!\");\n     * } else {\n     *   console.log(\"Invalid spend!\");\n     * }\n     */\n    validate() {\n        if (requirePushOnlyUnlockingScripts && !this.unlockingScript.isPushOnly()) {\n            this.scriptEvaluationError('Unlocking scripts can only contain push operations, and no other opcodes.');\n        }\n        while (this.step()) {\n            if (this.context === 'LockingScript' &&\n                this.programCounter >= this.lockingScript.chunks.length) {\n                break;\n            }\n        }\n        if (this.ifStack.length > 0) {\n            this.scriptEvaluationError('Every OP_IF, OP_NOTIF, or OP_ELSE must be terminated with OP_ENDIF prior to the end of the script.');\n        }\n        if (requireCleanStack) {\n            if (this.stack.length !== 1) {\n                this.scriptEvaluationError(`The clean stack rule requires exactly one item to be on the stack after script execution, found ${this.stack.length}.`);\n            }\n        }\n        if (this.stack.length === 0) {\n            this.scriptEvaluationError('The top stack element must be truthy after script evaluation (stack is empty).');\n        }\n        else if (!this.castToBool(this.stackTop())) {\n            this.scriptEvaluationError('The top stack element must be truthy after script evaluation.');\n        }\n        return true;\n    }\n    castToBool(val) {\n        if (val.length === 0)\n            return false;\n        for (let i = 0; i < val.length; i++) {\n            if (val[i] !== 0) {\n                return !(i === val.length - 1 && val[i] === 0x80);\n            }\n        }\n        return false;\n    }\n    scriptEvaluationError(str) {\n        throw new ScriptEvaluationError({\n            message: str,\n            txid: this.sourceTXID,\n            outputIndex: this.sourceOutputIndex,\n            context: this.context,\n            programCounter: this.programCounter,\n            stackState: this.stack,\n            altStackState: this.altStack,\n            ifStackState: this.ifStack,\n            stackMem: this.stackMem,\n            altStackMem: this.altStackMem\n        });\n    }\n}\n//# sourceMappingURL=Spend.js.map","import OP from '../OP.js';\nimport { fromBase58Check } from '../../primitives/utils.js';\nimport LockingScript from '../LockingScript.js';\nimport UnlockingScript from '../UnlockingScript.js';\nimport TransactionSignature from '../../primitives/TransactionSignature.js';\nimport { sha256 } from '../../primitives/Hash.js';\nfunction verifyTruthy(v) {\n    if (v == null)\n        throw new Error('must have value');\n    return v;\n}\n/**\n * P2PKH (Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create Pay To Public Key Hash locking and unlocking scripts, including the unlocking of P2PKH UTXOs with the private key.\n */\nexport default class P2PKH {\n    /**\n     * Creates a P2PKH locking script for a given public key hash or address string\n     *\n     * @param {number[] | string} pubkeyhash or address - An array or address representing the public key hash.\n     * @returns {LockingScript} - A P2PKH locking script.\n     */\n    lock(pubkeyhash) {\n        let data;\n        if (typeof pubkeyhash === 'string') {\n            const hash = fromBase58Check(pubkeyhash);\n            if (hash.prefix[0] !== 0x00 && hash.prefix[0] !== 0x6f) {\n                throw new Error('only P2PKH is supported');\n            }\n            data = hash.data;\n        }\n        else {\n            data = pubkeyhash;\n        }\n        if (data.length !== 20) {\n            throw new Error('P2PKH hash length must be 20 bytes');\n        }\n        return new LockingScript([\n            { op: OP.OP_DUP },\n            { op: OP.OP_HASH160 },\n            { op: data.length, data },\n            { op: OP.OP_EQUALVERIFY },\n            { op: OP.OP_CHECKSIG }\n        ]);\n    }\n    /**\n     * Creates a function that generates a P2PKH unlocking script along with its signature and length estimation.\n     *\n     * The returned object contains:\n     * 1. `sign` - A function that, when invoked with a transaction and an input index,\n     *    produces an unlocking script suitable for a P2PKH locked output.\n     * 2. `estimateLength` - A function that returns the estimated length of the unlocking script in bytes.\n     *\n     * @param {PrivateKey} privateKey - The private key used for signing the transaction.\n     * @param {'all'|'none'|'single'} signOutputs - The signature scope for outputs.\n     * @param {boolean} anyoneCanPay - Flag indicating if the signature allows for other inputs to be added later.\n     * @param {number} sourceSatoshis - Optional. The amount being unlocked. Otherwise the input.sourceTransaction is required.\n     * @param {Script} lockingScript - Optional. The lockinScript. Otherwise the input.sourceTransaction is required.\n     * @returns {Object} - An object containing the `sign` and `estimateLength` functions.\n     */\n    unlock(privateKey, signOutputs = 'all', anyoneCanPay = false, sourceSatoshis, lockingScript) {\n        return {\n            sign: async (tx, inputIndex) => {\n                let signatureScope = TransactionSignature.SIGHASH_FORKID;\n                if (signOutputs === 'all') {\n                    signatureScope |= TransactionSignature.SIGHASH_ALL;\n                }\n                if (signOutputs === 'none') {\n                    signatureScope |= TransactionSignature.SIGHASH_NONE;\n                }\n                if (signOutputs === 'single') {\n                    signatureScope |= TransactionSignature.SIGHASH_SINGLE;\n                }\n                if (anyoneCanPay) {\n                    signatureScope |= TransactionSignature.SIGHASH_ANYONECANPAY;\n                }\n                const input = tx.inputs[inputIndex];\n                const otherInputs = tx.inputs.filter((_, index) => index !== inputIndex);\n                const sourceTXID = input.sourceTXID ?? input.sourceTransaction?.id('hex');\n                if (sourceTXID == null || sourceTXID === undefined) {\n                    throw new Error('The input sourceTXID or sourceTransaction is required for transaction signing.');\n                }\n                if (sourceTXID === '') {\n                    throw new Error('The input sourceTXID or sourceTransaction is required for transaction signing.');\n                }\n                sourceSatoshis ||=\n                    input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis;\n                if (sourceSatoshis == null || sourceSatoshis === undefined) {\n                    throw new Error('The sourceSatoshis or input sourceTransaction is required for transaction signing.');\n                }\n                lockingScript ||=\n                    input.sourceTransaction?.outputs[input.sourceOutputIndex]\n                        .lockingScript;\n                if (lockingScript == null) {\n                    throw new Error('The lockingScript or input sourceTransaction is required for transaction signing.');\n                }\n                const preimage = TransactionSignature.format({\n                    sourceTXID,\n                    sourceOutputIndex: verifyTruthy(input.sourceOutputIndex),\n                    sourceSatoshis,\n                    transactionVersion: tx.version,\n                    otherInputs,\n                    inputIndex,\n                    outputs: tx.outputs,\n                    inputSequence: verifyTruthy(input.sequence),\n                    subscript: lockingScript,\n                    lockTime: tx.lockTime,\n                    scope: signatureScope\n                });\n                const rawSignature = privateKey.sign(sha256(preimage));\n                const sig = new TransactionSignature(rawSignature.r, rawSignature.s, signatureScope);\n                const sigForScript = sig.toChecksigFormat();\n                const pubkeyForScript = privateKey\n                    .toPublicKey()\n                    .encode(true);\n                return new UnlockingScript([\n                    { op: sigForScript.length, data: sigForScript },\n                    { op: pubkeyForScript.length, data: pubkeyForScript }\n                ]);\n            },\n            estimateLength: async () => {\n                // public key (1+33) + signature (1+73)\n                // Note: We add 1 to each element's length because of the associated OP_PUSH\n                return 108;\n            }\n        };\n    }\n}\n//# sourceMappingURL=P2PKH.js.map","import OP from '../OP.js';\nimport LockingScript from '../LockingScript.js';\nimport UnlockingScript from '../UnlockingScript.js';\nimport PrivateKey from '../../primitives/PrivateKey.js';\nimport TransactionSignature from '../../primitives/TransactionSignature.js';\nimport { sha256 } from '../../primitives/Hash.js';\nimport Script from '../Script.js';\n/**\n * RPuzzle class implementing ScriptTemplate.\n *\n * This class provides methods to create R Puzzle and R Puzzle Hash locking and unlocking scripts, including the unlocking of UTXOs with the correct K value.\n */\nexport default class RPuzzle {\n    type = 'raw';\n    /**\n     * @constructor\n     * Constructs an R Puzzle template instance for a given puzzle type\n     *\n     * @param {'raw'|'SHA1'|'SHA256'|'HASH256'|'RIPEMD160'|'HASH160'} type Denotes the type of puzzle to create\n     */\n    constructor(type = 'raw') {\n        this.type = type;\n    }\n    /**\n     * Creates an R puzzle locking script for a given R value or R value hash.\n     *\n     * @param {number[]} value - An array representing the R value or its hash.\n     * @returns {LockingScript} - An R puzzle locking script.\n     */\n    lock(value) {\n        const chunks = [\n            { op: OP.OP_OVER },\n            { op: OP.OP_3 },\n            { op: OP.OP_SPLIT },\n            { op: OP.OP_NIP },\n            { op: OP.OP_1 },\n            { op: OP.OP_SPLIT },\n            { op: OP.OP_SWAP },\n            { op: OP.OP_SPLIT },\n            { op: OP.OP_DROP }\n        ];\n        if (this.type !== 'raw') {\n            chunks.push({\n                op: OP['OP_' + this.type]\n            });\n        }\n        chunks.push({ op: value.length, data: value });\n        chunks.push({ op: OP.OP_EQUALVERIFY });\n        chunks.push({ op: OP.OP_CHECKSIG });\n        return new LockingScript(chunks);\n    }\n    /**\n     * Creates a function that generates an R puzzle unlocking script along with its signature and length estimation.\n     *\n     * The returned object contains:\n     * 1. `sign` - A function that, when invoked with a transaction and an input index,\n     *    produces an unlocking script suitable for an R puzzle locked output.\n     * 2. `estimateLength` - A function that returns the estimated length of the unlocking script in bytes.\n     *\n     * @param {BigNumber} k — The K-value used to unlock the R-puzzle.\n     * @param {PrivateKey} privateKey - The private key used for signing the transaction. If not provided, a random key will be generated.\n     * @param {'all'|'none'|'single'} signOutputs - The signature scope for outputs.\n     * @param {boolean} anyoneCanPay - Flag indicating if the signature allows for other inputs to be added later.\n     * @returns {Object} - An object containing the `sign` and `estimateLength` functions.\n     */\n    unlock(k, privateKey, signOutputs = 'all', anyoneCanPay = false) {\n        return {\n            sign: async (tx, inputIndex) => {\n                if (typeof privateKey === 'undefined') {\n                    privateKey = PrivateKey.fromRandom();\n                }\n                let signatureScope = TransactionSignature.SIGHASH_FORKID;\n                if (signOutputs === 'all') {\n                    signatureScope |= TransactionSignature.SIGHASH_ALL;\n                }\n                if (signOutputs === 'none') {\n                    signatureScope |= TransactionSignature.SIGHASH_NONE;\n                }\n                if (signOutputs === 'single') {\n                    signatureScope |= TransactionSignature.SIGHASH_SINGLE;\n                }\n                if (anyoneCanPay) {\n                    signatureScope |= TransactionSignature.SIGHASH_ANYONECANPAY;\n                }\n                const otherInputs = [...tx.inputs];\n                const [input] = otherInputs.splice(inputIndex, 1);\n                if (typeof input.sourceTransaction !== 'object') {\n                    throw new Error('The source transaction is needed for transaction signing.');\n                }\n                const preimage = TransactionSignature.format({\n                    sourceTXID: input.sourceTransaction?.id('hex') ?? '',\n                    sourceOutputIndex: input.sourceOutputIndex ?? 0,\n                    sourceSatoshis: input.sourceTransaction?.outputs[input.sourceOutputIndex]\n                        ?.satoshis ?? 0,\n                    transactionVersion: tx.version,\n                    otherInputs,\n                    inputIndex,\n                    outputs: tx.outputs,\n                    inputSequence: input.sequence ?? 0xffffffff,\n                    subscript: input.sourceTransaction?.outputs[input.sourceOutputIndex]\n                        ?.lockingScript ?? new Script(),\n                    lockTime: tx.lockTime,\n                    scope: signatureScope\n                });\n                const rawSignature = privateKey.sign(sha256(preimage), undefined, true, k);\n                const sig = new TransactionSignature(rawSignature.r, rawSignature.s, signatureScope);\n                const sigForScript = sig.toChecksigFormat();\n                const pubkeyForScript = privateKey\n                    .toPublicKey()\n                    .encode(true);\n                return new UnlockingScript([\n                    { op: sigForScript.length, data: sigForScript },\n                    { op: pubkeyForScript.length, data: pubkeyForScript }\n                ]);\n            },\n            estimateLength: async () => {\n                // public key (1+33) + signature (1+73)\n                // Note: We add 1 to each element's length because of the associated OP_PUSH\n                return 108;\n            }\n        };\n    }\n}\n//# sourceMappingURL=RPuzzle.js.map","import { LockingScript, UnlockingScript, OP } from '../index.js';\nimport { Utils, Hash, TransactionSignature, Signature, PublicKey } from '../../primitives/index.js';\nfunction verifyTruthy(v) {\n    if (v == null)\n        throw new Error('must have value');\n    return v;\n}\n/**\n * For a given piece of data to push onto the stack in script, creates the correct minimally-encoded script chunk,\n * including the correct push operation.\n *\n * TODO: This should be made into a TS-SDK util (distinct from the `minimallyEncode` util)\n */\nconst createMinimallyEncodedScriptChunk = (data) => {\n    if (data.length === 0) {\n        // Could have used OP_0.\n        return { op: 0 };\n    }\n    if (data.length === 1 && data[0] === 0) {\n        // Could have used OP_0.\n        return { op: 0 };\n    }\n    if (data.length === 1 && data[0] > 0 && data[0] <= 16) {\n        // Could have used OP_0 .. OP_16.\n        return { op: 0x50 + data[0] };\n    }\n    if (data.length === 1 && data[0] === 0x81) {\n        // Could have used OP_1NEGATE.\n        return { op: 0x4f };\n    }\n    if (data.length <= 75) {\n        // Could have used a direct push (opcode indicating number of bytes\n        // pushed + those bytes).\n        return { op: data.length, data };\n    }\n    if (data.length <= 255) {\n        // Could have used OP_PUSHDATA.\n        return { op: 0x4c, data };\n    }\n    if (data.length <= 65535) {\n        // Could have used OP_PUSHDATA2.\n        return { op: 0x4d, data };\n    }\n    return { op: 0x4e, data };\n};\nexport default class PushDrop {\n    wallet;\n    originator;\n    /**\n     * Decodes a PushDrop script back into its token fields and the locking public key. If a signature was present, it will be the last field returned.\n     * Warning: Only works with a P2PK lock at the beginning of the script.\n     * @param script PushDrop script to decode back into token fields\n     * @returns An object containing PushDrop token fields and the locking public key. If a signature was included, it will be the last field.\n     */\n    static decode(script) {\n        const lockingPublicKey = PublicKey.fromString(Utils.toHex(verifyTruthy(script.chunks[0].data)) // ✅ Ensure not undefined\n        );\n        const fields = [];\n        for (let i = 2; i < script.chunks.length; i++) {\n            const nextOpcode = script.chunks[i + 1]?.op; // ✅ Prevent accessing `op` from `undefined`\n            let chunk = script.chunks[i].data ?? []; // ✅ Ensure `chunk` is always `number[]`\n            if (chunk.length === 0) {\n                // ✅ Only modify `chunk` if it was empty\n                if (script.chunks[i].op >= 80 && script.chunks[i].op <= 95) {\n                    chunk = [script.chunks[i].op - 80];\n                }\n                else if (script.chunks[i].op === 0) {\n                    chunk = [0];\n                }\n                else if (script.chunks[i].op === 0x4f) {\n                    chunk = [0x81];\n                }\n            }\n            fields.push(chunk);\n            // If the next value is DROP or 2DROP then this is the final field\n            if (nextOpcode === OP.OP_DROP || nextOpcode === OP.OP_2DROP) {\n                break;\n            }\n        }\n        return {\n            fields,\n            lockingPublicKey\n        };\n    }\n    /**\n     * Constructs a new instance of the PushDrop class.\n     *\n     * @param {WalletInterface} wallet - The wallet interface used for creating signatures and accessing public keys.\n     * @param {string} originator — The originator to use with Wallet requests\n     */\n    constructor(wallet, originator) {\n        this.wallet = wallet;\n        this.originator = originator;\n    }\n    /**\n     * Creates a PushDrop locking script with arbitrary data fields and a public key lock.\n     *\n     * @param {number[][]} fields - The token fields to include in the locking script.\n     * @param {[SecurityLevel, string]} protocolID - The protocol ID to use.\n     * @param {string} keyID - The key ID to use.\n     * @param {string} counterparty - The counterparty involved in the transaction, \"self\" or \"anyone\".\n     * @param {boolean} [forSelf=false] - Flag indicating if the lock is for the creator (default no).\n     * @param {boolean} [includeSignature=true] - Flag indicating if a signature should be included in the script (default yes).\n     * @returns {Promise<LockingScript>} The generated PushDrop locking script.\n     */\n    async lock(fields, protocolID, keyID, counterparty, forSelf = false, includeSignature = true, lockPosition = 'before') {\n        const { publicKey } = await this.wallet.getPublicKey({\n            protocolID,\n            keyID,\n            counterparty,\n            forSelf\n        }, this.originator);\n        const lockChunks = [];\n        const pushDropChunks = [];\n        lockChunks.push({\n            op: publicKey.length / 2,\n            data: Utils.toArray(publicKey, 'hex')\n        });\n        lockChunks.push({ op: OP.OP_CHECKSIG });\n        if (includeSignature) {\n            const dataToSign = fields.reduce((a, e) => [...a, ...e], []);\n            const { signature } = await this.wallet.createSignature({\n                data: dataToSign,\n                protocolID,\n                keyID,\n                counterparty\n            }, this.originator);\n            fields.push(signature);\n        }\n        for (const field of fields) {\n            pushDropChunks.push(createMinimallyEncodedScriptChunk(field));\n        }\n        let notYetDropped = fields.length;\n        while (notYetDropped > 1) {\n            pushDropChunks.push({ op: OP.OP_2DROP });\n            notYetDropped -= 2;\n        }\n        if (notYetDropped !== 0) {\n            pushDropChunks.push({ op: OP.OP_DROP });\n        }\n        if (lockPosition === 'before') {\n            return new LockingScript([...lockChunks, ...pushDropChunks]);\n        }\n        else {\n            return new LockingScript([...pushDropChunks, ...lockChunks]);\n        }\n    }\n    /**\n     * Creates an unlocking script for spending a PushDrop token output.\n     *\n     * @param {[SecurityLevel, string]} protocolID - The protocol ID to use.\n     * @param {string} keyID - The key ID to use.\n     * @param {string} counterparty - The counterparty involved in the transaction, \"self\" or \"anyone\".\n     * @param {string} [sourceTXID] - The TXID of the source transaction.\n     * @param {number} [sourceSatoshis] - The number of satoshis in the source output.\n     * @param {LockingScript} [lockingScript] - The locking script of the source output.\n     * @param {'all' | 'none' | 'single'} [signOutputs='all'] - Specifies which outputs to sign.\n     * @param {boolean} [anyoneCanPay=false] - Specifies if the anyone-can-pay flag is set.\n     * @returns {Object} An object containing functions to sign the transaction and estimate the script length.\n     */\n    unlock(protocolID, keyID, counterparty, signOutputs = 'all', anyoneCanPay = false, sourceSatoshis, lockingScript) {\n        return {\n            sign: async (tx, inputIndex) => {\n                let signatureScope = TransactionSignature.SIGHASH_FORKID;\n                if (signOutputs === 'all') {\n                    signatureScope |= TransactionSignature.SIGHASH_ALL;\n                }\n                if (signOutputs === 'none') {\n                    signatureScope |= TransactionSignature.SIGHASH_NONE;\n                }\n                if (signOutputs === 'single') {\n                    signatureScope |= TransactionSignature.SIGHASH_SINGLE;\n                }\n                if (anyoneCanPay) {\n                    signatureScope |= TransactionSignature.SIGHASH_ANYONECANPAY;\n                }\n                const input = tx.inputs[inputIndex];\n                const otherInputs = tx.inputs.filter((_, index) => index !== inputIndex);\n                const sourceTXID = input.sourceTXID ?? input.sourceTransaction?.id('hex');\n                if (sourceTXID == null || sourceTXID === undefined) {\n                    throw new Error('The input sourceTXID or sourceTransaction is required for transaction signing.');\n                }\n                sourceSatoshis ||=\n                    input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis;\n                if (sourceSatoshis == null || sourceSatoshis === undefined) {\n                    throw new Error('The sourceSatoshis or input sourceTransaction is required for transaction signing.');\n                }\n                lockingScript ||=\n                    input.sourceTransaction?.outputs[input.sourceOutputIndex]\n                        .lockingScript;\n                if (lockingScript == null) {\n                    throw new Error('The lockingScript or input sourceTransaction is required for transaction signing.');\n                }\n                const preimage = TransactionSignature.format({\n                    sourceTXID,\n                    sourceOutputIndex: verifyTruthy(input.sourceOutputIndex),\n                    sourceSatoshis,\n                    transactionVersion: tx.version,\n                    otherInputs,\n                    inputIndex,\n                    outputs: tx.outputs,\n                    inputSequence: input.sequence ?? 0xffffffff,\n                    subscript: lockingScript,\n                    lockTime: tx.lockTime,\n                    scope: signatureScope\n                });\n                const preimageHash = Hash.sha256(preimage);\n                const { signature: bareSignature } = await this.wallet.createSignature({\n                    data: preimageHash,\n                    protocolID,\n                    keyID,\n                    counterparty\n                }, this.originator);\n                const signature = Signature.fromDER([...bareSignature]);\n                const txSignature = new TransactionSignature(signature.r, signature.s, signatureScope);\n                const sigForScript = txSignature.toChecksigFormat();\n                return new UnlockingScript([\n                    { op: sigForScript.length, data: sigForScript }\n                ]);\n            },\n            estimateLength: async () => 73\n        };\n    }\n}\n//# sourceMappingURL=PushDrop.js.map","/**\n * Represents the \"satoshis per kilobyte\" transaction fee model.\n */\nexport default class SatoshisPerKilobyte {\n    /**\n     * @property\n     * Denotes the number of satoshis paid per kilobyte of transaction size.\n     */\n    value;\n    /**\n     * Constructs an instance of the sat/kb fee model.\n     *\n     * @param {number} value - The number of satoshis per kilobyte to charge as a fee.\n     */\n    constructor(value) {\n        this.value = value;\n    }\n    /**\n     * Computes the fee for a given transaction.\n     *\n     * @param tx The transaction for which a fee is to be computed.\n     * @returns The fee in satoshis for the transaction, as a BigNumber.\n     */\n    async computeFee(tx) {\n        const getVarIntSize = (i) => {\n            if (i > 2 ** 32) {\n                return 9;\n            }\n            else if (i > 2 ** 16) {\n                return 5;\n            }\n            else if (i > 253) {\n                return 3;\n            }\n            else {\n                return 1;\n            }\n        };\n        // Compute the (potentially estimated) size of the transaction\n        let size = 4; // version\n        size += getVarIntSize(tx.inputs.length); // number of inputs\n        for (let i = 0; i < tx.inputs.length; i++) {\n            const input = tx.inputs[i];\n            size += 40; // txid, output index, sequence number\n            let scriptLength;\n            if (typeof input.unlockingScript === 'object') {\n                scriptLength = input.unlockingScript.toBinary().length;\n            }\n            else if (typeof input.unlockingScriptTemplate === 'object') {\n                scriptLength = await input.unlockingScriptTemplate.estimateLength(tx, i);\n            }\n            else {\n                throw new Error('All inputs must have an unlocking script or an unlocking script template for sat/kb fee computation.');\n            }\n            size += getVarIntSize(scriptLength); // unlocking script length\n            size += scriptLength; // unlocking script\n        }\n        size += getVarIntSize(tx.outputs.length); // number of outputs\n        for (const out of tx.outputs) {\n            size += 8; // satoshis\n            const length = out.lockingScript.toBinary().length;\n            size += getVarIntSize(length); // script length\n            size += length; // script\n        }\n        size += 4; // lock time\n        // We'll use Math.ceil to ensure the miners get the extra satoshi.\n        const fee = Math.ceil((size / 1000) * this.value);\n        return fee;\n    }\n}\n//# sourceMappingURL=SatoshisPerKilobyte.js.map","/**\n * Adapter for Node Https module to be used as HttpClient\n */\nexport class NodejsHttpClient {\n    https;\n    constructor(https) {\n        this.https = https;\n    }\n    async request(url, requestOptions) {\n        return await new Promise((resolve, reject) => {\n            const req = this.https.request(url, requestOptions, (res) => {\n                let body = '';\n                res.on('data', (chunk) => {\n                    body += chunk;\n                });\n                res.on('end', () => {\n                    const ok = res.statusCode >= 200 && res.statusCode <= 299;\n                    const mediaType = res.headers['content-type'];\n                    const data = body !== '' && typeof mediaType === 'string' && mediaType.startsWith('application/json')\n                        ? JSON.parse(body)\n                        : body;\n                    resolve({\n                        status: res.statusCode,\n                        statusText: res.statusMessage,\n                        ok,\n                        data\n                    });\n                });\n            });\n            req.on('error', (error) => {\n                reject(error);\n            });\n            if (requestOptions.data !== null && requestOptions.data !== undefined) {\n                req.write(JSON.stringify(requestOptions.data));\n            }\n            req.end();\n        });\n    }\n}\n//# sourceMappingURL=NodejsHttpClient.js.map","/**\n * Adapter for Node Https module to be used as HttpClient\n */\nexport class FetchHttpClient {\n    fetch;\n    constructor(fetch) {\n        this.fetch = fetch;\n    }\n    async request(url, options) {\n        const fetchOptions = {\n            method: options.method,\n            headers: options.headers,\n            body: JSON.stringify(options.data)\n        };\n        const res = await this.fetch(url, fetchOptions);\n        const mediaType = res.headers.get('Content-Type');\n        const data = mediaType?.startsWith('application/json') ?? false\n            ? await res.json()\n            : await res.text();\n        return {\n            ok: res.ok,\n            status: res.status,\n            statusText: res.statusText,\n            data: data\n        };\n    }\n}\n//# sourceMappingURL=FetchHttpClient.js.map","import { NodejsHttpClient } from './NodejsHttpClient.js';\nimport { FetchHttpClient } from './FetchHttpClient.js';\n/**\n * Returns a default HttpClient implementation based on the environment that it is run on.\n * This method will attempt to use `window.fetch` if available (in browser environments).\n * If running in a Node environment, it falls back to using the Node `https` module\n */\nexport function defaultHttpClient() {\n    const noHttpClient = {\n        async request(..._) {\n            throw new Error('No method available to perform HTTP request');\n        }\n    };\n    if (typeof window !== 'undefined' && typeof window.fetch === 'function') {\n        // Use fetch in a browser environment\n        return new FetchHttpClient(window.fetch.bind(window));\n    }\n    else if (typeof require !== 'undefined') {\n        // Use Node https module\n        // eslint-disable-next-line\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const https = require('https');\n            return new NodejsHttpClient(https);\n        }\n        catch (e) {\n            return noHttpClient;\n        }\n    }\n    else {\n        return noHttpClient;\n    }\n}\n//# sourceMappingURL=DefaultHttpClient.js.map","import { defaultHttpClient } from '../http/DefaultHttpClient.js';\nimport Random from '../../primitives/Random.js';\nimport { toHex } from '../../primitives/utils.js';\nfunction defaultDeploymentId() {\n    return `ts-sdk-${toHex(Random(16))}`;\n}\n/**\n * Represents an ARC transaction broadcaster.\n */\nexport default class ARC {\n    URL;\n    apiKey;\n    deploymentId;\n    callbackUrl;\n    callbackToken;\n    headers;\n    httpClient;\n    constructor(URL, config) {\n        this.URL = URL;\n        if (typeof config === 'string') {\n            this.apiKey = config;\n            this.httpClient = defaultHttpClient();\n            this.deploymentId = defaultDeploymentId();\n            this.callbackToken = undefined;\n            this.callbackUrl = undefined;\n        }\n        else {\n            const configObj = config ?? {};\n            const { apiKey, deploymentId, httpClient, callbackToken, callbackUrl, headers } = configObj;\n            this.apiKey = apiKey;\n            this.httpClient = httpClient ?? defaultHttpClient();\n            this.deploymentId = deploymentId ?? defaultDeploymentId();\n            this.callbackToken = callbackToken;\n            this.callbackUrl = callbackUrl;\n            this.headers = headers;\n        }\n    }\n    /**\n     * Constructs a dictionary of the default & supplied request headers.\n     */\n    requestHeaders() {\n        const headers = {\n            'Content-Type': 'application/json',\n            'XDeployment-ID': this.deploymentId\n        };\n        if (this.apiKey != null && this.apiKey !== '') {\n            headers.Authorization = `Bearer ${this.apiKey}`;\n        }\n        if (this.callbackUrl != null && this.callbackUrl !== '') {\n            headers['X-CallbackUrl'] = this.callbackUrl;\n        }\n        if (this.callbackToken != null && this.callbackToken !== '') {\n            headers['X-CallbackToken'] = this.callbackToken;\n        }\n        if (this.headers != null) {\n            for (const key in this.headers) {\n                headers[key] = this.headers[key];\n            }\n        }\n        return headers;\n    }\n    /**\n     * Broadcasts a transaction via ARC.\n     *\n     * @param {Transaction} tx - The transaction to be broadcasted.\n     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n     */\n    async broadcast(tx) {\n        let rawTx;\n        try {\n            rawTx = tx.toHexEF();\n        }\n        catch (error) {\n            if (error.message ===\n                'All inputs must have source transactions when serializing to EF format') {\n                rawTx = tx.toHex();\n            }\n            else {\n                throw error;\n            }\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: this.requestHeaders(),\n            data: { rawTx }\n        };\n        try {\n            const response = await this.httpClient.request(`${this.URL}/v1/tx`, requestOptions);\n            if (response.ok) {\n                const { txid, extraInfo, txStatus, competingTxs } = response.data;\n                const broadcastRes = {\n                    status: 'success',\n                    txid,\n                    message: `${txStatus} ${extraInfo}`\n                };\n                if (competingTxs != null) {\n                    broadcastRes.competingTxs = competingTxs;\n                }\n                return broadcastRes;\n            }\n            else {\n                const st = typeof response.status;\n                const r = {\n                    status: 'error',\n                    code: st === 'number' || st === 'string'\n                        ? response.status.toString()\n                        : 'ERR_UNKNOWN',\n                    description: 'Unknown error'\n                };\n                let d = response.data;\n                if (typeof d === 'string') {\n                    try {\n                        d = JSON.parse(response.data);\n                    }\n                    catch {\n                        // Intentionally left empty\n                    }\n                }\n                if (typeof d === 'object') {\n                    if (d !== null) {\n                        r.more = d;\n                    }\n                    if ((d != null) && typeof d.txid === 'string') {\n                        r.txid = d.txid;\n                    }\n                    if ((d != null) && 'detail' in d && typeof d.detail === 'string') {\n                        r.description = d.detail;\n                    }\n                }\n                return r;\n            }\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                code: '500',\n                description: typeof error.message === 'string'\n                    ? error.message\n                    : 'Internal Server Error'\n            };\n        }\n    }\n    /**\n     * Broadcasts multiple transactions via ARC.\n     * Handles mixed responses where some transactions succeed and others fail.\n     *\n     * @param {Transaction[]} txs - Array of transactions to be broadcasted.\n     * @returns {Promise<Array<object>>} A promise that resolves to an array of objects.\n     */\n    async broadcastMany(txs) {\n        const rawTxs = txs.map((tx) => {\n            try {\n                return { rawTx: tx.toHexEF() };\n            }\n            catch (error) {\n                if (error.message ===\n                    'All inputs must have source transactions when serializing to EF format') {\n                    return { rawTx: tx.toHex() };\n                }\n                throw error;\n            }\n        });\n        const requestOptions = {\n            method: 'POST',\n            headers: this.requestHeaders(),\n            data: rawTxs\n        };\n        try {\n            const response = await this.httpClient.request(`${this.URL}/v1/txs`, requestOptions);\n            return response.data;\n        }\n        catch (error) {\n            const errorResponse = {\n                status: 'error',\n                code: '500',\n                description: typeof error.message === 'string' ? error.message : 'Internal Server Error'\n            };\n            return txs.map(() => errorResponse);\n        }\n    }\n}\n//# sourceMappingURL=ARC.js.map","import ARC from './ARC.js';\nexport function defaultBroadcaster(isTestnet = false, config = {}) {\n    return new ARC(isTestnet ? 'https://testnet.arc.gorillapool.io' : 'https://arc.gorillapool.io', config);\n}\n//# sourceMappingURL=DefaultBroadcaster.js.map","import { defaultHttpClient } from '../http/DefaultHttpClient.js';\n/**\n * Represents a chain tracker based on What's On Chain .\n */\nexport default class WhatsOnChain {\n    network;\n    apiKey;\n    URL;\n    httpClient;\n    /**\n     * Constructs an instance of the WhatsOnChain ChainTracker.\n     *\n     * @param {'main' | 'test' | 'stn'} network - The BSV network to use when calling the WhatsOnChain API.\n     * @param {WhatsOnChainConfig} config - Configuration options for the WhatsOnChain ChainTracker.\n     */\n    constructor(network = 'main', config = {}) {\n        const { apiKey, httpClient } = config;\n        this.network = network;\n        this.URL = `https://api.whatsonchain.com/v1/bsv/${network}`;\n        this.httpClient = httpClient ?? defaultHttpClient();\n        this.apiKey = apiKey ?? '';\n    }\n    async isValidRootForHeight(root, height) {\n        const requestOptions = {\n            method: 'GET',\n            headers: this.getHttpHeaders()\n        };\n        const response = await this.httpClient.request(`${this.URL}/block/${height}/header`, requestOptions);\n        if (response.ok) {\n            const { merkleroot } = response.data;\n            return merkleroot === root;\n        }\n        else if (response.status === 404) {\n            return false;\n        }\n        else {\n            throw new Error(`Failed to verify merkleroot for height ${height} because of an error: ${JSON.stringify(response.data)} `);\n        }\n    }\n    async currentHeight() {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                headers: this.getHttpHeaders()\n            };\n            const response = await this.httpClient.request(`${this.URL}/block/headers`, requestOptions);\n            if (response.ok) {\n                return response.data[0].height;\n            }\n            else {\n                throw new Error(`Failed to get current height because of an error: ${JSON.stringify(response.data)} `);\n            }\n        }\n        catch (error) {\n            throw new Error(`Failed to get current height because of an error: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    getHttpHeaders() {\n        const headers = {\n            Accept: 'application/json'\n        };\n        if (typeof this.apiKey === 'string' && this.apiKey.trim() !== '') {\n            headers.Authorization = this.apiKey;\n        }\n        return headers;\n    }\n}\n//# sourceMappingURL=WhatsOnChain.js.map","import WhatsOnChain from './WhatsOnChain.js';\nexport function defaultChainTracker() {\n    return new WhatsOnChain();\n}\n//# sourceMappingURL=DefaultChainTracker.js.map","import { Reader, Writer, toHex, toArray } from '../primitives/utils.js';\nimport { hash256 } from '../primitives/Hash.js';\n/**\n * Represents a Merkle Path, which is used to provide a compact proof of inclusion for a\n * transaction in a block. This class encapsulates all the details required for creating\n * and verifying Merkle Proofs.\n *\n * @class MerklePath\n * @property {number} blockHeight - The height of the block in which the transaction is included.\n * @property {Array<Array<{offset: number, hash?: string, txid?: boolean, duplicate?: boolean}>>} path -\n *           A tree structure representing the Merkle Path, with each level containing information\n *           about the nodes involved in constructing the proof.\n *\n * @example\n * // Creating and verifying a Merkle Path\n * const merklePath = MerklePath.fromHex('...');\n * const isValid = merklePath.verify(txid, chainTracker);\n *\n * @description\n * The MerklePath class is useful for verifying transactions in a lightweight and efficient manner without\n * needing the entire block data. This class offers functionalities for creating, converting,\n * and verifying these proofs.\n */\nexport default class MerklePath {\n    blockHeight;\n    path;\n    /**\n     * Creates a MerklePath instance from a hexadecimal string.\n     *\n     * @static\n     * @param {string} hex - The hexadecimal string representation of the Merkle Path.\n     * @returns {MerklePath} - A new MerklePath instance.\n     */\n    static fromHex(hex) {\n        return MerklePath.fromBinary(toArray(hex, 'hex'));\n    }\n    static fromReader(reader, legalOffsetsOnly = true) {\n        const blockHeight = reader.readVarIntNum();\n        const treeHeight = reader.readUInt8();\n        // Explicitly define the type of path as an array of arrays of leaf objects\n        const path = Array(treeHeight)\n            .fill(null)\n            .map(() => []);\n        let flags, offset, nLeavesAtThisHeight;\n        for (let level = 0; level < treeHeight; level++) {\n            nLeavesAtThisHeight = reader.readVarIntNum();\n            while (nLeavesAtThisHeight > 0) {\n                offset = reader.readVarIntNum();\n                flags = reader.readUInt8();\n                const leaf = { offset };\n                if ((flags & 1) !== 0) {\n                    leaf.duplicate = true;\n                }\n                else {\n                    if ((flags & 2) !== 0) {\n                        leaf.txid = true;\n                    }\n                    leaf.hash = toHex(reader.read(32).reverse());\n                }\n                // Ensure path[level] exists before pushing\n                if (!Array.isArray(path[level]) || path[level].length === 0) {\n                    path[level] = [];\n                }\n                path[level].push(leaf);\n                nLeavesAtThisHeight--;\n            }\n            // Sort the array based on the offset property\n            path[level].sort((a, b) => a.offset - b.offset);\n        }\n        return new MerklePath(blockHeight, path, legalOffsetsOnly);\n    }\n    /**\n     * Creates a MerklePath instance from a binary array.\n     *\n     * @static\n     * @param {number[]} bump - The binary array representation of the Merkle Path.\n     * @returns {MerklePath} - A new MerklePath instance.\n     */\n    static fromBinary(bump) {\n        const reader = new Reader(bump);\n        return MerklePath.fromReader(reader);\n    }\n    /**\n     *\n     * @static fromCoinbaseTxid\n     *\n     * Creates a MerklePath instance for a coinbase transaction in an empty block.\n     * This edge case is difficult to retrieve from standard APIs.\n     *\n     * @param {string} txid - The coinbase txid.\n     * @param {number} height - The height of the block.\n     * @returns {MerklePath} - A new MerklePath instance which assumes the tx is in a block with no other transactions.\n     */\n    static fromCoinbaseTxidAndHeight(txid, height) {\n        return new MerklePath(height, [[{ offset: 0, hash: txid, txid: true }]]);\n    }\n    constructor(blockHeight, path, legalOffsetsOnly = true) {\n        this.blockHeight = blockHeight;\n        this.path = path;\n        // store all of the legal offsets which we expect given the txid indices.\n        const legalOffsets = Array(this.path.length)\n            .fill(0)\n            .map(() => new Set());\n        this.path.forEach((leaves, height) => {\n            if (leaves.length === 0 && height === 0) {\n                throw new Error(`Empty level at height: ${height}`);\n            }\n            const offsetsAtThisHeight = new Set();\n            leaves.forEach((leaf) => {\n                if (offsetsAtThisHeight.has(leaf.offset)) {\n                    throw new Error(`Duplicate offset: ${leaf.offset}, at height: ${height}`);\n                }\n                offsetsAtThisHeight.add(leaf.offset);\n                if (height === 0) {\n                    if (leaf.duplicate !== true) {\n                        for (let h = 1; h < this.path.length; h++) {\n                            legalOffsets[h].add((leaf.offset >> h) ^ 1);\n                        }\n                    }\n                }\n                else {\n                    if (legalOffsetsOnly && !legalOffsets[height].has(leaf.offset)) {\n                        throw new Error(`Invalid offset: ${leaf.offset}, at height: ${height}, with legal offsets: ${Array.from(legalOffsets[height]).join(', ')}`);\n                    }\n                }\n            });\n        });\n        // every txid must calculate to the same root.\n        let root;\n        this.path[0].forEach((leaf, idx) => {\n            if (idx === 0)\n                root = this.computeRoot(leaf.hash);\n            if (root !== this.computeRoot(leaf.hash)) {\n                throw new Error('Mismatched roots');\n            }\n        });\n    }\n    /**\n     * Converts the MerklePath to a binary array format.\n     *\n     * @returns {number[]} - The binary array representation of the Merkle Path.\n     */\n    toBinary() {\n        const writer = new Writer();\n        writer.writeVarIntNum(this.blockHeight);\n        const treeHeight = this.path.length;\n        writer.writeUInt8(treeHeight);\n        for (let level = 0; level < treeHeight; level++) {\n            const nLeaves = Object.keys(this.path[level]).length;\n            writer.writeVarIntNum(nLeaves);\n            for (const leaf of this.path[level]) {\n                writer.writeVarIntNum(leaf.offset);\n                let flags = 0;\n                if (leaf?.duplicate === true) {\n                    flags |= 1;\n                }\n                if (leaf?.txid !== undefined && leaf.txid !== null) {\n                    flags |= 2;\n                }\n                writer.writeUInt8(flags);\n                if ((flags & 1) === 0) {\n                    writer.write(toArray(leaf.hash, 'hex').reverse());\n                }\n            }\n        }\n        return writer.toArray();\n    }\n    /**\n     * Converts the MerklePath to a hexadecimal string format.\n     *\n     * @returns {string} - The hexadecimal string representation of the Merkle Path.\n     */\n    toHex() {\n        return toHex(this.toBinary());\n    }\n    //\n    indexOf(txid) {\n        const leaf = this.path[0].find((l) => l.hash === txid);\n        if (leaf === null || leaf === undefined) {\n            throw new Error(`Transaction ID ${txid} not found in the Merkle Path`);\n        }\n        return leaf.offset;\n    }\n    /**\n     * Computes the Merkle root from the provided transaction ID.\n     *\n     * @param {string} txid - The transaction ID to compute the Merkle root for. If not provided, the root will be computed from an unspecified branch, and not all branches will be validated!\n     * @returns {string} - The computed Merkle root as a hexadecimal string.\n     * @throws {Error} - If the transaction ID is not part of the Merkle Path.\n     */\n    computeRoot(txid) {\n        if (typeof txid !== 'string') {\n            const foundLeaf = this.path[0].find((leaf) => Boolean(leaf?.hash));\n            if (foundLeaf === null || foundLeaf === undefined) {\n                throw new Error('No valid leaf found in the Merkle Path');\n            }\n            txid = foundLeaf.hash;\n        }\n        // Find the index of the txid at the lowest level of the Merkle tree\n        if (typeof txid !== 'string') {\n            throw new Error('Transaction ID is undefined');\n        }\n        const index = this.indexOf(txid);\n        if (typeof index !== 'number') {\n            throw new Error(`This proof does not contain the txid: ${txid ?? 'undefined'}`);\n        }\n        // Calculate the root using the index as a way to determine which direction to concatenate.\n        const hash = (m) => toHex(hash256(toArray(m, 'hex').reverse()).reverse());\n        let workingHash = txid;\n        // special case for blocks with only one transaction\n        if (this.path.length === 1 && this.path[0].length === 1)\n            return workingHash;\n        for (let height = 0; height < this.path.length; height++) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const leaves = this.path[height];\n            const offset = (index >> height) ^ 1;\n            const leaf = this.findOrComputeLeaf(height, offset);\n            if (typeof leaf !== 'object') {\n                throw new Error(`Missing hash for index ${index} at height ${height}`);\n            }\n            if (leaf.duplicate === true) {\n                workingHash = hash((workingHash ?? '') + (workingHash ?? ''));\n            }\n            else if (offset % 2 !== 0) {\n                workingHash = hash((leaf.hash ?? '') + (workingHash ?? ''));\n            }\n            else {\n                workingHash = hash((workingHash ?? '') + (leaf.hash ?? ''));\n            }\n        }\n        return workingHash;\n    }\n    /**\n     * Find leaf with `offset` at `height` or compute from level below, recursively.\n     *\n     * Does not add computed leaves to path.\n     *\n     * @param height\n     * @param offset\n     */\n    findOrComputeLeaf(height, offset) {\n        const hash = (m) => toHex(hash256(toArray(m, 'hex').reverse()).reverse());\n        let leaf = this.path[height].find((l) => l.offset === offset);\n        if (leaf != null)\n            return leaf;\n        if (height === 0)\n            return undefined;\n        const h = height - 1;\n        const l = offset << 1;\n        const leaf0 = this.findOrComputeLeaf(h, l);\n        if (leaf0 == null || leaf0.hash == null || leaf0.hash === '')\n            return undefined;\n        const leaf1 = this.findOrComputeLeaf(h, l + 1);\n        if (leaf1 == null)\n            return undefined;\n        let workinghash;\n        if (leaf1.duplicate === true) {\n            workinghash = hash(leaf0.hash + leaf0.hash);\n        }\n        else {\n            workinghash = hash((leaf1.hash ?? '') + (leaf0.hash ?? ''));\n        }\n        leaf = {\n            offset,\n            hash: workinghash\n        };\n        return leaf;\n    }\n    /**\n     * Verifies if the given transaction ID is part of the Merkle tree at the specified block height.\n     *\n     * @param {string} txid - The transaction ID to verify.\n     * @param {ChainTracker} chainTracker - The ChainTracker instance used to verify the Merkle root.\n     * @returns {boolean} - True if the transaction ID is valid within the Merkle Path at the specified block height.\n     */\n    async verify(txid, chainTracker) {\n        const root = this.computeRoot(txid);\n        if (this.indexOf(txid) === 0) {\n            // Coinbase transaction outputs can only be spent once they're 100 blocks deep.\n            const height = await chainTracker.currentHeight();\n            if (this.blockHeight + 100 < height) {\n                return false;\n            }\n        }\n        // Use the chain tracker to determine whether this is a valid merkle root at the given block height\n        return await chainTracker.isValidRootForHeight(root, this.blockHeight);\n    }\n    /**\n     * Combines this MerklePath with another to create a compound proof.\n     *\n     * @param {MerklePath} other - Another MerklePath to combine with this path.\n     * @throws {Error} - If the paths have different block heights or roots.\n     */\n    combine(other) {\n        if (this.blockHeight !== other.blockHeight) {\n            throw new Error('You cannot combine paths which do not have the same block height.');\n        }\n        const root1 = this.computeRoot();\n        const root2 = other.computeRoot();\n        if (root1 !== root2) {\n            throw new Error('You cannot combine paths which do not have the same root.');\n        }\n        const combinedPath = [];\n        for (let h = 0; h < this.path.length; h++) {\n            combinedPath.push([]);\n            for (let l = 0; l < this.path[h].length; l++) {\n                combinedPath[h].push(this.path[h][l]);\n            }\n            for (let l = 0; l < other.path[h].length; l++) {\n                if (combinedPath[h].find((leaf) => leaf.offset === other.path[h][l].offset) === undefined) {\n                    combinedPath[h].push(other.path[h][l]);\n                }\n                else {\n                    // Ensure that any elements which appear in both are not downgraded to a non txid.\n                    if (other.path[h][l]?.txid !== undefined && other.path[h][l]?.txid !== null) {\n                        const target = combinedPath[h].find((leaf) => leaf.offset === other.path[h][l].offset);\n                        if (target !== null && target !== undefined) {\n                            target.txid = true;\n                        }\n                    }\n                }\n            }\n        }\n        this.path = combinedPath;\n        this.trim();\n    }\n    /**\n     * Remove all internal nodes that are not required by level zero txid nodes.\n     * Assumes that at least all required nodes are present.\n     * Leaves all levels sorted by increasing offset.\n     */\n    trim() {\n        const pushIfNew = (v, a) => {\n            if (a.length === 0 || a.slice(-1)[0] !== v) {\n                a.push(v);\n            }\n        };\n        const dropOffsetsFromLevel = (dropOffsets, level) => {\n            for (let i = dropOffsets.length; i >= 0; i--) {\n                const l = this.path[level].findIndex((n) => n.offset === dropOffsets[i]);\n                if (l >= 0) {\n                    this.path[level].splice(l, 1);\n                }\n            }\n        };\n        const nextComputedOffsets = (cos) => {\n            const ncos = [];\n            for (const o of cos) {\n                pushIfNew(o >> 1, ncos);\n            }\n            return ncos;\n        };\n        let computedOffsets = []; // in next level\n        let dropOffsets = [];\n        for (let h = 0; h < this.path.length; h++) {\n            // Sort each level by increasing offset order\n            this.path[h].sort((a, b) => a.offset - b.offset);\n        }\n        for (let l = 0; l < this.path[0].length; l++) {\n            const n = this.path[0][l];\n            if (n.txid === true) {\n                // level 0 must enable computing level 1 for txid nodes\n                pushIfNew(n.offset >> 1, computedOffsets);\n            }\n            else {\n                const isOdd = n.offset % 2 === 1;\n                const peer = this.path[0][l + (isOdd ? -1 : 1)];\n                if (peer.txid === undefined || peer.txid === null || !peer.txid) {\n                    // drop non-txid level 0 nodes without a txid peer\n                    pushIfNew(peer.offset, dropOffsets);\n                }\n            }\n        }\n        dropOffsetsFromLevel(dropOffsets, 0);\n        for (let h = 1; h < this.path.length; h++) {\n            dropOffsets = computedOffsets;\n            computedOffsets = nextComputedOffsets(computedOffsets);\n            dropOffsetsFromLevel(dropOffsets, h);\n        }\n    }\n}\n//# sourceMappingURL=MerklePath.js.map","import { hash256 } from '../primitives/Hash.js';\nimport { toHex, toArray } from '../primitives/utils.js';\nimport Transaction from './Transaction.js';\nimport { BEEF_V2, TX_DATA_FORMAT } from './Beef.js';\n/**\n * A single bitcoin transaction associated with a `Beef` validity proof set.\n *\n * Simple case is transaction data included directly, either as raw bytes or fully parsed data, or both.\n *\n * Supports 'known' transactions which are represented by just their txid.\n * It is assumed that intended consumer of this beef already has validity proof for such a transaction,\n * which they can merge if necessary to create a valid beef.\n */\nexport default class BeefTx {\n    _bumpIndex;\n    _tx;\n    _rawTx;\n    _txid;\n    inputTxids = [];\n    /**\n     * true if `hasProof` or all inputs chain to `hasProof`.\n     *\n     * Typically set by sorting transactions by proven dependency chains.\n     */\n    isValid = undefined;\n    get bumpIndex() {\n        return this._bumpIndex;\n    }\n    set bumpIndex(v) {\n        this._bumpIndex = v;\n        this.updateInputTxids();\n    }\n    get hasProof() {\n        return this._bumpIndex !== undefined;\n    }\n    get isTxidOnly() {\n        return this._txid !== undefined && this._txid !== null && (this._rawTx == null) && (this._tx == null);\n    }\n    get txid() {\n        if (this._txid !== undefined && this._txid !== null && this._txid !== '')\n            return this._txid;\n        if (this._tx != null) {\n            this._txid = this._tx.id('hex');\n            return this._txid;\n        }\n        if (this._rawTx != null) {\n            this._txid = toHex(hash256(this._rawTx));\n            return this._txid;\n        }\n        throw new Error('Internal');\n    }\n    get tx() {\n        if (this._tx != null)\n            return this._tx;\n        if (this._rawTx != null) {\n            this._tx = Transaction.fromBinary(this._rawTx);\n            return this._tx;\n        }\n        return undefined;\n    }\n    get rawTx() {\n        if (this._rawTx != null)\n            return this._rawTx;\n        if (this._tx != null) {\n            this._rawTx = this._tx.toBinary();\n            return this._rawTx;\n        }\n        return undefined;\n    }\n    /**\n     * @param tx If string, must be a valid txid. If `number[]` must be a valid serialized transaction.\n     * @param bumpIndex If transaction already has a proof in the beef to which it will be added.\n     */\n    constructor(tx, bumpIndex) {\n        if (typeof tx === 'string') {\n            this._txid = tx;\n        }\n        else if (Array.isArray(tx)) {\n            this._rawTx = tx;\n        }\n        else {\n            this._tx = tx;\n        }\n        this.bumpIndex = bumpIndex;\n        this.updateInputTxids();\n    }\n    static fromTx(tx, bumpIndex) {\n        return new BeefTx(tx, bumpIndex);\n    }\n    static fromRawTx(rawTx, bumpIndex) {\n        return new BeefTx(rawTx, bumpIndex);\n    }\n    static fromTxid(txid, bumpIndex) {\n        return new BeefTx(txid, bumpIndex);\n    }\n    updateInputTxids() {\n        if (this.hasProof || (this.tx == null)) {\n            // If we have a proof, or don't have a parsed transaction\n            this.inputTxids = [];\n        }\n        else {\n            const inputTxids = {}; // ✅ Explicit object type\n            for (const input of this.tx.inputs) {\n                if (input.sourceTXID !== undefined && input.sourceTXID !== null && input.sourceTXID !== '') {\n                    // ✅ Ensure sourceTXID is defined\n                    inputTxids[input.sourceTXID] = true;\n                }\n            }\n            this.inputTxids = Object.keys(inputTxids);\n        }\n    }\n    toWriter(writer, version) {\n        const writeByte = (bb) => {\n            writer.writeUInt8(bb);\n        };\n        const writeTxid = () => {\n            if (this._txid == null) {\n                throw new Error('Transaction ID (_txid) is undefined');\n            }\n            writer.writeReverse(toArray(this._txid, 'hex'));\n        };\n        const writeTx = () => {\n            if (this._rawTx != null) {\n                writer.write(this._rawTx);\n            }\n            else if (this._tx != null) {\n                writer.write(this._tx.toBinary());\n            }\n            else {\n                throw new Error('a valid serialized Transaction is expected');\n            }\n        };\n        const writeBumpIndex = () => {\n            if (this.bumpIndex === undefined) {\n                writeByte(TX_DATA_FORMAT.RAWTX); // 0\n            }\n            else {\n                writeByte(TX_DATA_FORMAT.RAWTX_AND_BUMP_INDEX); // 1\n                writer.writeVarIntNum(this.bumpIndex); // the index of the associated bump\n            }\n        };\n        if (version === BEEF_V2) {\n            if (this.isTxidOnly) {\n                writeByte(TX_DATA_FORMAT.TXID_ONLY);\n                writeTxid();\n            }\n            else if (this.bumpIndex !== undefined) {\n                writeByte(TX_DATA_FORMAT.RAWTX_AND_BUMP_INDEX);\n                writer.writeVarIntNum(this.bumpIndex);\n                writeTx();\n            }\n            else {\n                writeByte(TX_DATA_FORMAT.RAWTX);\n                writeTx();\n            }\n        }\n        else {\n            writeTx();\n            writeBumpIndex();\n        }\n    }\n    static fromReader(br, version) {\n        let data;\n        let bumpIndex;\n        let beefTx;\n        if (version === BEEF_V2) {\n            // V2\n            const format = br.readUInt8();\n            if (format === TX_DATA_FORMAT.TXID_ONLY) {\n                beefTx = BeefTx.fromTxid(toHex(br.readReverse(32)));\n            }\n            else {\n                if (format === TX_DATA_FORMAT.RAWTX_AND_BUMP_INDEX) {\n                    bumpIndex = br.readVarIntNum();\n                }\n                data = Transaction.fromReader(br);\n                beefTx = BeefTx.fromTx(data, bumpIndex);\n            }\n        }\n        else {\n            // V1\n            data = Transaction.fromReader(br);\n            bumpIndex = br.readUInt8() !== 0 ? br.readVarIntNum() : undefined;\n            beefTx = BeefTx.fromTx(data, bumpIndex);\n        }\n        return beefTx;\n    }\n}\n//# sourceMappingURL=BeefTx.js.map","import UnlockingScript from '../script/UnlockingScript.js';\nimport LockingScript from '../script/LockingScript.js';\nimport { Reader, Writer, toHex, toArray } from '../primitives/utils.js';\nimport { hash256 } from '../primitives/Hash.js';\nimport SatoshisPerKilobyte from './fee-models/SatoshisPerKilobyte.js';\nimport Spend from '../script/Spend.js';\nimport { defaultBroadcaster } from './broadcasters/DefaultBroadcaster.js';\nimport { defaultChainTracker } from './chaintrackers/DefaultChainTracker.js';\nimport { Beef, BEEF_V1 } from './Beef.js';\nimport P2PKH from '../script/templates/P2PKH.js';\n/**\n * Represents a complete Bitcoin transaction. This class encapsulates all the details\n * required for creating, signing, and processing a Bitcoin transaction, including\n * inputs, outputs, and various transaction-related methods.\n *\n * @class Transaction\n * @property {number} version - The version number of the transaction. Used to specify\n *           which set of rules this transaction follows.\n * @property {TransactionInput[]} inputs - An array of TransactionInput objects, representing\n *           the inputs for the transaction. Each input references a previous transaction's output.\n * @property {TransactionOutput[]} outputs - An array of TransactionOutput objects, representing\n *           the outputs for the transaction. Each output specifies the amount of satoshis to be\n *           transferred and the conditions under which they can be spent.\n * @property {number} lockTime - The lock time of the transaction. If non-zero, it specifies the\n *           earliest time or block height at which the transaction can be added to the block chain.\n * @property {Record<string, any>} metadata - A key-value store for attaching additional data to\n *           the transaction object, not included in the transaction itself. Useful for adding descriptions, internal reference numbers, or other information.\n * @property {MerkleProof} [merklePath] - Optional. A merkle proof demonstrating the transaction's\n *           inclusion in a block. Useful for transaction verification using SPV.\n *\n * @example\n * // Creating a new transaction\n * let tx = new Transaction();\n * tx.addInput(...);\n * tx.addOutput(...);\n * await tx.fee();\n * await tx.sign();\n * await tx.broadcast();\n *\n * @description\n * The Transaction class provides comprehensive\n * functionality to handle various aspects of transaction creation, including\n * adding inputs and outputs, computing fees, signing the transaction, and\n * generating its binary or hexadecimal representation.\n */\nexport default class Transaction {\n    version;\n    inputs;\n    outputs;\n    lockTime;\n    metadata;\n    merklePath;\n    cachedHash;\n    // Recursive function for adding merkle proofs or input transactions\n    static addPathOrInputs(obj, transactions, BUMPs) {\n        if (typeof obj.pathIndex === 'number') {\n            const path = BUMPs[obj.pathIndex];\n            if (typeof path !== 'object') {\n                throw new Error('Invalid merkle path index found in BEEF!');\n            }\n            obj.tx.merklePath = path;\n        }\n        else {\n            for (const input of obj.tx.inputs) {\n                if (input.sourceTXID === undefined) {\n                    throw new Error('Input sourceTXID is undefined');\n                }\n                const sourceObj = transactions[input.sourceTXID];\n                if (typeof sourceObj !== 'object') {\n                    throw new Error(`Reference to unknown TXID in BEEF: ${input.sourceTXID ?? 'undefined'}`);\n                }\n                input.sourceTransaction = sourceObj.tx;\n                this.addPathOrInputs(sourceObj, transactions, BUMPs);\n            }\n        }\n    }\n    /**\n     * Creates a new transaction, linked to its inputs and their associated merkle paths, from a BEEF V1, V2 or Atomic.\n     * Optionally, you can provide a specific TXID to retrieve a particular transaction from the BEEF data.\n     * If the TXID is provided but not found in the BEEF data, an error will be thrown.\n     * If no TXID is provided, the last transaction in the BEEF data is returned, or the atomic txid.\n     * @param beef A binary representation of transactions in BEEF format.\n     * @param txid Optional TXID of the transaction to retrieve from the BEEF data.\n     * @returns An anchored transaction, linked to its associated inputs populated with merkle paths.\n     */\n    static fromBEEF(beef, txid) {\n        const { tx } = Transaction.fromAnyBeef(beef, txid);\n        return tx;\n    }\n    /**\n     * Creates a new transaction from an Atomic BEEF (BRC-95) structure.\n     * Extracts the subject transaction and supporting merkle path and source transactions contained in the BEEF data\n     *\n     * @param beef A binary representation of an Atomic BEEF structure.\n     * @returns The subject transaction, linked to its associated inputs populated with merkle paths.\n     */\n    static fromAtomicBEEF(beef) {\n        const { tx, txid, beef: b } = Transaction.fromAnyBeef(beef);\n        if (txid !== b.atomicTxid) {\n            if (b.atomicTxid != null) {\n                throw new Error(`Transaction with TXID ${b.atomicTxid} not found in BEEF data.`);\n            }\n            else {\n                throw new Error('beef must conform to BRC-95 and must contain the subject txid.');\n            }\n        }\n        return tx;\n    }\n    static fromAnyBeef(beef, txid) {\n        const b = Beef.fromBinary(beef);\n        if (b.txs.length < 1) {\n            throw new Error('beef must include at least one transaction.');\n        }\n        const target = txid ?? b.atomicTxid ?? b.txs.slice(-1)[0].txid;\n        const tx = b.findAtomicTransaction(target);\n        if (tx == null) {\n            if (txid != null) {\n                throw new Error(`Transaction with TXID ${target} not found in BEEF data.`);\n            }\n            else {\n                throw new Error('beef does not contain transaction for atomic txid.');\n            }\n        }\n        return { tx, beef: b, txid: target };\n    }\n    /**\n     * Creates a new transaction, linked to its inputs and their associated merkle paths, from a EF (BRC-30) structure.\n     * @param ef A binary representation of a transaction in EF format.\n     * @returns An extended transaction, linked to its associated inputs by locking script and satoshis amounts only.\n     */\n    static fromEF(ef) {\n        const br = new Reader(ef);\n        const version = br.readUInt32LE();\n        if (toHex(br.read(6)) !== '0000000000ef') {\n            throw new Error('Invalid EF marker');\n        }\n        const inputsLength = br.readVarIntNum();\n        const inputs = [];\n        for (let i = 0; i < inputsLength; i++) {\n            const sourceTXID = toHex(br.readReverse(32));\n            const sourceOutputIndex = br.readUInt32LE();\n            const scriptLength = br.readVarIntNum();\n            const scriptBin = br.read(scriptLength);\n            const unlockingScript = UnlockingScript.fromBinary(scriptBin);\n            const sequence = br.readUInt32LE();\n            const satoshis = br.readUInt64LEBn().toNumber();\n            const lockingScriptLength = br.readVarIntNum();\n            const lockingScriptBin = br.read(lockingScriptLength);\n            const lockingScript = LockingScript.fromBinary(lockingScriptBin);\n            const sourceTransaction = new Transaction(undefined, [], [], undefined);\n            sourceTransaction.outputs = Array(sourceOutputIndex + 1).fill(null);\n            sourceTransaction.outputs[sourceOutputIndex] = {\n                satoshis,\n                lockingScript\n            };\n            inputs.push({\n                sourceTransaction,\n                sourceTXID,\n                sourceOutputIndex,\n                unlockingScript,\n                sequence\n            });\n        }\n        const outputsLength = br.readVarIntNum();\n        const outputs = [];\n        for (let i = 0; i < outputsLength; i++) {\n            const satoshis = br.readUInt64LEBn().toNumber();\n            const scriptLength = br.readVarIntNum();\n            const scriptBin = br.read(scriptLength);\n            const lockingScript = LockingScript.fromBinary(scriptBin);\n            outputs.push({\n                satoshis,\n                lockingScript\n            });\n        }\n        const lockTime = br.readUInt32LE();\n        return new Transaction(version, inputs, outputs, lockTime);\n    }\n    /**\n     * Since the validation of blockchain data is atomically transaction data validation,\n     * any application seeking to validate data in output scripts must store the entire transaction as well.\n     * Since the transaction data includes the output script data, saving a second copy of potentially\n     * large scripts can bloat application storage requirements.\n     *\n     * This function efficiently parses binary transaction data to determine the offsets and lengths of each script.\n     * This supports the efficient retreival of script data from transaction data.\n     *\n     * @param bin binary transaction data\n     * @returns {\n     *   inputs: { vin: number, offset: number, length: number }[]\n     *   outputs: { vout: number, offset: number, length: number }[]\n     * }\n     */\n    static parseScriptOffsets(bin) {\n        const br = new Reader(bin);\n        const inputs = [];\n        const outputs = [];\n        br.pos += 4; // version\n        const inputsLength = br.readVarIntNum();\n        for (let i = 0; i < inputsLength; i++) {\n            br.pos += 36; // txid and vout\n            const scriptLength = br.readVarIntNum();\n            inputs.push({ vin: i, offset: br.pos, length: scriptLength });\n            br.pos += scriptLength + 4; // script and sequence\n        }\n        const outputsLength = br.readVarIntNum();\n        for (let i = 0; i < outputsLength; i++) {\n            br.pos += 8; // satoshis\n            const scriptLength = br.readVarIntNum();\n            outputs.push({ vout: i, offset: br.pos, length: scriptLength });\n            br.pos += scriptLength;\n        }\n        return { inputs, outputs };\n    }\n    static fromReader(br) {\n        const version = br.readUInt32LE();\n        const inputsLength = br.readVarIntNum();\n        const inputs = [];\n        for (let i = 0; i < inputsLength; i++) {\n            const sourceTXID = toHex(br.readReverse(32));\n            const sourceOutputIndex = br.readUInt32LE();\n            const scriptLength = br.readVarIntNum();\n            const scriptBin = br.read(scriptLength);\n            const unlockingScript = UnlockingScript.fromBinary(scriptBin);\n            const sequence = br.readUInt32LE();\n            inputs.push({\n                sourceTXID,\n                sourceOutputIndex,\n                unlockingScript,\n                sequence\n            });\n        }\n        const outputsLength = br.readVarIntNum();\n        const outputs = [];\n        for (let i = 0; i < outputsLength; i++) {\n            const satoshis = br.readUInt64LEBn().toNumber();\n            const scriptLength = br.readVarIntNum();\n            const scriptBin = br.read(scriptLength);\n            const lockingScript = LockingScript.fromBinary(scriptBin);\n            outputs.push({\n                satoshis,\n                lockingScript\n            });\n        }\n        const lockTime = br.readUInt32LE();\n        return new Transaction(version, inputs, outputs, lockTime);\n    }\n    /**\n     * Creates a Transaction instance from a binary array.\n     *\n     * @static\n     * @param {number[]} bin - The binary array representation of the transaction.\n     * @returns {Transaction} - A new Transaction instance.\n     */\n    static fromBinary(bin) {\n        const br = new Reader(bin);\n        return Transaction.fromReader(br);\n    }\n    /**\n     * Creates a Transaction instance from a hexadecimal string.\n     *\n     * @static\n     * @param {string} hex - The hexadecimal string representation of the transaction.\n     * @returns {Transaction} - A new Transaction instance.\n     */\n    static fromHex(hex) {\n        return Transaction.fromBinary(toArray(hex, 'hex'));\n    }\n    /**\n     * Creates a Transaction instance from a hexadecimal string encoded EF.\n     *\n     * @static\n     * @param {string} hex - The hexadecimal string representation of the transaction EF.\n     * @returns {Transaction} - A new Transaction instance.\n     */\n    static fromHexEF(hex) {\n        return Transaction.fromEF(toArray(hex, 'hex'));\n    }\n    /**\n     * Creates a Transaction instance from a hexadecimal string encoded BEEF.\n     * Optionally, you can provide a specific TXID to retrieve a particular transaction from the BEEF data.\n     * If the TXID is provided but not found in the BEEF data, an error will be thrown.\n     * If no TXID is provided, the last transaction in the BEEF data is returned.\n     *\n     * @static\n     * @param {string} hex - The hexadecimal string representation of the transaction BEEF.\n     * @param {string} [txid] - Optional TXID of the transaction to retrieve from the BEEF data.\n     * @returns {Transaction} - A new Transaction instance.\n     */\n    static fromHexBEEF(hex, txid) {\n        return Transaction.fromBEEF(toArray(hex, 'hex'), txid);\n    }\n    constructor(version = 1, inputs = [], outputs = [], lockTime = 0, metadata = new Map(), merklePath) {\n        this.version = version;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.lockTime = lockTime;\n        this.metadata = metadata;\n        this.merklePath = merklePath;\n    }\n    /**\n     * Adds a new input to the transaction.\n     *\n     * @param {TransactionInput} input - The TransactionInput object to add to the transaction.\n     * @throws {Error} - If the input does not have a sourceTXID or sourceTransaction defined.\n     */\n    addInput(input) {\n        if (typeof input.sourceTXID === 'undefined' &&\n            typeof input.sourceTransaction === 'undefined') {\n            throw new Error('A reference to an an input transaction is required. If the input transaction itself cannot be referenced, its TXID must still be provided.');\n        }\n        // If the input sequence number hasn't been set, the expectation is that it is final.\n        if (typeof input.sequence === 'undefined') {\n            input.sequence = 0xffffffff;\n        }\n        this.cachedHash = undefined;\n        this.inputs.push(input);\n    }\n    /**\n     * Adds a new output to the transaction.\n     *\n     * @param {TransactionOutput} output - The TransactionOutput object to add to the transaction.\n     */\n    addOutput(output) {\n        this.cachedHash = undefined;\n        if (output.change !== true) {\n            if (typeof output.satoshis === 'undefined') {\n                throw new Error('either satoshis must be defined or change must be set to true');\n            }\n            if (output.satoshis < 0) {\n                throw new Error('satoshis must be a positive integer or zero');\n            }\n        }\n        if (output.lockingScript == null)\n            throw new Error('lockingScript must be defined');\n        this.outputs.push(output);\n    }\n    /**\n     * Adds a new P2PKH output to the transaction.\n     *\n     * @param {number[] | string} address - The P2PKH address of the output.\n     * @param {number} [satoshis] - The number of satoshis to send to the address - if not provided, the output is considered a change output.\n     *\n     */\n    addP2PKHOutput(address, satoshis) {\n        const lockingScript = new P2PKH().lock(address);\n        if (typeof satoshis === 'undefined') {\n            return this.addOutput({ lockingScript, change: true });\n        }\n        this.addOutput({\n            lockingScript,\n            satoshis\n        });\n    }\n    /**\n     * Updates the transaction's metadata.\n     *\n     * @param {Record<string, any>} metadata - The metadata object to merge into the existing metadata.\n     */\n    updateMetadata(metadata) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n    }\n    /**\n     * Computes fees prior to signing.\n     * If no fee model is provided, uses a SatoshisPerKilobyte fee model that pays 1 sat/kb.\n     * If fee is a number, the transaction uses that value as fee.\n     *\n     * @param modelOrFee - The initialized fee model to use or fixed fee for the transaction\n     * @param changeDistribution - Specifies how the change should be distributed\n     * amongst the change outputs\n     *\n     */\n    async fee(modelOrFee = new SatoshisPerKilobyte(1), changeDistribution = 'equal') {\n        this.cachedHash = undefined;\n        if (typeof modelOrFee === 'number') {\n            const sats = modelOrFee;\n            modelOrFee = {\n                computeFee: async () => sats\n            };\n        }\n        const fee = await modelOrFee.computeFee(this);\n        const change = this.calculateChange(fee);\n        if (change <= 0) {\n            this.outputs = this.outputs.filter((output) => output.change !== true);\n            return;\n        }\n        this.distributeChange(change, changeDistribution);\n    }\n    calculateChange(fee) {\n        let change = 0;\n        for (const input of this.inputs) {\n            if (typeof input.sourceTransaction !== 'object') {\n                throw new Error('Source transactions are required for all inputs during fee computation');\n            }\n            change +=\n                input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis ?? 0;\n        }\n        change -= fee;\n        for (const out of this.outputs) {\n            if (out.change !== true) {\n                if (out.satoshis !== undefined) {\n                    change -= out.satoshis;\n                }\n            }\n        }\n        return change;\n    }\n    distributeChange(change, changeDistribution) {\n        let distributedChange = 0;\n        const changeOutputs = this.outputs.filter((out) => out.change);\n        if (changeDistribution === 'random') {\n            distributedChange = this.distributeRandomChange(change, changeOutputs);\n        }\n        else if (changeDistribution === 'equal') {\n            distributedChange = this.distributeEqualChange(change, changeOutputs);\n        }\n        if (distributedChange < change) {\n            const lastOutput = this.outputs[this.outputs.length - 1];\n            if (lastOutput.satoshis !== undefined) {\n                lastOutput.satoshis += change - distributedChange;\n            }\n            else {\n                lastOutput.satoshis = change - distributedChange;\n            }\n        }\n    }\n    distributeRandomChange(change, changeOutputs) {\n        let distributedChange = 0;\n        let changeToUse = change;\n        const benfordNumbers = Array(changeOutputs.length).fill(1);\n        changeToUse -= changeOutputs.length;\n        distributedChange += changeOutputs.length;\n        for (let i = 0; i < changeOutputs.length - 1; i++) {\n            const portion = this.benfordNumber(0, changeToUse);\n            benfordNumbers[i] = benfordNumbers[i] + portion;\n            distributedChange += portion;\n            changeToUse -= portion;\n        }\n        for (const output of this.outputs) {\n            if (output.change === true)\n                output.satoshis = benfordNumbers.shift();\n        }\n        return distributedChange;\n    }\n    distributeEqualChange(change, changeOutputs) {\n        let distributedChange = 0;\n        const perOutput = Math.floor(change / changeOutputs.length);\n        for (const out of changeOutputs) {\n            distributedChange += perOutput;\n            out.satoshis = perOutput;\n        }\n        return distributedChange;\n    }\n    benfordNumber(min, max) {\n        const d = Math.floor(Math.random() * 9) + 1;\n        return Math.floor(min + ((max - min) * Math.log10(1 + 1 / d)) / Math.log10(10));\n    }\n    /**\n     * Utility method that returns the current fee based on inputs and outputs\n     *\n     * @returns The current transaction fee\n     */\n    getFee() {\n        let totalIn = 0;\n        for (const input of this.inputs) {\n            if (typeof input.sourceTransaction !== 'object') {\n                throw new Error('Source transactions or sourceSatoshis are required for all inputs to calculate fee');\n            }\n            totalIn +=\n                input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis ?? 0;\n        }\n        let totalOut = 0;\n        for (const output of this.outputs) {\n            totalOut += output.satoshis ?? 0;\n        }\n        return totalIn - totalOut;\n    }\n    /**\n     * Signs a transaction, hydrating all its unlocking scripts based on the provided script templates where they are available.\n     */\n    async sign() {\n        this.cachedHash = undefined;\n        for (const out of this.outputs) {\n            if (typeof out.satoshis === 'undefined') {\n                if (out.change === true) {\n                    throw new Error('There are still change outputs with uncomputed amounts. Use the fee() method to compute the change amounts and transaction fees prior to signing.');\n                }\n                else {\n                    throw new Error('One or more transaction outputs is missing an amount. Ensure all output amounts are provided before signing.');\n                }\n            }\n        }\n        const unlockingScripts = await Promise.all(this.inputs.map(async (x, i) => {\n            if (typeof this.inputs[i].unlockingScriptTemplate === 'object') {\n                return await this.inputs[i]?.unlockingScriptTemplate?.sign(this, i);\n            }\n            else {\n                return await Promise.resolve(undefined);\n            }\n        }));\n        for (let i = 0, l = this.inputs.length; i < l; i++) {\n            if (typeof this.inputs[i].unlockingScriptTemplate === 'object') {\n                this.inputs[i].unlockingScript = unlockingScripts[i];\n            }\n        }\n    }\n    /**\n     * Broadcasts a transaction.\n     *\n     * @param broadcaster The Broadcaster instance wwhere the transaction will be sent\n     * @returns A BroadcastResponse or BroadcastFailure from the Broadcaster\n     */\n    async broadcast(broadcaster = defaultBroadcaster()) {\n        return await broadcaster.broadcast(this);\n    }\n    /**\n     * Converts the transaction to a binary array format.\n     *\n     * @returns {number[]} - The binary array representation of the transaction.\n     */\n    toBinary() {\n        const writer = new Writer();\n        writer.writeUInt32LE(this.version);\n        writer.writeVarIntNum(this.inputs.length);\n        for (const i of this.inputs) {\n            if (typeof i.sourceTXID === 'undefined') {\n                if (i.sourceTransaction != null) {\n                    writer.write(i.sourceTransaction.hash());\n                }\n                else {\n                    throw new Error('sourceTransaction is undefined');\n                }\n            }\n            else {\n                writer.writeReverse(toArray(i.sourceTXID, 'hex'));\n            }\n            writer.writeUInt32LE(i.sourceOutputIndex);\n            if (i.unlockingScript == null) {\n                throw new Error('unlockingScript is undefined');\n            }\n            const scriptBin = i.unlockingScript.toBinary();\n            writer.writeVarIntNum(scriptBin.length);\n            writer.write(scriptBin);\n            writer.writeUInt32LE(i.sequence ?? 0);\n        }\n        writer.writeVarIntNum(this.outputs.length);\n        for (const o of this.outputs) {\n            writer.writeUInt64LE(o.satoshis ?? 0);\n            const scriptBin = o.lockingScript.toBinary();\n            writer.writeVarIntNum(scriptBin.length);\n            writer.write(scriptBin);\n        }\n        writer.writeUInt32LE(this.lockTime);\n        return writer.toArray();\n    }\n    /**\n     * Converts the transaction to a BRC-30 EF format.\n     *\n     * @returns {number[]} - The BRC-30 EF representation of the transaction.\n     */\n    toEF() {\n        const writer = new Writer();\n        writer.writeUInt32LE(this.version);\n        writer.write([0, 0, 0, 0, 0, 0xef]);\n        writer.writeVarIntNum(this.inputs.length);\n        for (const i of this.inputs) {\n            if (typeof i.sourceTransaction === 'undefined') {\n                throw new Error('All inputs must have source transactions when serializing to EF format');\n            }\n            if (typeof i.sourceTXID === 'undefined') {\n                writer.write(i.sourceTransaction.hash());\n            }\n            else {\n                writer.write(toArray(i.sourceTXID, 'hex').reverse());\n            }\n            writer.writeUInt32LE(i.sourceOutputIndex);\n            if (i.unlockingScript == null) {\n                throw new Error('unlockingScript is undefined');\n            }\n            const scriptBin = i.unlockingScript.toBinary();\n            writer.writeVarIntNum(scriptBin.length);\n            writer.write(scriptBin);\n            writer.writeUInt32LE(i.sequence ?? 0);\n            writer.writeUInt64LE(i.sourceTransaction.outputs[i.sourceOutputIndex].satoshis ?? 0);\n            const lockingScriptBin = i.sourceTransaction.outputs[i.sourceOutputIndex].lockingScript.toBinary();\n            writer.writeVarIntNum(lockingScriptBin.length);\n            writer.write(lockingScriptBin);\n        }\n        writer.writeVarIntNum(this.outputs.length);\n        for (const o of this.outputs) {\n            writer.writeUInt64LE(o.satoshis ?? 0);\n            const scriptBin = o.lockingScript.toBinary();\n            writer.writeVarIntNum(scriptBin.length);\n            writer.write(scriptBin);\n        }\n        writer.writeUInt32LE(this.lockTime);\n        return writer.toArray();\n    }\n    /**\n     * Converts the transaction to a hexadecimal string EF.\n     *\n     * @returns {string} - The hexadecimal string representation of the transaction EF.\n     */\n    toHexEF() {\n        return toHex(this.toEF());\n    }\n    /**\n     * Converts the transaction to a hexadecimal string format.\n     *\n     * @returns {string} - The hexadecimal string representation of the transaction.\n     */\n    toHex() {\n        return toHex(this.toBinary());\n    }\n    /**\n     * Converts the transaction to a hexadecimal string BEEF.\n     *\n     * @returns {string} - The hexadecimal string representation of the transaction BEEF.\n     */\n    toHexBEEF() {\n        return toHex(this.toBEEF());\n    }\n    /**\n     * Converts the transaction to a hexadecimal string Atomic BEEF.\n     *\n     * @returns {string} - The hexadecimal string representation of the transaction Atomic BEEF.\n     */\n    toHexAtomicBEEF() {\n        return toHex(this.toAtomicBEEF());\n    }\n    /**\n     * Calculates the transaction's hash.\n     *\n     * @param {'hex' | undefined} enc - The encoding to use for the hash. If 'hex', returns a hexadecimal string; otherwise returns a binary array.\n     * @returns {string | number[]} - The hash of the transaction in the specified format.\n     */\n    hash(enc) {\n        let hash;\n        if (this.cachedHash != null) {\n            hash = this.cachedHash;\n        }\n        else {\n            hash = hash256(this.toBinary());\n            this.cachedHash = hash;\n        }\n        if (enc === 'hex') {\n            return toHex(hash);\n        }\n        return hash;\n    }\n    /**\n     * Calculates the transaction's ID.\n     *\n     * @param {'hex' | undefined} enc - The encoding to use for the ID. If 'hex', returns a hexadecimal string; otherwise returns a binary array.\n     * @returns {string | number[]} - The ID of the transaction in the specified format.\n     */\n    id(enc) {\n        const id = [...this.hash()];\n        id.reverse();\n        if (enc === 'hex') {\n            return toHex(id);\n        }\n        return id;\n    }\n    /**\n     * Verifies the legitimacy of the Bitcoin transaction according to the rules of SPV by ensuring all the input transactions link back to valid block headers, the chain of spends for all inputs are valid, and the sum of inputs is not less than the sum of outputs.\n     *\n     * @param chainTracker - An instance of ChainTracker, a Bitcoin block header tracker. If the value is set to 'scripts only', headers will not be verified. If not provided then the default chain tracker will be used.\n     * @param feeModel - An instance of FeeModel, a fee model to use for fee calculation. If not provided then the default fee model will be used.\n     * @param memoryLimit - The maximum memory in bytes usage allowed for script evaluation. If not provided then the default memory limit will be used.\n     *\n     * @returns Whether the transaction is valid according to the rules of SPV.\n     *\n     * @example tx.verify(new WhatsOnChain(), new SatoshisPerKilobyte(1))\n     */\n    async verify(chainTracker = defaultChainTracker(), feeModel, memoryLimit) {\n        const verifiedTxids = new Set();\n        const txQueue = [this];\n        while (txQueue.length > 0) {\n            const tx = txQueue.shift();\n            const txid = tx?.id('hex') ?? '';\n            if (txid != null && txid !== '' && verifiedTxids.has(txid)) {\n                continue;\n            }\n            // If the transaction has a valid merkle path, verification is complete.\n            if (typeof tx?.merklePath === 'object') {\n                if (chainTracker === 'scripts only') {\n                    if (txid != null) {\n                        verifiedTxids.add(txid);\n                    }\n                    continue;\n                }\n                else {\n                    const proofValid = await tx.merklePath.verify(txid, chainTracker);\n                    // If the proof is valid, no need to verify inputs.\n                    if (proofValid) {\n                        verifiedTxids.add(txid);\n                        continue;\n                    }\n                }\n            }\n            // Verify fee if feeModel is provided\n            if (typeof feeModel !== 'undefined') {\n                if (tx === undefined) {\n                    throw new Error('Transaction is undefined');\n                }\n                const cpTx = Transaction.fromEF(tx.toEF());\n                delete cpTx.outputs[0].satoshis;\n                cpTx.outputs[0].change = true;\n                await cpTx.fee(feeModel);\n                if (tx.getFee() < cpTx.getFee()) {\n                    throw new Error(`Verification failed because the transaction ${txid} has an insufficient fee and has not been mined.`);\n                }\n            }\n            // Verify each input transaction and evaluate the spend events.\n            // Also, keep a total of the input amounts for later.\n            let inputTotal = 0;\n            if (tx === undefined) {\n                throw new Error('Transaction is undefined');\n            }\n            for (let i = 0; i < tx.inputs.length; i++) {\n                const input = tx.inputs[i];\n                if (typeof input.sourceTransaction !== 'object') {\n                    throw new Error(`Verification failed because the input at index ${i} of transaction ${txid} is missing an associated source transaction. This source transaction is required for transaction verification because there is no merkle proof for the transaction spending a UTXO it contains.`);\n                }\n                if (typeof input.unlockingScript !== 'object') {\n                    throw new Error(`Verification failed because the input at index ${i} of transaction ${txid} is missing an associated unlocking script. This script is required for transaction verification because there is no merkle proof for the transaction spending the UTXO.`);\n                }\n                const sourceOutput = input.sourceTransaction.outputs[input.sourceOutputIndex];\n                inputTotal += sourceOutput.satoshis ?? 0;\n                const sourceTxid = input.sourceTransaction.id('hex');\n                if (!verifiedTxids.has(sourceTxid)) {\n                    txQueue.push(input.sourceTransaction);\n                }\n                const otherInputs = tx.inputs.filter((_, idx) => idx !== i);\n                if (typeof input.sourceTXID === 'undefined') {\n                    input.sourceTXID = sourceTxid;\n                }\n                const spend = new Spend({\n                    sourceTXID: input.sourceTXID,\n                    sourceOutputIndex: input.sourceOutputIndex,\n                    lockingScript: sourceOutput.lockingScript,\n                    sourceSatoshis: sourceOutput.satoshis ?? 0,\n                    transactionVersion: tx.version,\n                    otherInputs,\n                    unlockingScript: input.unlockingScript,\n                    inputSequence: input.sequence ?? 0,\n                    inputIndex: i,\n                    outputs: tx.outputs,\n                    lockTime: tx.lockTime,\n                    memoryLimit\n                });\n                const spendValid = spend.validate();\n                if (!spendValid) {\n                    return false;\n                }\n            }\n            // Total the outputs to ensure they don't amount to more than the inputs\n            let outputTotal = 0;\n            for (const out of tx.outputs) {\n                if (typeof out.satoshis !== 'number') {\n                    throw new Error('Every output must have a defined amount during transaction verification.');\n                }\n                outputTotal += out.satoshis;\n            }\n            if (outputTotal > inputTotal) {\n                return false;\n            }\n            verifiedTxids.add(txid);\n        }\n        return true;\n    }\n    /**\n     * Serializes this transaction, together with its inputs and the respective merkle proofs, into the BEEF (BRC-62) format. This enables efficient verification of its compliance with the rules of SPV.\n     *\n     * @param allowPartial If true, error will not be thrown if there are any missing sourceTransactions.\n     *\n     * @returns The serialized BEEF structure\n     * @throws Error if there are any missing sourceTransactions unless `allowPartial` is true.\n     */\n    toBEEF(allowPartial) {\n        const writer = new Writer();\n        writer.writeUInt32LE(BEEF_V1);\n        const BUMPs = [];\n        const txs = [];\n        // Recursive function to add paths and input transactions for a TX\n        const addPathsAndInputs = (tx) => {\n            const obj = { tx };\n            const hasProof = typeof tx.merklePath === 'object';\n            if (hasProof) {\n                let added = false;\n                // If this proof is identical to another one previously added, we use that first. Otherwise, we try to merge it with proofs from the same block.\n                for (let i = 0; i < BUMPs.length; i++) {\n                    if (BUMPs[i] === tx.merklePath) {\n                        // Literally the same\n                        obj.pathIndex = i;\n                        added = true;\n                        break;\n                    }\n                    if (tx.merklePath !== null && tx.merklePath !== undefined && BUMPs[i].blockHeight === tx.merklePath.blockHeight) {\n                        // Probably the same...\n                        const rootA = BUMPs[i].computeRoot();\n                        const rootB = tx.merklePath.computeRoot();\n                        if (rootA === rootB) {\n                            // Definitely the same... combine them to save space\n                            BUMPs[i].combine(tx.merklePath);\n                            obj.pathIndex = i;\n                            added = true;\n                            break;\n                        }\n                    }\n                }\n                // Finally, if the proof is not yet added, add a new path.\n                if (!added) {\n                    obj.pathIndex = BUMPs.length;\n                    if (tx.merklePath !== null && tx.merklePath !== undefined) {\n                        BUMPs.push(tx.merklePath);\n                    }\n                }\n            }\n            const duplicate = txs.some((x) => x.tx.id('hex') === tx.id('hex'));\n            if (!duplicate) {\n                txs.unshift(obj);\n            }\n            if (!hasProof) {\n                for (let i = 0; i < tx.inputs.length; i++) {\n                    const input = tx.inputs[i];\n                    if (typeof input.sourceTransaction === 'object') {\n                        addPathsAndInputs(input.sourceTransaction);\n                    }\n                    else if (allowPartial === false) {\n                        throw new Error('A required source transaction is missing!');\n                    }\n                }\n            }\n        };\n        addPathsAndInputs(this);\n        writer.writeVarIntNum(BUMPs.length);\n        for (const b of BUMPs) {\n            writer.write(b.toBinary());\n        }\n        writer.writeVarIntNum(txs.length);\n        for (const t of txs) {\n            writer.write(t.tx.toBinary());\n            if (typeof t.pathIndex === 'number') {\n                writer.writeUInt8(1);\n                writer.writeVarIntNum(t.pathIndex);\n            }\n            else {\n                writer.writeUInt8(0);\n            }\n        }\n        return writer.toArray();\n    }\n    /**\n     * Serializes this transaction and its inputs into the Atomic BEEF (BRC-95) format.\n     * The Atomic BEEF format starts with a 4-byte prefix `0x01010101`, followed by the TXID of the subject transaction,\n     * and then the BEEF data containing only the subject transaction and its dependencies.\n     * This format ensures that the BEEF structure is atomic and contains no unrelated transactions.\n     *\n     * @param allowPartial If true, error will not be thrown if there are any missing sourceTransactions.\n     *\n     * @returns {number[]} - The serialized Atomic BEEF structure.\n     * @throws Error if there are any missing sourceTransactions unless `allowPartial` is true.\n     */\n    toAtomicBEEF(allowPartial) {\n        const writer = new Writer();\n        // Write the Atomic BEEF prefix\n        writer.writeUInt32LE(0x01010101);\n        // Write the subject TXID (big-endian)\n        writer.write(this.hash());\n        // Append the BEEF data\n        const beefData = this.toBEEF(allowPartial);\n        writer.write(beefData);\n        return writer.toArray();\n    }\n}\n//# sourceMappingURL=Transaction.js.map","/**\n * Convenience type guard for response from `Broadcaster.broadcast`\n */\nexport function isBroadcastResponse(r) {\n    return r.status === 'success';\n}\n/**\n * Convenience type guard for response from `Broadcaster.broadcast`\n */\nexport function isBroadcastFailure(r) {\n    return r.status === 'error';\n}\n//# sourceMappingURL=Broadcaster.js.map","import { Beef } from './Beef.js';\n/**\n * Extends `Beef` that is used to exchange transaction validity data with more than one external party.\n *\n * Use `addKnownTxidsForParty` to keep track of who knows what to reduce re-transmission of potentially large transactions.\n *\n * Use `getTrimmedBeefForParty` to obtain a `Beef` trimmed of transaction validity data known to a specific party.\n *\n * Typical usage scenario:\n *\n * 1. Query a wallet storage provider for spendable outputs.\n * 2. The provider replies with a Beef validating the returned outputs.\n * 3. Construct a new transaction using some of the queried outputs as inputs, including Beef validating all the inputs.\n * 4. Receive new valid raw transaction after processing and Beef validating change outputs added to original inputs.\n * 5. Return to step 1, continuing to build on old and new spendable outputs.\n *\n * By default, each Beef is required to be complete and valid: All transactions appear as full serialized bitcoin transactions and\n * each transaction either has a merkle path proof (it has been mined) or all of its input transactions are included.\n *\n * The size and redundancy of these Beefs becomes a problem when chained transaction creation out-paces the block mining rate.\n *\n */\nexport class BeefParty extends Beef {\n    /**\n     * keys are party identifiers.\n     * values are records of txids with truthy value for which the party already has validity proof.\n     */\n    knownTo = {};\n    /**\n     *\n     * @param parties Optional array of initial unique party identifiers.\n     */\n    constructor(parties) {\n        super();\n        if (parties != null) {\n            for (const party of parties) {\n                this.addParty(party);\n            }\n        }\n    }\n    /**\n     * @param party\n     * @returns `true` if `party` has already been added to this `BeefParty`.\n     */\n    isParty(party) {\n        const r = Object.keys(this.knownTo).includes(party);\n        return r;\n    }\n    /**\n     * Adds a new unique party identifier to this `BeefParty`.\n     * @param party\n     */\n    addParty(party) {\n        if (this.isParty(party)) {\n            throw new Error(`Party ${party} already exists.`);\n        }\n        this.knownTo[party] = {};\n    }\n    /**\n     * @param party\n     * @returns Array of txids \"known\" to `party`.\n     */\n    getKnownTxidsForParty(party) {\n        const knownTxids = this.knownTo[party];\n        if (knownTxids === undefined) { // ✅ Explicitly check for undefined\n            throw new Error(`Party ${party} is unknown.`);\n        }\n        return Object.keys(knownTxids);\n    }\n    /**\n     * @param party\n     * @returns trimmed beef of unknown transactions and proofs for `party`\n     */\n    getTrimmedBeefForParty(party) {\n        const knownTxids = this.getKnownTxidsForParty(party);\n        const prunedBeef = this.clone();\n        prunedBeef.trimKnownTxids(knownTxids);\n        return prunedBeef;\n    }\n    /**\n     * Make note of additional txids \"known\" to `party`.\n     * @param party unique identifier, added if new.\n     * @param knownTxids\n     */\n    addKnownTxidsForParty(party, knownTxids) {\n        if (!this.isParty(party)) {\n            this.addParty(party);\n        }\n        const kts = this.knownTo[party];\n        for (const txid of knownTxids) {\n            kts[txid] = true;\n            this.mergeTxidOnly(txid);\n        }\n    }\n    /**\n     * Merge a `beef` received from a specific `party`.\n     *\n     * Updates this `BeefParty` to track all the txids\n     * corresponding to transactions for which `party`\n     * has raw transaction and validity proof data.\n     *\n     * @param party\n     * @param beef\n     */\n    mergeBeefFromParty(party, beef) {\n        const b = Array.isArray(beef) ? Beef.fromBinary(beef) : beef;\n        const knownTxids = b.getValidTxids();\n        this.mergeBeef(b);\n        this.addKnownTxidsForParty(party, knownTxids);\n    }\n}\nexport default BeefParty;\n//# sourceMappingURL=BeefParty.js.map","import { defaultHttpClient } from '../http/DefaultHttpClient.js';\n/**\n * Represents an WhatsOnChain transaction broadcaster.\n */\nexport default class WhatsOnChainBroadcaster {\n    network;\n    URL;\n    httpClient;\n    /**\n     * Constructs an instance of the WhatsOnChain broadcaster.\n     *\n     * @param {'main' | 'test' | 'stn'} network - The BSV network to use when calling the WhatsOnChain API.\n     * @param {HttpClient} httpClient - The HTTP client used to make requests to the API.\n     */\n    constructor(network = 'main', httpClient = defaultHttpClient()) {\n        this.network = network;\n        this.URL = `https://api.whatsonchain.com/v1/bsv/${network}/tx/raw`;\n        this.httpClient = httpClient;\n    }\n    /**\n     * Broadcasts a transaction via WhatsOnChain.\n     *\n     * @param {Transaction} tx - The transaction to be broadcasted.\n     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n     */\n    async broadcast(tx) {\n        const rawTx = tx.toHex();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'text/plain'\n            },\n            data: { txhex: rawTx }\n        };\n        try {\n            const response = await this.httpClient.request(this.URL, requestOptions);\n            if (response.ok) {\n                const txid = response.data;\n                return {\n                    status: 'success',\n                    txid,\n                    message: 'broadcast successful'\n                };\n            }\n            else {\n                return {\n                    status: 'error',\n                    code: response.status.toString() ?? 'ERR_UNKNOWN',\n                    description: response.data ?? 'Unknown error'\n                };\n            }\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                code: '500',\n                description: typeof error.message === 'string'\n                    ? error.message\n                    : 'Internal Server Error'\n            };\n        }\n    }\n}\n//# sourceMappingURL=WhatsOnChainBroadcaster.js.map","/**\n * Adapter for Node Https module to be used as HttpClient\n */\nexport class BinaryNodejsHttpClient {\n    https;\n    constructor(https) {\n        this.https = https;\n    }\n    async request(url, requestOptions) {\n        return await new Promise((resolve, reject) => {\n            const req = this.https.request(url, requestOptions, (res) => {\n                let body = '';\n                res.on('data', (chunk) => {\n                    body += chunk;\n                });\n                res.on('end', () => {\n                    const ok = res.statusCode >= 200 && res.statusCode <= 299;\n                    const mediaType = res.headers['content-type'];\n                    const data = body !== '' && typeof mediaType === 'string' && mediaType.startsWith('application/json')\n                        ? JSON.parse(body)\n                        : body;\n                    resolve({\n                        status: res.statusCode,\n                        statusText: res.statusMessage,\n                        ok,\n                        data\n                    });\n                });\n            });\n            req.on('error', (error) => {\n                reject(error);\n            });\n            if (requestOptions.data !== null && requestOptions.data !== undefined) {\n                req.write(Buffer.from(requestOptions.data));\n            }\n            req.end();\n        });\n    }\n}\n/**\n * Adapter for Node Https module to be used as HttpClient\n */\nexport class BinaryFetchClient {\n    fetch;\n    constructor(fetch) {\n        this.fetch = fetch;\n    }\n    async request(url, options) {\n        const fetchOptions = {\n            method: options.method,\n            headers: options.headers,\n            body: options.data\n        };\n        const res = await this.fetch(url, fetchOptions);\n        const data = await res.text();\n        return {\n            ok: res.ok,\n            status: res.status,\n            statusText: res.statusText,\n            data: data\n        };\n    }\n}\nexport function binaryHttpClient() {\n    const noHttpClient = {\n        async request(..._) {\n            throw new Error('No method available to perform HTTP request');\n        }\n    };\n    if (typeof window !== 'undefined' && typeof window.fetch === 'function') {\n        // Use fetch in a browser environment\n        return new BinaryFetchClient(window.fetch.bind(window));\n    }\n    else if (typeof require !== 'undefined') {\n        // Use Node https module\n        // eslint-disable-next-line\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const https = require('https');\n            return new BinaryNodejsHttpClient(https);\n        }\n        catch (e) {\n            return noHttpClient;\n        }\n    }\n    else {\n        return noHttpClient;\n    }\n}\n//# sourceMappingURL=BinaryFetchClient.js.map","import { binaryHttpClient } from '../http/index.js';\n/**\n * Represents an Teranode transaction broadcaster.\n */\nexport default class Teranode {\n    URL;\n    httpClient;\n    /**\n     * Constructs an instance of the Teranode broadcaster.\n     *\n     * @param {string} URL - The URL endpoint for the Teranode API.\n     * @param {HttpClient} httpClient - The HTTP client used to make requests to the API, binaryHttpClient by default.\n     */\n    constructor(URL, httpClient = binaryHttpClient()) {\n        this.URL = URL;\n        this.httpClient = httpClient;\n    }\n    /**\n     * Broadcasts a transaction via Teranode.\n     *\n     * @param {Transaction} tx - The transaction to be broadcasted.\n     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n     */\n    async broadcast(tx) {\n        const rawTx = tx.toEF();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/octet-stream'\n            },\n            data: new Blob([new Uint8Array(rawTx)])\n        };\n        try {\n            const response = await this.httpClient.request(this.URL, requestOptions);\n            if (response.ok) {\n                const txid = tx.id('hex');\n                return {\n                    status: 'success',\n                    txid,\n                    message: 'broadcast successful'\n                };\n            }\n            else {\n                return {\n                    status: 'error',\n                    code: response.status.toString() ?? 'ERR_UNKNOWN',\n                    description: response.data ?? 'Unknown error'\n                };\n            }\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                code: '500',\n                description: typeof error.message === 'string'\n                    ? error.message\n                    : 'Internal Server Error'\n            };\n        }\n    }\n}\n//# sourceMappingURL=Teranode.js.map","import { defaultHttpClient } from '../http/DefaultHttpClient.js';\n/**\n * Represents a chain tracker based on a BlockHeadersService API.\n *\n * @example\n * ```typescript\n * const chainTracker = new BlockHeadersService('https://headers.spv.money', {\n *   apiKey: '17JxRHcJerGBEbusx56W8o1m8Js73TFGo'\n * })\n * ```\n */\nexport class BlockHeadersService {\n    baseUrl;\n    httpClient;\n    apiKey;\n    /**\n     * Constructs an instance of the BlockHeadersService ChainTracker.\n     *\n     * @param {string} baseUrl - The base URL for the BlockHeadersService API (e.g. https://headers.spv.money)\n     * @param {BlockHeadersServiceConfig} config - Configuration options for the BlockHeadersService ChainTracker.\n     */\n    constructor(baseUrl, config = {}) {\n        const { httpClient, apiKey } = config;\n        this.baseUrl = baseUrl;\n        this.httpClient = httpClient ?? defaultHttpClient();\n        this.apiKey = apiKey ?? '';\n    }\n    /**\n     * Verifies if a given merkle root is valid for a specific block height.\n     *\n     * @param {string} root - The merkle root to verify.\n     * @param {number} height - The block height to check against.\n     * @returns {Promise<boolean>} - A promise that resolves to true if the merkle root is valid for the specified block height, false otherwise.\n     */\n    async isValidRootForHeight(root, height) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${this.apiKey}`\n            },\n            data: [\n                {\n                    blockHeight: height,\n                    merkleRoot: root\n                }\n            ]\n        };\n        try {\n            const response = await this.httpClient.request(`${this.baseUrl}/api/v1/chain/merkleroot/verify`, requestOptions);\n            if (response.ok) {\n                return response.data.confirmationState === 'CONFIRMED';\n            }\n            else {\n                throw new Error(`Failed to verify merkleroot for height ${height} because of an error: ${JSON.stringify(response.data)}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Failed to verify merkleroot for height ${height} because of an error: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    /**\n     * Gets the current block height from the BlockHeadersService API.\n     *\n     * @returns {Promise<number>} - A promise that resolves to the current block height.\n     */\n    async currentHeight() {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${this.apiKey}`\n            }\n        };\n        try {\n            const response = await this.httpClient.request(`${this.baseUrl}/api/v1/chain/tip/longest`, requestOptions);\n            if (response.ok && response.data && typeof response.data.height === 'number') {\n                return response.data.height;\n            }\n            else {\n                throw new Error(`Failed to get current height because of an error: ${JSON.stringify(response.data)}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Failed to get current height because of an error: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n}\n//# sourceMappingURL=BlockHeadersService.js.map","// @ts-nocheck\nimport PublicKey from '../primitives/PublicKey.js';\nimport PrivateKey from '../primitives/PrivateKey.js';\nimport Signature from '../primitives/Signature.js';\nimport Curve from '../primitives/Curve.js';\nimport Random from '../primitives/Random.js';\nimport { toBase64, toArray, Reader, toHex } from '../primitives/utils.js';\nconst VERSION = '42423301';\n/**\n * Signs a message from one party to be verified by another, or for verification by anyone, using the BRC-77 message signing protocol.\n * @param message The message to sign\n * @param signer The private key of the message signer\n * @param [verifier] The public key of the person who can verify the message. If not provided, anyone will be able to verify the message signature.\n *\n * @returns The message signature.\n */\nexport const sign = (message, signer, verifier) => {\n    const recipientAnyone = typeof verifier !== 'object';\n    if (recipientAnyone) {\n        const curve = new Curve();\n        const anyone = new PrivateKey(1);\n        const anyonePoint = curve.g.mul(anyone);\n        verifier = new PublicKey(anyonePoint.x, anyonePoint.y);\n    }\n    const keyID = Random(32);\n    const keyIDBase64 = toBase64(keyID);\n    const invoiceNumber = `2-message signing-${keyIDBase64}`;\n    const signingKey = signer.deriveChild(verifier, invoiceNumber);\n    const signature = signingKey.sign(message).toDER();\n    const senderPublicKey = signer.toPublicKey().encode(true);\n    const version = toArray(VERSION, 'hex');\n    return [\n        ...version,\n        ...senderPublicKey,\n        ...(recipientAnyone ? [0] : verifier.encode(true)),\n        ...keyID,\n        ...signature\n    ];\n};\n/**\n * Verifies a message using the BRC-77 message signing protocol.\n * @param message The message to verify.\n * @param sig The message signature to be verified.\n * @param [recipient] The private key of the message verifier. This can be omitted if the message is verifiable by anyone.\n *\n * @returns True if the message is verified.\n */\nexport const verify = (message, sig, recipient) => {\n    const reader = new Reader(sig);\n    const messageVersion = toHex(reader.read(4));\n    if (messageVersion !== VERSION) {\n        throw new Error(`Message version mismatch: Expected ${VERSION}, received ${messageVersion}`);\n    }\n    const signer = PublicKey.fromString(toHex(reader.read(33)));\n    const [verifierFirst] = reader.read(1);\n    if (verifierFirst === 0) {\n        recipient = new PrivateKey(1);\n    }\n    else {\n        const verifierRest = reader.read(32);\n        const verifierDER = toHex([verifierFirst, ...verifierRest]);\n        if (typeof recipient !== 'object') {\n            throw new Error(`This signature can only be verified with knowledge of a specific private key. The associated public key is: ${verifierDER}`);\n        }\n        const recipientDER = recipient.toPublicKey().encode(true, 'hex');\n        if (verifierDER !== recipientDER) {\n            throw new Error(`The recipient public key is ${recipientDER} but the signature requres the recipient to have public key ${verifierDER}`);\n        }\n    }\n    const keyID = toBase64(reader.read(32));\n    const signatureDER = toHex(reader.read(reader.bin.length - reader.pos));\n    const signature = Signature.fromDER(signatureDER, 'hex');\n    const invoiceNumber = `2-message signing-${keyID}`;\n    const signingKey = signer.deriveChild(recipient, invoiceNumber);\n    const verified = signingKey.verify(message, signature);\n    return verified;\n};\n//# sourceMappingURL=SignedMessage.js.map","import PublicKey from '../primitives/PublicKey.js';\nimport SymmetricKey from '../primitives/SymmetricKey.js';\nimport Random from '../primitives/Random.js';\nimport { toBase64, toArray, Reader, toHex } from '../primitives/utils.js';\nconst VERSION = '42421033';\n/**\n * Encrypts a message from one party to another using the BRC-78 message encryption protocol.\n * @param message The message to encrypt\n * @param sender The private key of the sender\n * @param recipient The public key of the recipient\n *\n * @returns The encrypted message\n */\nexport const encrypt = (message, sender, recipient) => {\n    const keyID = Random(32);\n    const keyIDBase64 = toBase64(keyID);\n    const invoiceNumber = `2-message encryption-${keyIDBase64}`;\n    const signingPriv = sender.deriveChild(recipient, invoiceNumber);\n    const recipientPub = recipient.deriveChild(sender, invoiceNumber);\n    const sharedSecret = signingPriv.deriveSharedSecret(recipientPub);\n    const symmetricKey = new SymmetricKey(sharedSecret.encode(true).slice(1));\n    const encrypted = symmetricKey.encrypt(message);\n    const senderPublicKey = sender.toPublicKey().encode(true);\n    const version = toArray(VERSION, 'hex');\n    return [\n        ...version,\n        ...senderPublicKey,\n        ...recipient.encode(true),\n        ...keyID,\n        ...encrypted\n    ];\n};\n/**\n * Decrypts a message from one party to another using the BRC-78 message encryption protocol.\n * @param message The message to decrypt\n * @param sender The private key of the recipient\n *\n * @returns The decrypted message\n */\nexport const decrypt = (message, recipient) => {\n    const reader = new Reader(message);\n    const messageVersion = toHex(reader.read(4));\n    if (messageVersion !== VERSION) {\n        throw new Error(`Message version mismatch: Expected ${VERSION}, received ${messageVersion}`);\n    }\n    const sender = PublicKey.fromString(toHex(reader.read(33)));\n    const expectedRecipientDER = toHex(reader.read(33));\n    const actualRecipientDER = recipient\n        .toPublicKey()\n        .encode(true, 'hex');\n    if (expectedRecipientDER !== actualRecipientDER) {\n        throw new Error(`The encrypted message expects a recipient public key of ${expectedRecipientDER}, but the provided key is ${actualRecipientDER}`);\n    }\n    const keyID = toBase64(reader.read(32));\n    const encrypted = reader.read(reader.bin.length - reader.pos);\n    const invoiceNumber = `2-message encryption-${keyID}`;\n    const signingPriv = sender.deriveChild(recipient, invoiceNumber);\n    const recipientPub = recipient.deriveChild(sender, invoiceNumber);\n    const sharedSecret = signingPriv.deriveSharedSecret(recipientPub);\n    const symmetricKey = new SymmetricKey(sharedSecret.encode(true).slice(1));\n    return symmetricKey.decrypt(encrypted);\n};\n//# sourceMappingURL=EncryptedMessage.js.map","import BigNumber from '../primitives/BigNumber.js';\nimport { Writer, toArray } from '../primitives/utils.js';\nimport * as ECDSA from '../primitives/ECDSA.js';\nimport * as Hash from '../primitives/Hash.js';\nconst prefix = 'Bitcoin Signed Message:\\n';\n/**\n * Generates a SHA256 double-hash of the prefixed message.\n * @deprecated Replaced by BRC-77 which uses a more secure and private method for message signing.\n * @param messageBuf The message buffer to be hashed.\n * @returns The double-hash of the prefixed message as a number array.\n */\nexport const magicHash = (messageBuf) => {\n    const bw = new Writer();\n    bw.writeVarIntNum(prefix.length);\n    bw.write(toArray(prefix, 'utf8'));\n    bw.writeVarIntNum(messageBuf.length);\n    bw.write(messageBuf);\n    const buf = bw.toArray();\n    const hashBuf = Hash.hash256(buf);\n    return hashBuf;\n};\n/**\n * Signs a BSM message using the given private key.\n * @deprecated Replaced by BRC-77 which employs BRC-42 key derivation and BRC-43 invoice numbers for enhanced security and privacy.\n * @param message The message to be signed as a number array.\n * @param privateKey The private key used for signing the message.\n * @param mode The mode of operation. When \"base64\", the BSM format signature is returned. When \"raw\", a Signature object is returned. Default: \"base64\".\n * @returns The signature object when in raw mode, or the BSM base64 string when in base64 mode.\n */\nexport const sign = (message, privateKey, mode = 'base64') => {\n    const hashBuf = magicHash(message);\n    const sig = ECDSA.sign(new BigNumber(hashBuf), privateKey, true);\n    if (mode === 'raw') {\n        return sig;\n    }\n    const h = new BigNumber(hashBuf);\n    const r = sig.CalculateRecoveryFactor(privateKey.toPublicKey(), h);\n    return sig.toCompact(r, true, 'base64');\n};\n/**\n * Verifies a BSM signed message using the given public key.\n * @deprecated Replaced by BRC-77 which provides privately-verifiable signatures and avoids key reuse.\n * @param message The message to be verified as a number array.\n * @param sig The signature object.\n * @param pubKey The public key for verification.\n * @returns True if the signature is valid, false otherwise.\n */\nexport const verify = (message, sig, pubKey) => {\n    const hashBuf = magicHash(message);\n    return ECDSA.verify(new BigNumber(hashBuf), sig, pubKey);\n};\n//# sourceMappingURL=BSM.js.map","// @ts-nocheck\nimport { fromBase58Check, toBase58Check, Writer, Reader, toArray, toHex } from '../primitives/utils.js';\nimport * as Hash from '../primitives/Hash.js';\nimport Curve from '../primitives/Curve.js';\nimport PrivateKey from '../primitives/PrivateKey.js';\nimport PublicKey from '../primitives/PublicKey.js';\nimport Random from '../primitives/Random.js';\nimport BigNumber from '../primitives/BigNumber.js';\n/**\n * @deprecated\n * The HD class implements the Bitcoin Improvement Proposal 32 (BIP32) hierarchical deterministic wallets.\n * It allows the generation of child keys from a master key, ensuring a tree-like structure of keys and addresses.\n * This class is deprecated due to the introduction of BRC-42, which offers an enhanced key derivation scheme.\n * BRC-42 uses invoice numbers for key derivation, improving privacy and scalability compared to BIP32.\n *\n * @class HD\n * @deprecated Replaced by BRC-42 which uses invoice numbers and supports private derivation.\n */\nexport default class HD {\n    versionBytesNum;\n    depth;\n    parentFingerPrint;\n    childIndex;\n    chainCode;\n    privKey;\n    pubKey;\n    constants = {\n        pubKey: 0x0488b21e,\n        privKey: 0x0488ade4\n    };\n    /**\n     * Constructor for the BIP32 HD wallet.\n     * Initializes an HD wallet with optional parameters for version bytes, depth, parent fingerprint, child index, chain code, private key, and public key.\n     * @param versionBytesNum - Version bytes number for the wallet.\n     * @param depth - Depth of the key in the hierarchy.\n     * @param parentFingerPrint - Fingerprint of the parent key.\n     * @param childIndex - Index of the child key.\n     * @param chainCode - Chain code for key derivation.\n     * @param privKey - Private key of the wallet.\n     * @param pubKey - Public key of the wallet.\n     */\n    constructor(versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey) {\n        this.versionBytesNum = versionBytesNum;\n        this.depth = depth;\n        this.parentFingerPrint = parentFingerPrint;\n        this.childIndex = childIndex;\n        this.chainCode = chainCode;\n        this.privKey = privKey;\n        this.pubKey = pubKey;\n    }\n    /**\n     * Generates a new HD wallet with random keys.\n     * This method creates a root HD wallet with randomly generated private and public keys.\n     * @returns {HD} The current HD instance with generated keys.\n     */\n    fromRandom() {\n        this.versionBytesNum = this.constants.privKey;\n        this.depth = 0x00;\n        this.parentFingerPrint = [0, 0, 0, 0];\n        this.childIndex = 0;\n        this.chainCode = Random(32);\n        this.privKey = PrivateKey.fromRandom();\n        this.pubKey = this.privKey.toPublicKey();\n        return this;\n    }\n    /**\n     * Generates a new HD wallet with random keys.\n     * This method creates a root HD wallet with randomly generated private and public keys.\n     * @returns {HD} A new HD instance with generated keys.\n     * @static\n     */\n    static fromRandom() {\n        return new this().fromRandom();\n    }\n    /**\n     * Initializes the HD wallet from a given base58 encoded string.\n     * This method decodes a provided string to set up the HD wallet's properties.\n     * @param str - A base58 encoded string representing the wallet.\n     * @returns {HD} The new instance with properties set from the string.\n     */\n    static fromString(str) {\n        return new this().fromString(str);\n    }\n    /**\n     * Initializes the HD wallet from a given base58 encoded string.\n     * This method decodes a provided string to set up the HD wallet's properties.\n     * @param str - A base58 encoded string representing the wallet.\n     * @returns {HD} The current instance with properties set from the string.\n     */\n    fromString(str) {\n        const decoded = fromBase58Check(str);\n        return this.fromBinary([...decoded.prefix, ...decoded.data]);\n    }\n    /**\n     * Initializes the HD wallet from a seed.\n     * This method generates keys and other properties from a given seed, conforming to the BIP32 specification.\n     * @param bytes - An array of bytes representing the seed.\n     * @returns {HD} The current instance with properties set from the seed.\n     */\n    static fromSeed(bytes) {\n        return new this().fromSeed(bytes);\n    }\n    /**\n     * Initializes the HD wallet from a seed.\n     * This method generates keys and other properties from a given seed, conforming to the BIP32 specification.\n     * @param bytes - An array of bytes representing the seed.\n     * @returns {HD} The current instance with properties set from the seed.\n     */\n    fromSeed(bytes) {\n        if (bytes.length < 128 / 8) {\n            throw new Error('Need more than 128 bits of entropy');\n        }\n        if (bytes.length > 512 / 8) {\n            throw new Error('More than 512 bits of entropy is nonstandard');\n        }\n        const hash = Hash.sha512hmac(toArray('Bitcoin seed', 'utf8'), bytes);\n        this.depth = 0x00;\n        this.parentFingerPrint = [0, 0, 0, 0];\n        this.childIndex = 0;\n        this.chainCode = hash.slice(32, 64);\n        this.versionBytesNum = this.constants.privKey;\n        this.privKey = new PrivateKey(hash.slice(0, 32));\n        this.pubKey = this.privKey.toPublicKey();\n        return this;\n    }\n    /**\n     * Initializes the HD wallet from a binary buffer.\n     * Parses a binary buffer to set up the wallet's properties.\n     * @param buf - A buffer containing the wallet data.\n     * @returns {HD} The new instance with properties set from the buffer.\n     */\n    static fromBinary(buf) {\n        return new this().fromBinary(buf);\n    }\n    /**\n     * Initializes the HD wallet from a binary buffer.\n     * Parses a binary buffer to set up the wallet's properties.\n     * @param buf - A buffer containing the wallet data.\n     * @returns {HD} The current instance with properties set from the buffer.\n     */\n    fromBinary(buf) {\n        // Both pub and private extended keys are 78 buf\n        if (buf.length !== 78) {\n            throw new Error('incorrect bip32 data length');\n        }\n        const reader = new Reader(buf);\n        this.versionBytesNum = reader.readUInt32BE();\n        this.depth = reader.readUInt8();\n        this.parentFingerPrint = reader.read(4);\n        this.childIndex = reader.readUInt32BE();\n        this.chainCode = reader.read(32);\n        const keyBytes = reader.read(33);\n        const isPrivate = this.versionBytesNum === this.constants.privKey;\n        const isPublic = this.versionBytesNum === this.constants.pubKey;\n        if (isPrivate && keyBytes[0] === 0) {\n            this.privKey = new PrivateKey(keyBytes.slice(1, 33));\n            this.pubKey = this.privKey.toPublicKey();\n        }\n        else if (isPublic && (keyBytes[0] === 0x02 || keyBytes[0] === 0x03)) {\n            this.pubKey = PublicKey.fromString(toHex(keyBytes));\n        }\n        else {\n            throw new Error('Invalid key');\n        }\n        return this;\n    }\n    /**\n     * Converts the HD wallet to a base58 encoded string.\n     * This method provides a string representation of the HD wallet's current state.\n     * @returns {string} A base58 encoded string of the HD wallet.\n     */\n    toString() {\n        const bin = this.toBinary();\n        return toBase58Check(bin, []);\n    }\n    /**\n     * Derives a child HD wallet based on a given path.\n     * The path specifies the hierarchy of the child key to be derived.\n     * @param path - A string representing the derivation path (e.g., 'm/0'/1).\n     * @returns {HD} A new HD instance representing the derived child wallet.\n     */\n    derive(path) {\n        if (path === 'm') {\n            return this;\n        }\n        const e = path.split('/');\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let bip32 = this;\n        for (const [i, c] of e.entries()) {\n            if (i === 0) { // Since `i` is now a number, compare it to 0\n                if (c !== 'm') {\n                    throw new Error('invalid path');\n                }\n                continue;\n            }\n            if (parseInt(c.replace(\"'\", ''), 10).toString() !== c.replace(\"'\", '')) {\n                throw new Error('invalid path');\n            }\n            const usePrivate = c.length > 1 && c[c.length - 1] === \"'\";\n            let childIndex = parseInt(usePrivate ? c.slice(0, c.length - 1) : c, 10) & 0x7fffffff;\n            if (usePrivate) {\n                childIndex += 0x80000000;\n            }\n            bip32 = bip32.deriveChild(childIndex);\n        }\n        return bip32;\n    }\n    /**\n     * Derives a child HD wallet from the current wallet based on an index.\n     * This method generates either a private or public child key depending on the current wallet's state.\n     * @param i - The index of the child key to derive.\n     * @returns {HD} A new HD instance representing the derived child wallet.\n     */\n    deriveChild(i) {\n        if (typeof i !== 'number') {\n            throw new Error('i must be a number');\n        }\n        const ibc = [];\n        ibc.push((i >> 24) & 0xff);\n        ibc.push((i >> 16) & 0xff);\n        ibc.push((i >> 8) & 0xff);\n        ibc.push(i & 0xff);\n        const ib = [...ibc];\n        const usePrivate = (i & 0x80000000) !== 0;\n        const isPrivate = this.versionBytesNum === this.constants.privKey;\n        if (usePrivate && (this.privKey === null || this.privKey === undefined || !isPrivate)) {\n            throw new Error('Cannot do private key derivation without private key');\n        }\n        let ret = null;\n        if (this.privKey !== null && this.privKey !== undefined) {\n            let data = null;\n            if (usePrivate) {\n                data = [0, ...this.privKey.toArray('be', 32), ...ib];\n            }\n            else {\n                data = [...this.pubKey.encode(true), ...ib];\n            }\n            const hash = Hash.sha512hmac(this.chainCode, data);\n            const il = new BigNumber(hash.slice(0, 32));\n            const ir = hash.slice(32, 64);\n            // ki = IL + kpar (mod n).\n            const k = il.add(this.privKey).mod(new Curve().n);\n            ret = new HD();\n            ret.chainCode = ir;\n            ret.privKey = new PrivateKey(k.toArray());\n            ret.pubKey = ret.privKey.toPublicKey();\n        }\n        else {\n            const data = [...this.pubKey.encode(true), ...ib];\n            const hash = Hash.sha512hmac(this.chainCode, data);\n            const il = new BigNumber(hash.slice(0, 32));\n            const ir = hash.slice(32, 64);\n            // Ki = (IL + kpar)*G = IL*G + Kpar\n            const ilG = new Curve().g.mul(il);\n            const Kpar = this.pubKey;\n            const Ki = ilG.add(Kpar);\n            const newpub = new PublicKey(Ki.x, Ki.y);\n            ret = new HD();\n            ret.chainCode = ir;\n            ret.pubKey = newpub;\n        }\n        ret.childIndex = i;\n        const pubKeyhash = Hash.hash160(this.pubKey.encode(true));\n        ret.parentFingerPrint = pubKeyhash.slice(0, 4);\n        ret.versionBytesNum = this.versionBytesNum;\n        ret.depth = this.depth + 1;\n        return ret;\n    }\n    /**\n     * Converts the current HD wallet to a public-only wallet.\n     * This method strips away the private key information, leaving only the public part.\n     * @returns {HD} A new HD instance representing the public-only wallet.\n     */\n    toPublic() {\n        const bip32 = new HD(this.versionBytesNum, this.depth, this.parentFingerPrint, this.childIndex, this.chainCode, this.privKey, this.pubKey);\n        bip32.versionBytesNum = this.constants.pubKey;\n        bip32.privKey = undefined;\n        return bip32;\n    }\n    /**\n     * Converts the HD wallet into a binary representation.\n     * This method serializes the wallet's properties into a binary format.\n     * @returns {number[]} An array of numbers representing the binary data of the wallet.\n     */\n    toBinary() {\n        const isPrivate = this.versionBytesNum === this.constants.privKey;\n        const isPublic = this.versionBytesNum === this.constants.pubKey;\n        if (isPrivate) {\n            return new Writer()\n                .writeUInt32BE(this.versionBytesNum)\n                .writeUInt8(this.depth)\n                .write(this.parentFingerPrint)\n                .writeUInt32BE(this.childIndex)\n                .write(this.chainCode)\n                .writeUInt8(0)\n                .write(this.privKey.toArray('be', 32))\n                .toArray();\n        }\n        else if (isPublic) {\n            return new Writer()\n                .writeUInt32BE(this.versionBytesNum)\n                .writeUInt8(this.depth)\n                .write(this.parentFingerPrint)\n                .writeUInt32BE(this.childIndex)\n                .write(this.chainCode)\n                .write(this.pubKey.encode(true))\n                .toArray();\n        }\n        else {\n            throw new Error('bip32: invalid versionBytesNum byte');\n        }\n    }\n    /**\n     * Checks if the HD wallet contains a private key.\n     * This method determines whether the wallet is a private key wallet or a public key only wallet.\n     * @returns {boolean} A boolean value indicating whether the wallet has a private key (true) or not (false).\n     */\n    isPrivate() {\n        return this.versionBytesNum === this.constants.privKey;\n    }\n}\n//# sourceMappingURL=HD.js.map","export const wordList = {\n    value: [\n        'abandon',\n        'ability',\n        'able',\n        'about',\n        'above',\n        'absent',\n        'absorb',\n        'abstract',\n        'absurd',\n        'abuse',\n        'access',\n        'accident',\n        'account',\n        'accuse',\n        'achieve',\n        'acid',\n        'acoustic',\n        'acquire',\n        'across',\n        'act',\n        'action',\n        'actor',\n        'actress',\n        'actual',\n        'adapt',\n        'add',\n        'addict',\n        'address',\n        'adjust',\n        'admit',\n        'adult',\n        'advance',\n        'advice',\n        'aerobic',\n        'affair',\n        'afford',\n        'afraid',\n        'again',\n        'age',\n        'agent',\n        'agree',\n        'ahead',\n        'aim',\n        'air',\n        'airport',\n        'aisle',\n        'alarm',\n        'album',\n        'alcohol',\n        'alert',\n        'alien',\n        'all',\n        'alley',\n        'allow',\n        'almost',\n        'alone',\n        'alpha',\n        'already',\n        'also',\n        'alter',\n        'always',\n        'amateur',\n        'amazing',\n        'among',\n        'amount',\n        'amused',\n        'analyst',\n        'anchor',\n        'ancient',\n        'anger',\n        'angle',\n        'angry',\n        'animal',\n        'ankle',\n        'announce',\n        'annual',\n        'another',\n        'answer',\n        'antenna',\n        'antique',\n        'anxiety',\n        'any',\n        'apart',\n        'apology',\n        'appear',\n        'apple',\n        'approve',\n        'april',\n        'arch',\n        'arctic',\n        'area',\n        'arena',\n        'argue',\n        'arm',\n        'armed',\n        'armor',\n        'army',\n        'around',\n        'arrange',\n        'arrest',\n        'arrive',\n        'arrow',\n        'art',\n        'artefact',\n        'artist',\n        'artwork',\n        'ask',\n        'aspect',\n        'assault',\n        'asset',\n        'assist',\n        'assume',\n        'asthma',\n        'athlete',\n        'atom',\n        'attack',\n        'attend',\n        'attitude',\n        'attract',\n        'auction',\n        'audit',\n        'august',\n        'aunt',\n        'author',\n        'auto',\n        'autumn',\n        'average',\n        'avocado',\n        'avoid',\n        'awake',\n        'aware',\n        'away',\n        'awesome',\n        'awful',\n        'awkward',\n        'axis',\n        'baby',\n        'bachelor',\n        'bacon',\n        'badge',\n        'bag',\n        'balance',\n        'balcony',\n        'ball',\n        'bamboo',\n        'banana',\n        'banner',\n        'bar',\n        'barely',\n        'bargain',\n        'barrel',\n        'base',\n        'basic',\n        'basket',\n        'battle',\n        'beach',\n        'bean',\n        'beauty',\n        'because',\n        'become',\n        'beef',\n        'before',\n        'begin',\n        'behave',\n        'behind',\n        'believe',\n        'below',\n        'belt',\n        'bench',\n        'benefit',\n        'best',\n        'betray',\n        'better',\n        'between',\n        'beyond',\n        'bicycle',\n        'bid',\n        'bike',\n        'bind',\n        'biology',\n        'bird',\n        'birth',\n        'bitter',\n        'black',\n        'blade',\n        'blame',\n        'blanket',\n        'blast',\n        'bleak',\n        'bless',\n        'blind',\n        'blood',\n        'blossom',\n        'blouse',\n        'blue',\n        'blur',\n        'blush',\n        'board',\n        'boat',\n        'body',\n        'boil',\n        'bomb',\n        'bone',\n        'bonus',\n        'book',\n        'boost',\n        'border',\n        'boring',\n        'borrow',\n        'boss',\n        'bottom',\n        'bounce',\n        'box',\n        'boy',\n        'bracket',\n        'brain',\n        'brand',\n        'brass',\n        'brave',\n        'bread',\n        'breeze',\n        'brick',\n        'bridge',\n        'brief',\n        'bright',\n        'bring',\n        'brisk',\n        'broccoli',\n        'broken',\n        'bronze',\n        'broom',\n        'brother',\n        'brown',\n        'brush',\n        'bubble',\n        'buddy',\n        'budget',\n        'buffalo',\n        'build',\n        'bulb',\n        'bulk',\n        'bullet',\n        'bundle',\n        'bunker',\n        'burden',\n        'burger',\n        'burst',\n        'bus',\n        'business',\n        'busy',\n        'butter',\n        'buyer',\n        'buzz',\n        'cabbage',\n        'cabin',\n        'cable',\n        'cactus',\n        'cage',\n        'cake',\n        'call',\n        'calm',\n        'camera',\n        'camp',\n        'can',\n        'canal',\n        'cancel',\n        'candy',\n        'cannon',\n        'canoe',\n        'canvas',\n        'canyon',\n        'capable',\n        'capital',\n        'captain',\n        'car',\n        'carbon',\n        'card',\n        'cargo',\n        'carpet',\n        'carry',\n        'cart',\n        'case',\n        'cash',\n        'casino',\n        'castle',\n        'casual',\n        'cat',\n        'catalog',\n        'catch',\n        'category',\n        'cattle',\n        'caught',\n        'cause',\n        'caution',\n        'cave',\n        'ceiling',\n        'celery',\n        'cement',\n        'census',\n        'century',\n        'cereal',\n        'certain',\n        'chair',\n        'chalk',\n        'champion',\n        'change',\n        'chaos',\n        'chapter',\n        'charge',\n        'chase',\n        'chat',\n        'cheap',\n        'check',\n        'cheese',\n        'chef',\n        'cherry',\n        'chest',\n        'chicken',\n        'chief',\n        'child',\n        'chimney',\n        'choice',\n        'choose',\n        'chronic',\n        'chuckle',\n        'chunk',\n        'churn',\n        'cigar',\n        'cinnamon',\n        'circle',\n        'citizen',\n        'city',\n        'civil',\n        'claim',\n        'clap',\n        'clarify',\n        'claw',\n        'clay',\n        'clean',\n        'clerk',\n        'clever',\n        'click',\n        'client',\n        'cliff',\n        'climb',\n        'clinic',\n        'clip',\n        'clock',\n        'clog',\n        'close',\n        'cloth',\n        'cloud',\n        'clown',\n        'club',\n        'clump',\n        'cluster',\n        'clutch',\n        'coach',\n        'coast',\n        'coconut',\n        'code',\n        'coffee',\n        'coil',\n        'coin',\n        'collect',\n        'color',\n        'column',\n        'combine',\n        'come',\n        'comfort',\n        'comic',\n        'common',\n        'company',\n        'concert',\n        'conduct',\n        'confirm',\n        'congress',\n        'connect',\n        'consider',\n        'control',\n        'convince',\n        'cook',\n        'cool',\n        'copper',\n        'copy',\n        'coral',\n        'core',\n        'corn',\n        'correct',\n        'cost',\n        'cotton',\n        'couch',\n        'country',\n        'couple',\n        'course',\n        'cousin',\n        'cover',\n        'coyote',\n        'crack',\n        'cradle',\n        'craft',\n        'cram',\n        'crane',\n        'crash',\n        'crater',\n        'crawl',\n        'crazy',\n        'cream',\n        'credit',\n        'creek',\n        'crew',\n        'cricket',\n        'crime',\n        'crisp',\n        'critic',\n        'crop',\n        'cross',\n        'crouch',\n        'crowd',\n        'crucial',\n        'cruel',\n        'cruise',\n        'crumble',\n        'crunch',\n        'crush',\n        'cry',\n        'crystal',\n        'cube',\n        'culture',\n        'cup',\n        'cupboard',\n        'curious',\n        'current',\n        'curtain',\n        'curve',\n        'cushion',\n        'custom',\n        'cute',\n        'cycle',\n        'dad',\n        'damage',\n        'damp',\n        'dance',\n        'danger',\n        'daring',\n        'dash',\n        'daughter',\n        'dawn',\n        'day',\n        'deal',\n        'debate',\n        'debris',\n        'decade',\n        'december',\n        'decide',\n        'decline',\n        'decorate',\n        'decrease',\n        'deer',\n        'defense',\n        'define',\n        'defy',\n        'degree',\n        'delay',\n        'deliver',\n        'demand',\n        'demise',\n        'denial',\n        'dentist',\n        'deny',\n        'depart',\n        'depend',\n        'deposit',\n        'depth',\n        'deputy',\n        'derive',\n        'describe',\n        'desert',\n        'design',\n        'desk',\n        'despair',\n        'destroy',\n        'detail',\n        'detect',\n        'develop',\n        'device',\n        'devote',\n        'diagram',\n        'dial',\n        'diamond',\n        'diary',\n        'dice',\n        'diesel',\n        'diet',\n        'differ',\n        'digital',\n        'dignity',\n        'dilemma',\n        'dinner',\n        'dinosaur',\n        'direct',\n        'dirt',\n        'disagree',\n        'discover',\n        'disease',\n        'dish',\n        'dismiss',\n        'disorder',\n        'display',\n        'distance',\n        'divert',\n        'divide',\n        'divorce',\n        'dizzy',\n        'doctor',\n        'document',\n        'dog',\n        'doll',\n        'dolphin',\n        'domain',\n        'donate',\n        'donkey',\n        'donor',\n        'door',\n        'dose',\n        'double',\n        'dove',\n        'draft',\n        'dragon',\n        'drama',\n        'drastic',\n        'draw',\n        'dream',\n        'dress',\n        'drift',\n        'drill',\n        'drink',\n        'drip',\n        'drive',\n        'drop',\n        'drum',\n        'dry',\n        'duck',\n        'dumb',\n        'dune',\n        'during',\n        'dust',\n        'dutch',\n        'duty',\n        'dwarf',\n        'dynamic',\n        'eager',\n        'eagle',\n        'early',\n        'earn',\n        'earth',\n        'easily',\n        'east',\n        'easy',\n        'echo',\n        'ecology',\n        'economy',\n        'edge',\n        'edit',\n        'educate',\n        'effort',\n        'egg',\n        'eight',\n        'either',\n        'elbow',\n        'elder',\n        'electric',\n        'elegant',\n        'element',\n        'elephant',\n        'elevator',\n        'elite',\n        'else',\n        'embark',\n        'embody',\n        'embrace',\n        'emerge',\n        'emotion',\n        'employ',\n        'empower',\n        'empty',\n        'enable',\n        'enact',\n        'end',\n        'endless',\n        'endorse',\n        'enemy',\n        'energy',\n        'enforce',\n        'engage',\n        'engine',\n        'enhance',\n        'enjoy',\n        'enlist',\n        'enough',\n        'enrich',\n        'enroll',\n        'ensure',\n        'enter',\n        'entire',\n        'entry',\n        'envelope',\n        'episode',\n        'equal',\n        'equip',\n        'era',\n        'erase',\n        'erode',\n        'erosion',\n        'error',\n        'erupt',\n        'escape',\n        'essay',\n        'essence',\n        'estate',\n        'eternal',\n        'ethics',\n        'evidence',\n        'evil',\n        'evoke',\n        'evolve',\n        'exact',\n        'example',\n        'excess',\n        'exchange',\n        'excite',\n        'exclude',\n        'excuse',\n        'execute',\n        'exercise',\n        'exhaust',\n        'exhibit',\n        'exile',\n        'exist',\n        'exit',\n        'exotic',\n        'expand',\n        'expect',\n        'expire',\n        'explain',\n        'expose',\n        'express',\n        'extend',\n        'extra',\n        'eye',\n        'eyebrow',\n        'fabric',\n        'face',\n        'faculty',\n        'fade',\n        'faint',\n        'faith',\n        'fall',\n        'false',\n        'fame',\n        'family',\n        'famous',\n        'fan',\n        'fancy',\n        'fantasy',\n        'farm',\n        'fashion',\n        'fat',\n        'fatal',\n        'father',\n        'fatigue',\n        'fault',\n        'favorite',\n        'feature',\n        'february',\n        'federal',\n        'fee',\n        'feed',\n        'feel',\n        'female',\n        'fence',\n        'festival',\n        'fetch',\n        'fever',\n        'few',\n        'fiber',\n        'fiction',\n        'field',\n        'figure',\n        'file',\n        'film',\n        'filter',\n        'final',\n        'find',\n        'fine',\n        'finger',\n        'finish',\n        'fire',\n        'firm',\n        'first',\n        'fiscal',\n        'fish',\n        'fit',\n        'fitness',\n        'fix',\n        'flag',\n        'flame',\n        'flash',\n        'flat',\n        'flavor',\n        'flee',\n        'flight',\n        'flip',\n        'float',\n        'flock',\n        'floor',\n        'flower',\n        'fluid',\n        'flush',\n        'fly',\n        'foam',\n        'focus',\n        'fog',\n        'foil',\n        'fold',\n        'follow',\n        'food',\n        'foot',\n        'force',\n        'forest',\n        'forget',\n        'fork',\n        'fortune',\n        'forum',\n        'forward',\n        'fossil',\n        'foster',\n        'found',\n        'fox',\n        'fragile',\n        'frame',\n        'frequent',\n        'fresh',\n        'friend',\n        'fringe',\n        'frog',\n        'front',\n        'frost',\n        'frown',\n        'frozen',\n        'fruit',\n        'fuel',\n        'fun',\n        'funny',\n        'furnace',\n        'fury',\n        'future',\n        'gadget',\n        'gain',\n        'galaxy',\n        'gallery',\n        'game',\n        'gap',\n        'garage',\n        'garbage',\n        'garden',\n        'garlic',\n        'garment',\n        'gas',\n        'gasp',\n        'gate',\n        'gather',\n        'gauge',\n        'gaze',\n        'general',\n        'genius',\n        'genre',\n        'gentle',\n        'genuine',\n        'gesture',\n        'ghost',\n        'giant',\n        'gift',\n        'giggle',\n        'ginger',\n        'giraffe',\n        'girl',\n        'give',\n        'glad',\n        'glance',\n        'glare',\n        'glass',\n        'glide',\n        'glimpse',\n        'globe',\n        'gloom',\n        'glory',\n        'glove',\n        'glow',\n        'glue',\n        'goat',\n        'goddess',\n        'gold',\n        'good',\n        'goose',\n        'gorilla',\n        'gospel',\n        'gossip',\n        'govern',\n        'gown',\n        'grab',\n        'grace',\n        'grain',\n        'grant',\n        'grape',\n        'grass',\n        'gravity',\n        'great',\n        'green',\n        'grid',\n        'grief',\n        'grit',\n        'grocery',\n        'group',\n        'grow',\n        'grunt',\n        'guard',\n        'guess',\n        'guide',\n        'guilt',\n        'guitar',\n        'gun',\n        'gym',\n        'habit',\n        'hair',\n        'half',\n        'hammer',\n        'hamster',\n        'hand',\n        'happy',\n        'harbor',\n        'hard',\n        'harsh',\n        'harvest',\n        'hat',\n        'have',\n        'hawk',\n        'hazard',\n        'head',\n        'health',\n        'heart',\n        'heavy',\n        'hedgehog',\n        'height',\n        'hello',\n        'helmet',\n        'help',\n        'hen',\n        'hero',\n        'hidden',\n        'high',\n        'hill',\n        'hint',\n        'hip',\n        'hire',\n        'history',\n        'hobby',\n        'hockey',\n        'hold',\n        'hole',\n        'holiday',\n        'hollow',\n        'home',\n        'honey',\n        'hood',\n        'hope',\n        'horn',\n        'horror',\n        'horse',\n        'hospital',\n        'host',\n        'hotel',\n        'hour',\n        'hover',\n        'hub',\n        'huge',\n        'human',\n        'humble',\n        'humor',\n        'hundred',\n        'hungry',\n        'hunt',\n        'hurdle',\n        'hurry',\n        'hurt',\n        'husband',\n        'hybrid',\n        'ice',\n        'icon',\n        'idea',\n        'identify',\n        'idle',\n        'ignore',\n        'ill',\n        'illegal',\n        'illness',\n        'image',\n        'imitate',\n        'immense',\n        'immune',\n        'impact',\n        'impose',\n        'improve',\n        'impulse',\n        'inch',\n        'include',\n        'income',\n        'increase',\n        'index',\n        'indicate',\n        'indoor',\n        'industry',\n        'infant',\n        'inflict',\n        'inform',\n        'inhale',\n        'inherit',\n        'initial',\n        'inject',\n        'injury',\n        'inmate',\n        'inner',\n        'innocent',\n        'input',\n        'inquiry',\n        'insane',\n        'insect',\n        'inside',\n        'inspire',\n        'install',\n        'intact',\n        'interest',\n        'into',\n        'invest',\n        'invite',\n        'involve',\n        'iron',\n        'island',\n        'isolate',\n        'issue',\n        'item',\n        'ivory',\n        'jacket',\n        'jaguar',\n        'jar',\n        'jazz',\n        'jealous',\n        'jeans',\n        'jelly',\n        'jewel',\n        'job',\n        'join',\n        'joke',\n        'journey',\n        'joy',\n        'judge',\n        'juice',\n        'jump',\n        'jungle',\n        'junior',\n        'junk',\n        'just',\n        'kangaroo',\n        'keen',\n        'keep',\n        'ketchup',\n        'key',\n        'kick',\n        'kid',\n        'kidney',\n        'kind',\n        'kingdom',\n        'kiss',\n        'kit',\n        'kitchen',\n        'kite',\n        'kitten',\n        'kiwi',\n        'knee',\n        'knife',\n        'knock',\n        'know',\n        'lab',\n        'label',\n        'labor',\n        'ladder',\n        'lady',\n        'lake',\n        'lamp',\n        'language',\n        'laptop',\n        'large',\n        'later',\n        'latin',\n        'laugh',\n        'laundry',\n        'lava',\n        'law',\n        'lawn',\n        'lawsuit',\n        'layer',\n        'lazy',\n        'leader',\n        'leaf',\n        'learn',\n        'leave',\n        'lecture',\n        'left',\n        'leg',\n        'legal',\n        'legend',\n        'leisure',\n        'lemon',\n        'lend',\n        'length',\n        'lens',\n        'leopard',\n        'lesson',\n        'letter',\n        'level',\n        'liar',\n        'liberty',\n        'library',\n        'license',\n        'life',\n        'lift',\n        'light',\n        'like',\n        'limb',\n        'limit',\n        'link',\n        'lion',\n        'liquid',\n        'list',\n        'little',\n        'live',\n        'lizard',\n        'load',\n        'loan',\n        'lobster',\n        'local',\n        'lock',\n        'logic',\n        'lonely',\n        'long',\n        'loop',\n        'lottery',\n        'loud',\n        'lounge',\n        'love',\n        'loyal',\n        'lucky',\n        'luggage',\n        'lumber',\n        'lunar',\n        'lunch',\n        'luxury',\n        'lyrics',\n        'machine',\n        'mad',\n        'magic',\n        'magnet',\n        'maid',\n        'mail',\n        'main',\n        'major',\n        'make',\n        'mammal',\n        'man',\n        'manage',\n        'mandate',\n        'mango',\n        'mansion',\n        'manual',\n        'maple',\n        'marble',\n        'march',\n        'margin',\n        'marine',\n        'market',\n        'marriage',\n        'mask',\n        'mass',\n        'master',\n        'match',\n        'material',\n        'math',\n        'matrix',\n        'matter',\n        'maximum',\n        'maze',\n        'meadow',\n        'mean',\n        'measure',\n        'meat',\n        'mechanic',\n        'medal',\n        'media',\n        'melody',\n        'melt',\n        'member',\n        'memory',\n        'mention',\n        'menu',\n        'mercy',\n        'merge',\n        'merit',\n        'merry',\n        'mesh',\n        'message',\n        'metal',\n        'method',\n        'middle',\n        'midnight',\n        'milk',\n        'million',\n        'mimic',\n        'mind',\n        'minimum',\n        'minor',\n        'minute',\n        'miracle',\n        'mirror',\n        'misery',\n        'miss',\n        'mistake',\n        'mix',\n        'mixed',\n        'mixture',\n        'mobile',\n        'model',\n        'modify',\n        'mom',\n        'moment',\n        'monitor',\n        'monkey',\n        'monster',\n        'month',\n        'moon',\n        'moral',\n        'more',\n        'morning',\n        'mosquito',\n        'mother',\n        'motion',\n        'motor',\n        'mountain',\n        'mouse',\n        'move',\n        'movie',\n        'much',\n        'muffin',\n        'mule',\n        'multiply',\n        'muscle',\n        'museum',\n        'mushroom',\n        'music',\n        'must',\n        'mutual',\n        'myself',\n        'mystery',\n        'myth',\n        'naive',\n        'name',\n        'napkin',\n        'narrow',\n        'nasty',\n        'nation',\n        'nature',\n        'near',\n        'neck',\n        'need',\n        'negative',\n        'neglect',\n        'neither',\n        'nephew',\n        'nerve',\n        'nest',\n        'net',\n        'network',\n        'neutral',\n        'never',\n        'news',\n        'next',\n        'nice',\n        'night',\n        'noble',\n        'noise',\n        'nominee',\n        'noodle',\n        'normal',\n        'north',\n        'nose',\n        'notable',\n        'note',\n        'nothing',\n        'notice',\n        'novel',\n        'now',\n        'nuclear',\n        'number',\n        'nurse',\n        'nut',\n        'oak',\n        'obey',\n        'object',\n        'oblige',\n        'obscure',\n        'observe',\n        'obtain',\n        'obvious',\n        'occur',\n        'ocean',\n        'october',\n        'odor',\n        'off',\n        'offer',\n        'office',\n        'often',\n        'oil',\n        'okay',\n        'old',\n        'olive',\n        'olympic',\n        'omit',\n        'once',\n        'one',\n        'onion',\n        'online',\n        'only',\n        'open',\n        'opera',\n        'opinion',\n        'oppose',\n        'option',\n        'orange',\n        'orbit',\n        'orchard',\n        'order',\n        'ordinary',\n        'organ',\n        'orient',\n        'original',\n        'orphan',\n        'ostrich',\n        'other',\n        'outdoor',\n        'outer',\n        'output',\n        'outside',\n        'oval',\n        'oven',\n        'over',\n        'own',\n        'owner',\n        'oxygen',\n        'oyster',\n        'ozone',\n        'pact',\n        'paddle',\n        'page',\n        'pair',\n        'palace',\n        'palm',\n        'panda',\n        'panel',\n        'panic',\n        'panther',\n        'paper',\n        'parade',\n        'parent',\n        'park',\n        'parrot',\n        'party',\n        'pass',\n        'patch',\n        'path',\n        'patient',\n        'patrol',\n        'pattern',\n        'pause',\n        'pave',\n        'payment',\n        'peace',\n        'peanut',\n        'pear',\n        'peasant',\n        'pelican',\n        'pen',\n        'penalty',\n        'pencil',\n        'people',\n        'pepper',\n        'perfect',\n        'permit',\n        'person',\n        'pet',\n        'phone',\n        'photo',\n        'phrase',\n        'physical',\n        'piano',\n        'picnic',\n        'picture',\n        'piece',\n        'pig',\n        'pigeon',\n        'pill',\n        'pilot',\n        'pink',\n        'pioneer',\n        'pipe',\n        'pistol',\n        'pitch',\n        'pizza',\n        'place',\n        'planet',\n        'plastic',\n        'plate',\n        'play',\n        'please',\n        'pledge',\n        'pluck',\n        'plug',\n        'plunge',\n        'poem',\n        'poet',\n        'point',\n        'polar',\n        'pole',\n        'police',\n        'pond',\n        'pony',\n        'pool',\n        'popular',\n        'portion',\n        'position',\n        'possible',\n        'post',\n        'potato',\n        'pottery',\n        'poverty',\n        'powder',\n        'power',\n        'practice',\n        'praise',\n        'predict',\n        'prefer',\n        'prepare',\n        'present',\n        'pretty',\n        'prevent',\n        'price',\n        'pride',\n        'primary',\n        'print',\n        'priority',\n        'prison',\n        'private',\n        'prize',\n        'problem',\n        'process',\n        'produce',\n        'profit',\n        'program',\n        'project',\n        'promote',\n        'proof',\n        'property',\n        'prosper',\n        'protect',\n        'proud',\n        'provide',\n        'public',\n        'pudding',\n        'pull',\n        'pulp',\n        'pulse',\n        'pumpkin',\n        'punch',\n        'pupil',\n        'puppy',\n        'purchase',\n        'purity',\n        'purpose',\n        'purse',\n        'push',\n        'put',\n        'puzzle',\n        'pyramid',\n        'quality',\n        'quantum',\n        'quarter',\n        'question',\n        'quick',\n        'quit',\n        'quiz',\n        'quote',\n        'rabbit',\n        'raccoon',\n        'race',\n        'rack',\n        'radar',\n        'radio',\n        'rail',\n        'rain',\n        'raise',\n        'rally',\n        'ramp',\n        'ranch',\n        'random',\n        'range',\n        'rapid',\n        'rare',\n        'rate',\n        'rather',\n        'raven',\n        'raw',\n        'razor',\n        'ready',\n        'real',\n        'reason',\n        'rebel',\n        'rebuild',\n        'recall',\n        'receive',\n        'recipe',\n        'record',\n        'recycle',\n        'reduce',\n        'reflect',\n        'reform',\n        'refuse',\n        'region',\n        'regret',\n        'regular',\n        'reject',\n        'relax',\n        'release',\n        'relief',\n        'rely',\n        'remain',\n        'remember',\n        'remind',\n        'remove',\n        'render',\n        'renew',\n        'rent',\n        'reopen',\n        'repair',\n        'repeat',\n        'replace',\n        'report',\n        'require',\n        'rescue',\n        'resemble',\n        'resist',\n        'resource',\n        'response',\n        'result',\n        'retire',\n        'retreat',\n        'return',\n        'reunion',\n        'reveal',\n        'review',\n        'reward',\n        'rhythm',\n        'rib',\n        'ribbon',\n        'rice',\n        'rich',\n        'ride',\n        'ridge',\n        'rifle',\n        'right',\n        'rigid',\n        'ring',\n        'riot',\n        'ripple',\n        'risk',\n        'ritual',\n        'rival',\n        'river',\n        'road',\n        'roast',\n        'robot',\n        'robust',\n        'rocket',\n        'romance',\n        'roof',\n        'rookie',\n        'room',\n        'rose',\n        'rotate',\n        'rough',\n        'round',\n        'route',\n        'royal',\n        'rubber',\n        'rude',\n        'rug',\n        'rule',\n        'run',\n        'runway',\n        'rural',\n        'sad',\n        'saddle',\n        'sadness',\n        'safe',\n        'sail',\n        'salad',\n        'salmon',\n        'salon',\n        'salt',\n        'salute',\n        'same',\n        'sample',\n        'sand',\n        'satisfy',\n        'satoshi',\n        'sauce',\n        'sausage',\n        'save',\n        'say',\n        'scale',\n        'scan',\n        'scare',\n        'scatter',\n        'scene',\n        'scheme',\n        'school',\n        'science',\n        'scissors',\n        'scorpion',\n        'scout',\n        'scrap',\n        'screen',\n        'script',\n        'scrub',\n        'sea',\n        'search',\n        'season',\n        'seat',\n        'second',\n        'secret',\n        'section',\n        'security',\n        'seed',\n        'seek',\n        'segment',\n        'select',\n        'sell',\n        'seminar',\n        'senior',\n        'sense',\n        'sentence',\n        'series',\n        'service',\n        'session',\n        'settle',\n        'setup',\n        'seven',\n        'shadow',\n        'shaft',\n        'shallow',\n        'share',\n        'shed',\n        'shell',\n        'sheriff',\n        'shield',\n        'shift',\n        'shine',\n        'ship',\n        'shiver',\n        'shock',\n        'shoe',\n        'shoot',\n        'shop',\n        'short',\n        'shoulder',\n        'shove',\n        'shrimp',\n        'shrug',\n        'shuffle',\n        'shy',\n        'sibling',\n        'sick',\n        'side',\n        'siege',\n        'sight',\n        'sign',\n        'silent',\n        'silk',\n        'silly',\n        'silver',\n        'similar',\n        'simple',\n        'since',\n        'sing',\n        'siren',\n        'sister',\n        'situate',\n        'six',\n        'size',\n        'skate',\n        'sketch',\n        'ski',\n        'skill',\n        'skin',\n        'skirt',\n        'skull',\n        'slab',\n        'slam',\n        'sleep',\n        'slender',\n        'slice',\n        'slide',\n        'slight',\n        'slim',\n        'slogan',\n        'slot',\n        'slow',\n        'slush',\n        'small',\n        'smart',\n        'smile',\n        'smoke',\n        'smooth',\n        'snack',\n        'snake',\n        'snap',\n        'sniff',\n        'snow',\n        'soap',\n        'soccer',\n        'social',\n        'sock',\n        'soda',\n        'soft',\n        'solar',\n        'soldier',\n        'solid',\n        'solution',\n        'solve',\n        'someone',\n        'song',\n        'soon',\n        'sorry',\n        'sort',\n        'soul',\n        'sound',\n        'soup',\n        'source',\n        'south',\n        'space',\n        'spare',\n        'spatial',\n        'spawn',\n        'speak',\n        'special',\n        'speed',\n        'spell',\n        'spend',\n        'sphere',\n        'spice',\n        'spider',\n        'spike',\n        'spin',\n        'spirit',\n        'split',\n        'spoil',\n        'sponsor',\n        'spoon',\n        'sport',\n        'spot',\n        'spray',\n        'spread',\n        'spring',\n        'spy',\n        'square',\n        'squeeze',\n        'squirrel',\n        'stable',\n        'stadium',\n        'staff',\n        'stage',\n        'stairs',\n        'stamp',\n        'stand',\n        'start',\n        'state',\n        'stay',\n        'steak',\n        'steel',\n        'stem',\n        'step',\n        'stereo',\n        'stick',\n        'still',\n        'sting',\n        'stock',\n        'stomach',\n        'stone',\n        'stool',\n        'story',\n        'stove',\n        'strategy',\n        'street',\n        'strike',\n        'strong',\n        'struggle',\n        'student',\n        'stuff',\n        'stumble',\n        'style',\n        'subject',\n        'submit',\n        'subway',\n        'success',\n        'such',\n        'sudden',\n        'suffer',\n        'sugar',\n        'suggest',\n        'suit',\n        'summer',\n        'sun',\n        'sunny',\n        'sunset',\n        'super',\n        'supply',\n        'supreme',\n        'sure',\n        'surface',\n        'surge',\n        'surprise',\n        'surround',\n        'survey',\n        'suspect',\n        'sustain',\n        'swallow',\n        'swamp',\n        'swap',\n        'swarm',\n        'swear',\n        'sweet',\n        'swift',\n        'swim',\n        'swing',\n        'switch',\n        'sword',\n        'symbol',\n        'symptom',\n        'syrup',\n        'system',\n        'table',\n        'tackle',\n        'tag',\n        'tail',\n        'talent',\n        'talk',\n        'tank',\n        'tape',\n        'target',\n        'task',\n        'taste',\n        'tattoo',\n        'taxi',\n        'teach',\n        'team',\n        'tell',\n        'ten',\n        'tenant',\n        'tennis',\n        'tent',\n        'term',\n        'test',\n        'text',\n        'thank',\n        'that',\n        'theme',\n        'then',\n        'theory',\n        'there',\n        'they',\n        'thing',\n        'this',\n        'thought',\n        'three',\n        'thrive',\n        'throw',\n        'thumb',\n        'thunder',\n        'ticket',\n        'tide',\n        'tiger',\n        'tilt',\n        'timber',\n        'time',\n        'tiny',\n        'tip',\n        'tired',\n        'tissue',\n        'title',\n        'toast',\n        'tobacco',\n        'today',\n        'toddler',\n        'toe',\n        'together',\n        'toilet',\n        'token',\n        'tomato',\n        'tomorrow',\n        'tone',\n        'tongue',\n        'tonight',\n        'tool',\n        'tooth',\n        'top',\n        'topic',\n        'topple',\n        'torch',\n        'tornado',\n        'tortoise',\n        'toss',\n        'total',\n        'tourist',\n        'toward',\n        'tower',\n        'town',\n        'toy',\n        'track',\n        'trade',\n        'traffic',\n        'tragic',\n        'train',\n        'transfer',\n        'trap',\n        'trash',\n        'travel',\n        'tray',\n        'treat',\n        'tree',\n        'trend',\n        'trial',\n        'tribe',\n        'trick',\n        'trigger',\n        'trim',\n        'trip',\n        'trophy',\n        'trouble',\n        'truck',\n        'true',\n        'truly',\n        'trumpet',\n        'trust',\n        'truth',\n        'try',\n        'tube',\n        'tuition',\n        'tumble',\n        'tuna',\n        'tunnel',\n        'turkey',\n        'turn',\n        'turtle',\n        'twelve',\n        'twenty',\n        'twice',\n        'twin',\n        'twist',\n        'two',\n        'type',\n        'typical',\n        'ugly',\n        'umbrella',\n        'unable',\n        'unaware',\n        'uncle',\n        'uncover',\n        'under',\n        'undo',\n        'unfair',\n        'unfold',\n        'unhappy',\n        'uniform',\n        'unique',\n        'unit',\n        'universe',\n        'unknown',\n        'unlock',\n        'until',\n        'unusual',\n        'unveil',\n        'update',\n        'upgrade',\n        'uphold',\n        'upon',\n        'upper',\n        'upset',\n        'urban',\n        'urge',\n        'usage',\n        'use',\n        'used',\n        'useful',\n        'useless',\n        'usual',\n        'utility',\n        'vacant',\n        'vacuum',\n        'vague',\n        'valid',\n        'valley',\n        'valve',\n        'van',\n        'vanish',\n        'vapor',\n        'various',\n        'vast',\n        'vault',\n        'vehicle',\n        'velvet',\n        'vendor',\n        'venture',\n        'venue',\n        'verb',\n        'verify',\n        'version',\n        'very',\n        'vessel',\n        'veteran',\n        'viable',\n        'vibrant',\n        'vicious',\n        'victory',\n        'video',\n        'view',\n        'village',\n        'vintage',\n        'violin',\n        'virtual',\n        'virus',\n        'visa',\n        'visit',\n        'visual',\n        'vital',\n        'vivid',\n        'vocal',\n        'voice',\n        'void',\n        'volcano',\n        'volume',\n        'vote',\n        'voyage',\n        'wage',\n        'wagon',\n        'wait',\n        'walk',\n        'wall',\n        'walnut',\n        'want',\n        'warfare',\n        'warm',\n        'warrior',\n        'wash',\n        'wasp',\n        'waste',\n        'water',\n        'wave',\n        'way',\n        'wealth',\n        'weapon',\n        'wear',\n        'weasel',\n        'weather',\n        'web',\n        'wedding',\n        'weekend',\n        'weird',\n        'welcome',\n        'west',\n        'wet',\n        'whale',\n        'what',\n        'wheat',\n        'wheel',\n        'when',\n        'where',\n        'whip',\n        'whisper',\n        'wide',\n        'width',\n        'wife',\n        'wild',\n        'will',\n        'win',\n        'window',\n        'wine',\n        'wing',\n        'wink',\n        'winner',\n        'winter',\n        'wire',\n        'wisdom',\n        'wise',\n        'wish',\n        'witness',\n        'wolf',\n        'woman',\n        'wonder',\n        'wood',\n        'wool',\n        'word',\n        'work',\n        'world',\n        'worry',\n        'worth',\n        'wrap',\n        'wreck',\n        'wrestle',\n        'wrist',\n        'write',\n        'wrong',\n        'yard',\n        'year',\n        'yellow',\n        'you',\n        'young',\n        'youth',\n        'zebra',\n        'zero',\n        'zone',\n        'zoo'\n    ],\n    space: ' '\n};\n//# sourceMappingURL=bip-39-wordlist-en.js.map","import { wordList } from './bip-39-wordlist-en.js';\nimport { encode, toArray, Reader, Writer } from '../primitives/utils.js';\nimport * as Hash from '../primitives/Hash.js';\nimport Random from '../primitives/Random.js';\n/**\n * @class Mnemonic\n *\n * @description\n * Class representing Mnemonic functionality.\n * This class provides methods for generating, converting, and validating mnemonic phrases\n * according to the BIP39 standard. It supports creating mnemonics from random entropy,\n * converting mnemonics to seeds, and validating mnemonic phrases.\n */\nexport default class Mnemonic {\n    mnemonic;\n    seed;\n    Wordlist;\n    /**\n     * Constructs a Mnemonic object.\n     * @param {string} [mnemonic] - An optional mnemonic phrase.\n     * @param {number[]} [seed] - An optional seed derived from the mnemonic.\n     * @param {object} [wordlist=wordList] - An object containing a list of words and space character used in the mnemonic.\n     */\n    constructor(mnemonic, seed, wordlist = wordList) {\n        this.mnemonic = mnemonic ?? ''; // Default to empty string if undefined\n        this.seed = seed ?? []; // Default to empty array if undefined\n        this.Wordlist = wordlist;\n    }\n    /**\n     * Converts the mnemonic and seed into a binary representation.\n     * @returns {number[]} The binary representation of the mnemonic and seed.\n     */\n    toBinary() {\n        const bw = new Writer();\n        if (this.mnemonic !== '') {\n            const buf = toArray(this.mnemonic, 'utf8');\n            bw.writeVarIntNum(buf.length);\n            bw.write(buf);\n        }\n        else {\n            bw.writeVarIntNum(0);\n        }\n        if (this.seed.length > 0) {\n            bw.writeVarIntNum(this.seed.length);\n            bw.write(this.seed);\n        }\n        else {\n            bw.writeVarIntNum(0);\n        }\n        return bw.toArray();\n    }\n    /**\n     * Loads a mnemonic and seed from a binary representation.\n     * @param {number[]} bin - The binary representation of a mnemonic and seed.\n     * @returns {this} The Mnemonic instance with loaded mnemonic and seed.\n     */\n    fromBinary(bin) {\n        const br = new Reader(bin);\n        const mnemoniclen = br.readVarIntNum();\n        if (mnemoniclen > 0) {\n            this.mnemonic = encode(br.read(mnemoniclen), 'utf8');\n        }\n        const seedlen = br.readVarIntNum();\n        if (seedlen > 0) {\n            this.seed = br.read(seedlen);\n        }\n        return this;\n    }\n    /**\n     * Generates a random mnemonic from a given bit length.\n     * @param {number} [bits=128] - The bit length for the random mnemonic (must be a multiple of 32 and at least 128).\n     * @returns {this} The Mnemonic instance with the new random mnemonic.\n     * @throws {Error} If the bit length is not a multiple of 32 or is less than 128.\n     */\n    fromRandom(bits) {\n        if (bits === undefined || bits === null || isNaN(bits) || bits === 0) {\n            bits = 128;\n        }\n        if (bits % 32 !== 0) {\n            throw new Error('bits must be multiple of 32');\n        }\n        if (bits < 128) {\n            throw new Error('bits must be at least 128');\n        }\n        const buf = Random(bits / 8);\n        this.entropy2Mnemonic(buf);\n        this.mnemonic2Seed();\n        return this;\n    }\n    /**\n     * Static method to generate a Mnemonic instance with a random mnemonic.\n     * @param {number} [bits=128] - The bit length for the random mnemonic.\n     * @returns {Mnemonic} A new Mnemonic instance.\n     */\n    static fromRandom(bits) {\n        return new this().fromRandom(bits);\n    }\n    /**\n     * Converts given entropy into a mnemonic phrase.\n     * This method is used to generate a mnemonic from a specific entropy source.\n     * @param {number[]} buf - The entropy buffer, must be at least 128 bits.\n     * @returns {this} The Mnemonic instance with the mnemonic set from the given entropy.\n     * @throws {Error} If the entropy is less than 128 bits.\n     */\n    fromEntropy(buf) {\n        this.entropy2Mnemonic(buf);\n        return this;\n    }\n    /**\n     * Static method to create a Mnemonic instance from a given entropy.\n     * @param {number[]} buf - The entropy buffer.\n     * @returns {Mnemonic} A new Mnemonic instance.\n     */\n    static fromEntropy(buf) {\n        return new this().fromEntropy(buf);\n    }\n    /**\n     * Sets the mnemonic for the instance from a string.\n     * @param {string} mnemonic - The mnemonic phrase as a string.\n     * @returns {this} The Mnemonic instance with the set mnemonic.\n     */\n    fromString(mnemonic) {\n        this.mnemonic = mnemonic;\n        return this;\n    }\n    /**\n     * Static method to create a Mnemonic instance from a mnemonic string.\n     * @param {string} str - The mnemonic phrase.\n     * @returns {Mnemonic} A new Mnemonic instance.\n     */\n    static fromString(str) {\n        return new this().fromString(str);\n    }\n    /**\n     * Converts the instance's mnemonic to a string representation.\n     * @returns {string} The mnemonic phrase as a string.\n     */\n    toString() {\n        return this.mnemonic;\n    }\n    /**\n     * Converts the mnemonic to a seed.\n     * The mnemonic must pass the validity check before conversion.\n     * @param {string} [passphrase=''] - An optional passphrase for additional security.\n     * @returns {number[]} The generated seed.\n     * @throws {Error} If the mnemonic is invalid.\n     */\n    toSeed(passphrase) {\n        this.mnemonic2Seed(passphrase);\n        return this.seed;\n    }\n    /**\n     * Converts entropy to a mnemonic phrase.\n     * This method takes a buffer of entropy and converts it into a corresponding\n     * mnemonic phrase based on the Mnemonic wordlist. The entropy should be at least 128 bits.\n     * The method applies a checksum and maps the entropy to words in the wordlist.\n     * @param {number[]} buf - The entropy buffer to convert. Must be at least 128 bits.\n     * @returns {this} The Mnemonic instance with the mnemonic set from the entropy.\n     * @throws {Error} If the entropy is less than 128 bits or if it's not an even multiple of 11 bits.\n     */\n    entropy2Mnemonic(buf) {\n        if (buf.length < 128 / 8) {\n            throw new Error('Entropy is less than 128 bits. It must be 128 bits or more.');\n        }\n        const hash = Hash.sha256(buf);\n        let bin = '';\n        const bits = buf.length * 8;\n        for (let i = 0; i < buf.length; i++) {\n            bin = bin + ('00000000' + buf[i].toString(2)).slice(-8);\n        }\n        let hashbits = hash[0].toString(2);\n        hashbits = ('00000000' + hashbits).slice(-8).slice(0, bits / 32);\n        bin = bin + hashbits;\n        if (bin.length % 11 !== 0) {\n            throw new Error('internal error - entropy not an even multiple of 11 bits - ' +\n                bin.length.toString());\n        }\n        let mnemonic = '';\n        for (let i = 0; i < bin.length / 11; i++) {\n            if (mnemonic !== '') {\n                mnemonic = mnemonic + this.Wordlist.space;\n            }\n            const wi = parseInt(bin.slice(i * 11, (i + 1) * 11), 2);\n            mnemonic = mnemonic + this.Wordlist.value[wi];\n        }\n        this.mnemonic = mnemonic;\n        return this;\n    }\n    /**\n     * Validates the mnemonic phrase.\n     * Checks for correct length, absence of invalid words, and proper checksum.\n     * @returns {boolean} True if the mnemonic is valid, false otherwise.\n     * @throws {Error} If the mnemonic is not an even multiple of 11 bits.\n     */\n    check() {\n        const mnemonic = this.mnemonic;\n        // confirm no invalid words\n        const words = mnemonic.split(this.Wordlist.space);\n        let bin = '';\n        for (let i = 0; i < words.length; i++) {\n            const ind = this.Wordlist.value.indexOf(words[i]);\n            if (ind < 0) {\n                return false;\n            }\n            bin = bin + ('00000000000' + ind.toString(2)).slice(-11);\n        }\n        if (bin.length % 11 !== 0) {\n            throw new Error('internal error - entropy not an even multiple of 11 bits - ' +\n                bin.length.toString());\n        }\n        // confirm checksum\n        const cs = bin.length / 33;\n        const hashBits = bin.slice(-cs);\n        const nonhashBits = bin.slice(0, bin.length - cs);\n        const buf = [];\n        for (let i = 0; i < nonhashBits.length / 8; i++) {\n            buf.push(parseInt(bin.slice(i * 8, (i + 1) * 8), 2));\n        }\n        const hash = Hash.sha256(buf.slice(0, nonhashBits.length / 8));\n        let expectedHashBits = hash[0].toString(2);\n        expectedHashBits = ('00000000' + expectedHashBits).slice(-8).slice(0, cs);\n        return expectedHashBits === hashBits;\n    }\n    /**\n     * Converts a mnemonic to a seed.\n     * This method takes the instance's mnemonic phrase, combines it with a passphrase (if provided),\n     * and uses PBKDF2 to generate a seed. It also validates the mnemonic before conversion.\n     * This seed can then be used for generating deterministic keys.\n     * @param {string} [passphrase=''] - An optional passphrase for added security.\n     * @returns {this} The Mnemonic instance with the seed generated from the mnemonic.\n     * @throws {Error} If the mnemonic does not pass validation or if the passphrase is not a string.\n     */\n    mnemonic2Seed(passphrase = '') {\n        let mnemonic = this.mnemonic;\n        if (!this.check()) {\n            throw new Error('Mnemonic does not pass the check - was the mnemonic typed incorrectly? Are there extra spaces?');\n        }\n        if (typeof passphrase !== 'string') {\n            throw new Error('passphrase must be a string or undefined');\n        }\n        mnemonic = mnemonic.normalize('NFKD');\n        passphrase = passphrase.normalize('NFKD');\n        const mbuf = toArray(mnemonic, 'utf8');\n        const pbuf = [\n            ...toArray('mnemonic', 'utf8'),\n            ...toArray(passphrase, 'utf8')\n        ];\n        this.seed = Hash.pbkdf2(mbuf, pbuf, 2048, 64, 'sha512');\n        return this;\n    }\n    /**\n     * Determines the validity of a given passphrase with the mnemonic.\n     * This method is useful for checking if a passphrase matches with the mnemonic.\n     * @param {string} [passphrase=''] - The passphrase to validate.\n     * @returns {boolean} True if the mnemonic and passphrase combination is valid, false otherwise.\n     */\n    isValid(passphrase = '') {\n        let isValid;\n        try {\n            this.mnemonic2Seed(passphrase);\n            isValid = true;\n        }\n        catch {\n            isValid = false;\n        }\n        return isValid;\n    }\n    /**\n     * Static method to check the validity of a given mnemonic and passphrase combination.\n     * @param {string} mnemonic - The mnemonic phrase.\n     * @param {string} [passphrase=''] - The passphrase to validate.\n     * @returns {boolean} True if the combination is valid, false otherwise.\n     */\n    static isValid(mnemonic, passphrase = '') {\n        return new Mnemonic(mnemonic).isValid(passphrase);\n    }\n}\n//# sourceMappingURL=Mnemonic.js.map","// import { AESWrappercbc } from './aescbc'\nimport Random from '../primitives/Random.js';\nimport PrivateKey from '../primitives/PrivateKey.js';\nimport PublicKey from '../primitives/PublicKey.js';\nimport Point from '../primitives/Point.js';\nimport * as Hash from '../primitives/Hash.js';\nimport { toArray, toHex, encode } from '../primitives/utils.js';\nfunction AES(key) {\n    if (this._tables[0][0][0] === 0)\n        this._precompute();\n    let tmp, encKey, decKey;\n    const sbox = this._tables[0][4];\n    const decTable = this._tables[1];\n    const keyLen = key.length;\n    let rcon = 1;\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new Error('invalid aes key size');\n    }\n    this._key = [(encKey = key.slice(0)), (decKey = [])];\n    // schedule encryption keys\n    let i;\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1];\n        // apply sbox\n        if (i % keyLen === 0 || (keyLen === 8 && i % keyLen === 4)) {\n            tmp =\n                (sbox[tmp >>> 24] << 24) ^\n                    (sbox[(tmp >> 16) & 255] << 16) ^\n                    (sbox[(tmp >> 8) & 255] << 8) ^\n                    sbox[tmp & 255];\n            // shift rows and add rcon\n            if (i % keyLen === 0) {\n                tmp = (tmp << 8) ^ (tmp >>> 24) ^ (rcon << 24);\n                rcon = (rcon << 1) ^ ((rcon >> 7) * 283);\n            }\n        }\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n    // schedule decryption keys\n    for (let j = 0; i > 0; j++, i--) {\n        tmp = encKey[(j & 3) !== 0 ? i : i - 4];\n        if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n        }\n        else {\n            decKey[j] =\n                decTable[0][sbox[tmp >>> 24]] ^\n                    decTable[1][sbox[(tmp >> 16) & 255]] ^\n                    decTable[2][sbox[(tmp >> 8) & 255]] ^\n                    decTable[3][sbox[tmp & 255]];\n        }\n    }\n}\nAES.prototype = {\n    /**\n     * Encrypt an array of 4 big-endian words.\n     * @param {Array} data The plaintext.\n     * @return {Array} The ciphertext.\n     */\n    encrypt: function (data) {\n        return this._crypt(data, 0);\n    },\n    /**\n     * Decrypt an array of 4 big-endian words.\n     * @param {Array} data The ciphertext.\n     * @return {Array} The plaintext.\n     */\n    decrypt: function (data) {\n        return this._crypt(data, 1);\n    },\n    /**\n     * The expanded S-box and inverse S-box tables.  These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    _tables: [\n        [\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256)\n        ],\n        [\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256),\n            new Uint32Array(256)\n        ]\n    ],\n    // Expand the S-box tables.\n    _precompute: function () {\n        const encTable = this._tables[0];\n        const decTable = this._tables[1];\n        const sbox = encTable[4];\n        const sboxInv = decTable[4];\n        let i;\n        let x;\n        let xInv;\n        const d = new Uint8Array(256);\n        const th = new Uint8Array(256);\n        let x2;\n        let x4;\n        let x8;\n        let s;\n        let tEnc;\n        let tDec;\n        // Compute double and third tables\n        for (i = 0; i < 256; i++) {\n            th[(d[i] = (i << 1) ^ ((i >> 7) * 283)) ^ i] = i;\n        }\n        for (x = xInv = 0; sbox[x] === 0; x ^= (x2 !== 0 ? x2 : 1), xInv = th[xInv] !== 0 ? th[xInv] : 1) {\n            // Compute sbox\n            s = xInv ^ (xInv << 1) ^ (xInv << 2) ^ (xInv << 3) ^ (xInv << 4);\n            s = (s >> 8) ^ (s & 255) ^ 99;\n            sbox[x] = s;\n            sboxInv[s] = x;\n            // Compute MixColumns\n            x8 = d[(x4 = d[(x2 = d[x])])];\n            tDec = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n            tEnc = (d[s] * 0x101) ^ (s * 0x1010100);\n            for (i = 0; i < 4; i++) {\n                encTable[i][x] = tEnc = (tEnc << 24) ^ (tEnc >>> 8);\n                decTable[i][s] = tDec = (tDec << 24) ^ (tDec >>> 8);\n            }\n        }\n    },\n    /**\n     * Encryption and decryption core.\n     * @param {Array} input Four words to be encrypted or decrypted.\n     * @param dir The direction, 0 for encrypt and 1 for decrypt.\n     * @return {Array} The four encrypted or decrypted words.\n     * @private\n     */\n    _crypt: function (input, dir) {\n        if (input.length !== 4) {\n            throw new Error('invalid aes block size');\n        }\n        const key = this._key[dir];\n        // state variables a,b,c,d are loaded with pre-whitened data\n        let a = input[0] ^ key[0];\n        let b = input[dir === 1 ? 3 : 1] ^ key[1];\n        let c = input[2] ^ key[2];\n        let d = input[dir === 1 ? 1 : 3] ^ key[3];\n        let a2;\n        let b2;\n        let c2;\n        const nInnerRounds = key.length / 4 - 2;\n        let i;\n        let kIndex = 4;\n        const out = new Uint32Array(4);\n        const // <--- this is slower in Node, about the same in Chrome */\n        table = this._tables[dir];\n        // load up the tables\n        const t0 = table[0];\n        const t1 = table[1];\n        const t2 = table[2];\n        const t3 = table[3];\n        const sbox = table[4];\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n            a2 =\n                t0[a >>> 24] ^\n                    t1[(b >> 16) & 255] ^\n                    t2[(c >> 8) & 255] ^\n                    t3[d & 255] ^\n                    key[kIndex];\n            b2 =\n                t0[b >>> 24] ^\n                    t1[(c >> 16) & 255] ^\n                    t2[(d >> 8) & 255] ^\n                    t3[a & 255] ^\n                    key[kIndex + 1];\n            c2 =\n                t0[c >>> 24] ^\n                    t1[(d >> 16) & 255] ^\n                    t2[(a >> 8) & 255] ^\n                    t3[b & 255] ^\n                    key[kIndex + 2];\n            d =\n                t0[d >>> 24] ^\n                    t1[(a >> 16) & 255] ^\n                    t2[(b >> 8) & 255] ^\n                    t3[c & 255] ^\n                    key[kIndex + 3];\n            kIndex += 4;\n            a = a2;\n            b = b2;\n            c = c2;\n        }\n        // Last round.\n        for (i = 0; i < 4; i++) {\n            out[dir === 1 ? 3 & -i : i] =\n                (sbox[a >>> 24] << 24) ^\n                    (sbox[(b >> 16) & 255] << 16) ^\n                    (sbox[(c >> 8) & 255] << 8) ^\n                    sbox[d & 255] ^\n                    key[kIndex++];\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    }\n};\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass AESWrapper {\n    static encrypt(messageBuf, keyBuf) {\n        const key = AESWrapper.buf2Words(keyBuf);\n        const message = AESWrapper.buf2Words(messageBuf);\n        const a = new AES(key);\n        const enc = a.encrypt(message);\n        const encBuf = AESWrapper.words2Buf(enc);\n        return encBuf;\n    }\n    static decrypt(encBuf, keyBuf) {\n        const enc = AESWrapper.buf2Words(encBuf);\n        const key = AESWrapper.buf2Words(keyBuf);\n        const a = new AES(key);\n        const message = a.decrypt(enc);\n        const messageBuf = AESWrapper.words2Buf(message);\n        return messageBuf;\n    }\n    static buf2Words(buf) {\n        if (buf.length % 4 !== 0) {\n            throw new Error('buf length must be a multiple of 4');\n        }\n        const words = [];\n        for (let i = 0; i < buf.length / 4; i++) {\n            const val = buf[i * 4] * 0x1000000 + // Shift the first byte by 24 bits\n                ((buf[i * 4 + 1] << 16) | // Shift the second byte by 16 bits\n                    (buf[i * 4 + 2] << 8) | // Shift the third byte by 8 bits\n                    buf[i * 4 + 3]); // The fourth byte\n            words.push(val);\n        }\n        return words;\n    }\n    static words2Buf(words) {\n        const buf = new Array(words.length * 4);\n        for (let i = 0; i < words.length; i++) {\n            const word = words[i];\n            buf[i * 4] = (word >>> 24) & 0xff;\n            buf[i * 4 + 1] = (word >>> 16) & 0xff;\n            buf[i * 4 + 2] = (word >>> 8) & 0xff;\n            buf[i * 4 + 3] = word & 0xff;\n        }\n        return buf;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass CBC {\n    static buf2BlocksBuf(buf, blockSize) {\n        const bytesize = blockSize / 8;\n        const blockBufs = [];\n        for (let i = 0; i <= buf.length / bytesize; i++) {\n            let blockBuf = buf.slice(i * bytesize, i * bytesize + bytesize);\n            if (blockBuf.length < blockSize) {\n                blockBuf = CBC.pkcs7Pad(blockBuf, blockSize);\n            }\n            blockBufs.push(blockBuf);\n        }\n        return blockBufs;\n    }\n    static blockBufs2Buf(blockBufs) {\n        let last = blockBufs[blockBufs.length - 1];\n        last = CBC.pkcs7Unpad(last);\n        blockBufs[blockBufs.length - 1] = last;\n        const buf = blockBufs.flat();\n        return buf;\n    }\n    static encrypt(messageBuf, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const blockSize = ivBuf.length * 8;\n        const blockBufs = CBC.buf2BlocksBuf(messageBuf, blockSize);\n        const encBufs = CBC.encryptBlocks(blockBufs, ivBuf, blockCipher, cipherKeyBuf);\n        const encBuf = encBufs.flat();\n        return encBuf;\n    }\n    static decrypt(encBuf, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const bytesize = ivBuf.length;\n        const encBufs = [];\n        for (let i = 0; i < encBuf.length / bytesize; i++) {\n            encBufs.push(encBuf.slice(i * bytesize, i * bytesize + bytesize));\n        }\n        const blockBufs = CBC.decryptBlocks(encBufs, ivBuf, blockCipher, cipherKeyBuf);\n        const buf = CBC.blockBufs2Buf(blockBufs);\n        return buf;\n    }\n    static encryptBlock(blockBuf, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const xorbuf = CBC.xorBufs(blockBuf, ivBuf);\n        const encBuf = blockCipher.encrypt(xorbuf, cipherKeyBuf);\n        return encBuf;\n    }\n    static decryptBlock(encBuf, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const xorbuf = blockCipher.decrypt(encBuf, cipherKeyBuf);\n        const blockBuf = CBC.xorBufs(xorbuf, ivBuf);\n        return blockBuf;\n    }\n    static encryptBlocks(blockBufs, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const encBufs = [];\n        for (let i = 0; i < blockBufs.length; i++) {\n            const blockBuf = blockBufs[i];\n            const encBuf = CBC.encryptBlock(blockBuf, ivBuf, blockCipher, cipherKeyBuf);\n            encBufs.push(encBuf);\n            ivBuf = encBuf;\n        }\n        return encBufs;\n    }\n    static decryptBlocks(encBufs, ivBuf, blockCipher /* TODO: type */, cipherKeyBuf) {\n        const blockBufs = [];\n        for (let i = 0; i < encBufs.length; i++) {\n            const encBuf = encBufs[i];\n            const blockBuf = CBC.decryptBlock(encBuf, ivBuf, blockCipher, cipherKeyBuf);\n            blockBufs.push(blockBuf);\n            ivBuf = encBuf;\n        }\n        return blockBufs;\n    }\n    static pkcs7Pad(buf, blockSize) {\n        const bytesize = blockSize / 8;\n        const padbytesize = bytesize - buf.length;\n        const pad = new Array(padbytesize);\n        pad.fill(padbytesize);\n        const paddedbuf = [...buf, ...pad];\n        return paddedbuf;\n    }\n    static pkcs7Unpad(paddedbuf) {\n        const padlength = paddedbuf[paddedbuf.length - 1];\n        const padbuf = paddedbuf.slice(paddedbuf.length - padlength, paddedbuf.length);\n        const padbuf2 = new Array(padlength);\n        padbuf2.fill(padlength);\n        if (toHex(padbuf) !== toHex(padbuf2)) {\n            throw new Error('invalid padding');\n        }\n        return paddedbuf.slice(0, paddedbuf.length - padlength);\n    }\n    static xorBufs(buf1, buf2) {\n        if (buf1.length !== buf2.length) {\n            throw new Error('bufs must have the same length');\n        }\n        const buf = new Array(buf1.length);\n        for (let i = 0; i < buf1.length; i++) {\n            buf[i] = buf1[i] ^ buf2[i];\n        }\n        return buf;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass AESCBC {\n    static encrypt(messageBuf, cipherKeyBuf, ivBuf, concatIvBuf = true) {\n        ivBuf = ivBuf ?? Random(128 / 8);\n        const ctBuf = CBC.encrypt(messageBuf, ivBuf, AESWrapper, cipherKeyBuf);\n        if (concatIvBuf) {\n            return [...ivBuf, ...ctBuf];\n        }\n        else {\n            return [...ctBuf];\n        }\n    }\n    static decrypt(encBuf, cipherKeyBuf, ivBuf) {\n        if (ivBuf == null) {\n            ivBuf = encBuf.slice(0, 128 / 8);\n            const ctBuf = encBuf.slice(128 / 8);\n            return CBC.decrypt(ctBuf, ivBuf, AESWrapper, cipherKeyBuf);\n        }\n        else {\n            const ctBuf = encBuf;\n            return CBC.decrypt(ctBuf, ivBuf, AESWrapper, cipherKeyBuf);\n        }\n    }\n}\n/**\n * @class ECIES\n * Implements the Electrum ECIES protocol for encrypted communication.\n *\n * @prprecated This class is deprecated in favor of the BRC-78 standard for portable encrypted messages,\n * which provides a more comprehensive and secure solution by integrating with BRC-42 and BRC-43 standards.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport default class ECIES {\n    /**\n     * Generates the initialization vector (iv), encryption key (kE), and MAC key (kM)\n     * using the sender's private key and receiver's public key.\n     *\n     * @param {PrivateKey} privKey - The sender's private key.\n     * @param {PublicKey} pubKey - The receiver's public key.\n     * @returns {Object} An object containing the iv, kE, and kM as number arrays.\n     */\n    static ivkEkM(privKey, pubKey) {\n        const r = privKey;\n        const KB = pubKey;\n        const P = KB.mul(r);\n        const S = new PublicKey(P.x, P.y);\n        const Sbuf = S.encode(true);\n        const hash = Hash.sha512(Sbuf);\n        return {\n            iv: hash.slice(0, 16),\n            kE: hash.slice(16, 32),\n            kM: hash.slice(32, 64)\n        };\n    }\n    /**\n     * Encrypts a given message using the Electrum ECIES method.\n     *\n     * @param {number[]} messageBuf - The message to be encrypted, in number array format.\n     * @param {PublicKey} toPublicKey - The public key of the recipient.\n     * @param {PrivateKey} [fromPrivateKey] - The private key of the sender. If not provided, a random private key is used.\n     * @param {boolean} [noKey=false] - If true, does not include the sender's public key in the encrypted message.\n     * @returns {number[]} The encrypted message as a number array.\n     */\n    static electrumEncrypt(messageBuf, toPublicKey, fromPrivateKey, noKey = false) {\n        let Rbuf = null;\n        if (fromPrivateKey == null) {\n            fromPrivateKey = PrivateKey.fromRandom();\n        }\n        if (!noKey) {\n            Rbuf = fromPrivateKey.toPublicKey().encode(true);\n        }\n        const { iv, kE, kM } = ECIES.ivkEkM(fromPrivateKey, toPublicKey);\n        const ciphertext = AESCBC.encrypt(messageBuf, kE, iv, false);\n        const BIE1 = toArray('BIE1', 'utf8');\n        let encBuf;\n        if (Rbuf !== undefined && Rbuf !== null && Rbuf.length > 0) {\n            encBuf = [...BIE1, ...Rbuf, ...ciphertext];\n        }\n        else {\n            encBuf = [...BIE1, ...ciphertext];\n        }\n        const hmac = Hash.sha256hmac(kM, encBuf);\n        return [...encBuf, ...hmac];\n    }\n    /**\n     * Decrypts a message encrypted using the Electrum ECIES method.\n     *\n     * @param {number[]} encBuf - The encrypted message buffer.\n     * @param {PrivateKey} toPrivateKey - The private key of the recipient.\n     * @param {PublicKey} [fromPublicKey=null] - The public key of the sender. If not provided, it is extracted from the message.\n     * @returns {number[]} The decrypted message as a number array.\n     */\n    static electrumDecrypt(encBuf, toPrivateKey, fromPublicKey) {\n        const tagLength = 32;\n        const magic = encBuf.slice(0, 4);\n        if (encode(magic, 'utf8') !== 'BIE1') {\n            throw new Error('Invalid Magic');\n        }\n        let offset = 4;\n        // Determine if the sender's public key is included in encBuf\n        let Rbuf = null;\n        if (encBuf.length - offset - tagLength >= 33) {\n            const firstByte = encBuf[offset];\n            if (firstByte === 0x02 || firstByte === 0x03) {\n                // Compressed public key\n                Rbuf = encBuf.slice(offset, offset + 33);\n                offset += 33;\n            }\n            else if (firstByte === 0x04) {\n                // Uncompressed public key\n                Rbuf = encBuf.slice(offset, offset + 65);\n                offset += 65;\n            }\n        }\n        if (Rbuf !== null) {\n            if (fromPublicKey == null) {\n                fromPublicKey = PublicKey.fromString(toHex(Rbuf));\n            }\n        }\n        else {\n            if (fromPublicKey == null) {\n                throw new Error('Sender public key is required');\n            }\n        }\n        const { iv, kE, kM } = ECIES.ivkEkM(toPrivateKey, fromPublicKey);\n        const ciphertext = encBuf.slice(offset, encBuf.length - tagLength);\n        const hmac = encBuf.slice(encBuf.length - tagLength, encBuf.length);\n        const hmac2 = Hash.sha256hmac(kM, encBuf.slice(0, encBuf.length - tagLength));\n        if (toHex(hmac) !== toHex(hmac2)) {\n            throw new Error('Invalid checksum');\n        }\n        return AESCBC.decrypt(ciphertext, kE, iv);\n    }\n    /**\n     * Encrypts a given message using the Bitcore variant of ECIES.\n     *\n     * @param {number[]} messageBuf - The message to be encrypted, in number array format.\n     * @param {PublicKey} toPublicKey - The public key of the recipient.\n     * @param {PrivateKey} [fromPrivateKey] - The private key of the sender. If not provided, a random private key is used.\n     * @param {number[]} [ivBuf] - The initialization vector for encryption. If not provided, a random IV is used.\n     * @returns {number[]} The encrypted message as a number array.\n     */\n    static bitcoreEncrypt(messageBuf, toPublicKey, fromPrivateKey, ivBuf) {\n        if (fromPrivateKey == null) {\n            fromPrivateKey = PrivateKey.fromRandom();\n        }\n        if (ivBuf == null) {\n            ivBuf = Random(16);\n        }\n        const r = fromPrivateKey;\n        const RPublicKey = fromPrivateKey.toPublicKey();\n        const RBuf = RPublicKey.encode(true);\n        const KB = toPublicKey;\n        const P = KB.mul(r);\n        const S = P.getX();\n        const Sbuf = S.toArray('be', 32);\n        const kEkM = Hash.sha512(Sbuf);\n        const kE = kEkM.slice(0, 32);\n        const kM = kEkM.slice(32, 64);\n        const c = AESCBC.encrypt(messageBuf, kE, ivBuf);\n        const d = Hash.sha256hmac(kM, [...c]);\n        const encBuf = [...RBuf, ...c, ...d];\n        return encBuf;\n    }\n    /**\n     * Decrypts a message encrypted using the Bitcore variant of ECIES.\n     *\n     * @param {number[]} encBuf - The encrypted message buffer.\n     * @param {PrivateKey} toPrivateKey - The private key of the recipient.\n     * @returns {number[]} The decrypted message as a number array.\n     */\n    static bitcoreDecrypt(encBuf, toPrivateKey) {\n        const kB = toPrivateKey;\n        const fromPublicKey = PublicKey.fromString(toHex(encBuf.slice(0, 33)));\n        const R = fromPublicKey;\n        const P = R.mul(kB);\n        if (P.eq(new Point(0, 0))) {\n            throw new Error('P equals 0');\n        }\n        const S = P.getX();\n        const Sbuf = S.toArray('be', 32);\n        const kEkM = Hash.sha512(Sbuf);\n        const kE = kEkM.slice(0, 32);\n        const kM = kEkM.slice(32, 64);\n        const c = encBuf.slice(33, encBuf.length - 32);\n        const d = encBuf.slice(encBuf.length - 32, encBuf.length);\n        const d2 = Hash.sha256hmac(kM, c);\n        if (toHex(d) !== toHex(d2)) {\n            throw new Error('Invalid checksum');\n        }\n        const messageBuf = AESCBC.decrypt(c, kE);\n        return [...messageBuf];\n    }\n}\n//# sourceMappingURL=ECIES.js.map","import Transaction from '../transaction/Transaction.js';\nimport LockingScript from '../script/LockingScript.js';\n/**\n * @method fromUtxo\n *\n * @description\n * This function creates a transaction input from a utxo json object\n * The idea being old code that uses utxos rather than sourceTranactions can convert using this.\n *\n * @deprecated\n * This approach is made available for compatibility only. It is deprecated in favor of using sourceTransactions\n * directly. It's recommended that wallets general keep transactions which store unspent outputs in their entirety,\n * along with corresonding Merkle paths. The reason you would keep the whole transaction is such that you can prove\n * the txid, and therefore its inclusion within a specific block.\n *\n * @example\n * const i = fromUtxo({\n *   txid: '434555433eaca96dff6e71a4d02febd0dd3832e5ca4e5734623ca914522e17d5',\n *   vout: 0,\n *   script: '51',\n *   satoshis: 1234\n * }, new P2PKH().unlock(p))\n *\n * tx.addInput(i)\n *\n * @param utxo: jsonUtxo\n * @param unlockingScriptTemplate: { sign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>, estimateLength: (tx: Transaction, inputIndex: number) => Promise<number> }\n * @returns\n */\nexport default function fromUtxo(utxo, unlockingScriptTemplate) {\n    const sourceTransaction = new Transaction(0, [], [], 0);\n    sourceTransaction.outputs = Array(utxo.vout + 1).fill(null);\n    sourceTransaction.outputs[utxo.vout] = {\n        satoshis: utxo.satoshis,\n        lockingScript: LockingScript.fromHex(utxo.script)\n    };\n    return {\n        sourceTransaction,\n        sourceTXID: utxo.txid,\n        sourceOutputIndex: utxo.vout,\n        unlockingScriptTemplate,\n        sequence: 0xffffffff\n    };\n}\n//# sourceMappingURL=Utxo.js.map","import { SHA1HMAC, SHA256HMAC, SHA512HMAC } from '../primitives/Hash.js';\nimport BigNumber from '../primitives/BigNumber.js';\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TOTP {\n    /**\n     * Generates a Time-based One-Time Password (TOTP).\n     * @param {number[]} secret - The secret key for TOTP.\n     * @param {TOTPOptions} options - Optional parameters for TOTP.\n     * @returns {string} The generated TOTP.\n     */\n    static generate(secret, options) {\n        const _options = this.withDefaultOptions(options);\n        const counter = this.getCounter(_options.timestamp, _options.period);\n        const otp = generateHOTP(secret, counter, _options);\n        return otp;\n    }\n    /**\n     * Validates a Time-based One-Time Password (TOTP).\n     * @param {number[]} secret - The secret key for TOTP.\n     * @param {string} passcode - The passcode to validate.\n     * @param {TOTPValidateOptions} options - Optional parameters for TOTP validation.\n     * @returns {boolean} A boolean indicating whether the passcode is valid.\n     */\n    static validate(secret, passcode, options) {\n        const _options = this.withDefaultValidateOptions(options);\n        passcode = passcode.trim();\n        if (passcode.length !== _options.digits) {\n            return false;\n        }\n        const counter = this.getCounter(_options.timestamp, _options.period);\n        const counters = [counter];\n        for (let i = 1; i <= _options.skew; i++) {\n            counters.push(counter + i);\n            counters.push(counter - i);\n        }\n        for (const c of counters) {\n            if (passcode === generateHOTP(secret, c, _options)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static getCounter(timestamp, period) {\n        const epochSeconds = Math.floor(timestamp / 1000);\n        const counter = Math.floor(epochSeconds / period);\n        return counter;\n    }\n    static withDefaultOptions(options) {\n        return {\n            digits: 2,\n            algorithm: 'SHA-1',\n            period: 30,\n            timestamp: Date.now(),\n            ...options\n        };\n    }\n    static withDefaultValidateOptions(options) {\n        return { skew: 1, ...this.withDefaultOptions(options) };\n    }\n}\nfunction generateHOTP(secret, counter, options) {\n    const timePad = new BigNumber(counter).toArray('be', 8);\n    const hmac = calcHMAC(secret, timePad, options.algorithm);\n    const signature = hmac.digest();\n    // RFC 4226 https://datatracker.ietf.org/doc/html/rfc4226#section-5.4\n    const offset = signature[signature.length - 1] & 0x0f; // offset is the last byte in the hmac\n    const fourBytesRange = signature.slice(offset, offset + 4); // starting from offset, get 4 bytes\n    const mask = 0x7fffffff; // 32-bit number with a leading 0 followed by 31 ones [0111 (...) 1111]\n    const masked = new BigNumber(fourBytesRange).toNumber() & mask;\n    const otp = masked.toString().slice(-options.digits);\n    return otp;\n}\nfunction calcHMAC(secret, timePad, algorithm) {\n    switch (algorithm) {\n        case 'SHA-1':\n            return new SHA1HMAC(secret).update(timePad);\n        case 'SHA-256':\n            return new SHA256HMAC(secret).update(timePad);\n        case 'SHA-512':\n            return new SHA512HMAC(secret).update(timePad);\n        default:\n            throw new Error('unsupported HMAC algorithm');\n    }\n}\n//# sourceMappingURL=totp.js.map","import { PrivateKey, PublicKey, SymmetricKey, Hash, Utils } from '../primitives/index.js';\n/**\n * Class responsible for deriving various types of keys using a root private key.\n * It supports deriving public and private keys, symmetric keys, and revealing key linkages.\n */\nexport class KeyDeriver {\n    cacheSharedSecret;\n    retrieveCachedSharedSecret;\n    rootKey;\n    identityKey;\n    anyone;\n    /**\n     * Initializes the KeyDeriver instance with a root private key.\n     * @param {PrivateKey | 'anyone'} rootKey - The root private key or the string 'anyone'.\n     */\n    constructor(rootKey, cacheSharedSecret, retrieveCachedSharedSecret) {\n        this.cacheSharedSecret = cacheSharedSecret;\n        this.retrieveCachedSharedSecret = retrieveCachedSharedSecret;\n        this.anyone = new PrivateKey(1).toPublicKey();\n        if (rootKey === 'anyone') {\n            this.rootKey = new PrivateKey(1);\n        }\n        else {\n            this.rootKey = rootKey;\n        }\n        this.identityKey = this.rootKey.toPublicKey().toString();\n    }\n    /**\n     * Derives a public key based on protocol ID, key ID, and counterparty.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @param {boolean} [forSelf=false] - Whether deriving for self.\n     * @returns {PublicKey} - The derived public key.\n     */\n    derivePublicKey(protocolID, keyID, counterparty, forSelf = false) {\n        counterparty = this.normalizeCounterparty(counterparty);\n        if (forSelf) {\n            return this.rootKey\n                .deriveChild(counterparty, this.computeInvoiceNumber(protocolID, keyID), this.cacheSharedSecret, this.retrieveCachedSharedSecret)\n                .toPublicKey();\n        }\n        else {\n            return counterparty.deriveChild(this.rootKey, this.computeInvoiceNumber(protocolID, keyID), this.cacheSharedSecret, this.retrieveCachedSharedSecret);\n        }\n    }\n    /**\n     * Derives a private key based on protocol ID, key ID, and counterparty.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {PrivateKey} - The derived private key.\n     */\n    derivePrivateKey(protocolID, keyID, counterparty) {\n        counterparty = this.normalizeCounterparty(counterparty);\n        return this.rootKey.deriveChild(counterparty, this.computeInvoiceNumber(protocolID, keyID), this.cacheSharedSecret, this.retrieveCachedSharedSecret);\n    }\n    /**\n     * Derives a symmetric key based on protocol ID, key ID, and counterparty.\n     * Note: Symmetric keys should not be derivable by everyone due to security risks.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {SymmetricKey} - The derived symmetric key.\n     */\n    deriveSymmetricKey(protocolID, keyID, counterparty) {\n        // If counterparty is 'anyone', we use 1*G as the public key.\n        // This is a publicly derivable key and should only be used in scenarios where public disclosure is intended.\n        if (counterparty === 'anyone') {\n            counterparty = this.anyone;\n        }\n        else {\n            counterparty = this.normalizeCounterparty(counterparty);\n        }\n        const derivedPublicKey = this.derivePublicKey(protocolID, keyID, counterparty);\n        const derivedPrivateKey = this.derivePrivateKey(protocolID, keyID, counterparty);\n        return new SymmetricKey(derivedPrivateKey.deriveSharedSecret(derivedPublicKey)?.x?.toArray() ?? []);\n    }\n    /**\n     * Reveals the shared secret between the root key and the counterparty.\n     * Note: This should not be used for 'self'.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {number[]} - The shared secret as a number array.\n     * @throws {Error} - Throws an error if attempting to reveal a shared secret for 'self'.\n     */\n    revealCounterpartySecret(counterparty) {\n        if (counterparty === 'self') {\n            throw new Error('Counterparty secrets cannot be revealed for counterparty=self.');\n        }\n        counterparty = this.normalizeCounterparty(counterparty);\n        // Double-check to ensure not revealing the secret for 'self'\n        const self = this.rootKey.toPublicKey();\n        const keyDerivedBySelf = this.rootKey.deriveChild(self, 'test').toHex();\n        const keyDerivedByCounterparty = this.rootKey\n            .deriveChild(counterparty, 'test')\n            .toHex();\n        if (keyDerivedBySelf === keyDerivedByCounterparty) {\n            throw new Error('Counterparty secrets cannot be revealed for counterparty=self.');\n        }\n        return this.rootKey\n            .deriveSharedSecret(counterparty)\n            .encode(true);\n    }\n    /**\n     * Reveals the specific key association for a given protocol ID, key ID, and counterparty.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @returns {number[]} - The specific key association as a number array.\n     */\n    revealSpecificSecret(counterparty, protocolID, keyID) {\n        counterparty = this.normalizeCounterparty(counterparty);\n        const sharedSecret = this.rootKey.deriveSharedSecret(counterparty);\n        const invoiceNumberBin = Utils.toArray(this.computeInvoiceNumber(protocolID, keyID), 'utf8');\n        return Hash.sha256hmac(sharedSecret.encode(true), invoiceNumberBin);\n    }\n    /**\n     * Normalizes the counterparty to a public key.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {PublicKey} - The normalized counterparty public key.\n     * @throws {Error} - Throws an error if the counterparty is invalid.\n     */\n    normalizeCounterparty(counterparty) {\n        if (counterparty === null || counterparty === undefined) {\n            throw new Error('counterparty must be self, anyone or a public key!');\n        }\n        else if (counterparty === 'self') {\n            return this.rootKey.toPublicKey();\n        }\n        else if (counterparty === 'anyone') {\n            return new PrivateKey(1).toPublicKey();\n        }\n        else if (typeof counterparty === 'string') {\n            return PublicKey.fromString(counterparty);\n        }\n        else {\n            return counterparty;\n        }\n    }\n    /**\n     * Computes the invoice number based on the protocol ID and key ID.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @returns {string} - The computed invoice number.\n     * @throws {Error} - Throws an error if protocol ID or key ID are invalid.\n     */\n    computeInvoiceNumber(protocolID, keyID) {\n        const securityLevel = protocolID[0];\n        if (!Number.isInteger(securityLevel) ||\n            securityLevel < 0 ||\n            securityLevel > 2) {\n            throw new Error('Protocol security level must be 0, 1, or 2');\n        }\n        const protocolName = protocolID[1].toLowerCase().trim();\n        if (keyID.length > 800) {\n            throw new Error('Key IDs must be 800 characters or less');\n        }\n        if (keyID.length < 1) {\n            throw new Error('Key IDs must be 1 character or more');\n        }\n        if (protocolName.length > 400) {\n            // Specific linkage revelation is the only protocol ID that can contain another protocol ID.\n            // Therefore, we allow it to be long enough to encapsulate the target protocol\n            if (protocolName.startsWith('specific linkage revelation ')) {\n                // The format is: 'specific linkage revelation x YYYYY'\n                // Where: x is the security level and YYYYY is the target protocol\n                // Thus, the max acceptable length is 30 + 400 = 430 bytes\n                if (protocolName.length > 430) {\n                    throw new Error('Specific linkage revelation protocol names must be 430 characters or less');\n                }\n            }\n            else {\n                throw new Error('Protocol names must be 400 characters or less');\n            }\n        }\n        if (protocolName.length < 5) {\n            throw new Error('Protocol names must be 5 characters or more');\n        }\n        if (protocolName.includes('  ')) {\n            throw new Error('Protocol names cannot contain multiple consecutive spaces (\"  \")');\n        }\n        if (!/^[a-z0-9 ]+$/g.test(protocolName)) {\n            throw new Error('Protocol names can only contain letters, numbers and spaces');\n        }\n        if (protocolName.endsWith(' protocol')) {\n            throw new Error('No need to end your protocol name with \" protocol\"');\n        }\n        return `${securityLevel}-${protocolName}-${keyID}`;\n    }\n}\nexport default KeyDeriver;\n//# sourceMappingURL=KeyDeriver.js.map","import { PrivateKey, PublicKey } from '../primitives/index.js';\nimport { KeyDeriver } from './KeyDeriver.js';\n/**\n * A cached version of KeyDeriver that caches the results of key derivation methods.\n * This is useful for optimizing performance when the same keys are derived multiple times.\n * It supports configurable cache size with sane defaults and maintains cache entries using LRU (Least Recently Used) eviction policy.\n */\nexport default class CachedKeyDeriver {\n    keyDeriver;\n    cache;\n    maxCacheSize;\n    /**\n     * The root key from which all other keys are derived.\n     */\n    rootKey;\n    /**\n     * The identity of this key deriver which is normally the public key associated with the `rootKey`\n     */\n    identityKey;\n    /**\n     * Initializes the CachedKeyDeriver instance with a root private key and optional cache settings.\n     * @param {PrivateKey | 'anyone'} rootKey - The root private key or the string 'anyone'.\n     * @param {Object} [options] - Optional settings for the cache.\n     * @param {number} [options.maxCacheSize=1000] - The maximum number of entries to store in the cache.\n     */\n    constructor(rootKey, options) {\n        if (rootKey === 'anyone') {\n            this.rootKey = new PrivateKey(1);\n        }\n        else {\n            this.rootKey = rootKey;\n        }\n        this.keyDeriver = new KeyDeriver(this.rootKey, (priv, pub, point) => {\n            this.cacheSet(`${priv.toString()}-${pub.toString()}`, point);\n        }, (priv, pub) => {\n            return this.cacheGet(`${priv.toString()}-${pub.toString()}`);\n        });\n        this.identityKey = this.rootKey.toPublicKey().toString();\n        this.cache = new Map();\n        const maxCacheSize = options?.maxCacheSize;\n        this.maxCacheSize = (maxCacheSize != null && !isNaN(maxCacheSize) && maxCacheSize > 0) ? maxCacheSize : 1000;\n    }\n    /**\n     * Derives a public key based on protocol ID, key ID, and counterparty.\n     * Caches the result for future calls with the same parameters.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @param {boolean} [forSelf=false] - Whether deriving for self.\n     * @returns {PublicKey} - The derived public key.\n     */\n    derivePublicKey(protocolID, keyID, counterparty, forSelf = false) {\n        const cacheKey = this.generateCacheKey('derivePublicKey', protocolID, keyID, counterparty, forSelf);\n        if (this.cache.has(cacheKey)) {\n            const cachedValue = this.cacheGet(cacheKey);\n            if (cachedValue === undefined) {\n                throw new Error('Cached value is undefined');\n            }\n            return cachedValue;\n        }\n        else {\n            const result = this.keyDeriver.derivePublicKey(protocolID, keyID, counterparty, forSelf);\n            this.cacheSet(cacheKey, result);\n            return result;\n        }\n    }\n    /**\n     * Derives a private key based on protocol ID, key ID, and counterparty.\n     * Caches the result for future calls with the same parameters.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {PrivateKey} - The derived private key.\n     */\n    derivePrivateKey(protocolID, keyID, counterparty) {\n        const cacheKey = this.generateCacheKey('derivePrivateKey', protocolID, keyID, counterparty);\n        if (this.cache.has(cacheKey)) {\n            const cachedValue = this.cacheGet(cacheKey);\n            if (cachedValue === undefined) {\n                throw new Error('Cached value is undefined');\n            }\n            return cachedValue;\n        }\n        else {\n            const result = this.keyDeriver.derivePrivateKey(protocolID, keyID, counterparty);\n            this.cacheSet(cacheKey, result);\n            return result;\n        }\n    }\n    /**\n     * Derives a symmetric key based on protocol ID, key ID, and counterparty.\n     * Caches the result for future calls with the same parameters.\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {SymmetricKey} - The derived symmetric key.\n     * @throws {Error} - Throws an error if attempting to derive a symmetric key for 'anyone'.\n     */\n    deriveSymmetricKey(protocolID, keyID, counterparty) {\n        const cacheKey = this.generateCacheKey('deriveSymmetricKey', protocolID, keyID, counterparty);\n        if (this.cache.has(cacheKey)) {\n            const cachedValue = this.cacheGet(cacheKey);\n            if (cachedValue === undefined) {\n                throw new Error('Cached value is undefined');\n            }\n            return cachedValue;\n        }\n        else {\n            const result = this.keyDeriver.deriveSymmetricKey(protocolID, keyID, counterparty);\n            this.cacheSet(cacheKey, result);\n            return result;\n        }\n    }\n    /**\n     * Reveals the shared secret between the root key and the counterparty.\n     * Caches the result for future calls with the same parameters.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @returns {number[]} - The shared secret as a number array.\n     * @throws {Error} - Throws an error if attempting to reveal a shared secret for 'self'.\n     */\n    revealCounterpartySecret(counterparty) {\n        const cacheKey = this.generateCacheKey('revealCounterpartySecret', counterparty);\n        if (this.cache.has(cacheKey)) {\n            const cachedValue = this.cacheGet(cacheKey);\n            if (cachedValue === undefined) {\n                throw new Error('Cached value is undefined');\n            }\n            return cachedValue;\n        }\n        else {\n            const result = this.keyDeriver.revealCounterpartySecret(counterparty);\n            this.cacheSet(cacheKey, result);\n            return result;\n        }\n    }\n    /**\n     * Reveals the specific key association for a given protocol ID, key ID, and counterparty.\n     * Caches the result for future calls with the same parameters.\n     * @param {Counterparty} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').\n     * @param {WalletProtocol} protocolID - The protocol ID including a security level and protocol name.\n     * @param {string} keyID - The key identifier.\n     * @returns {number[]} - The specific key association as a number array.\n     */\n    revealSpecificSecret(counterparty, protocolID, keyID) {\n        const cacheKey = this.generateCacheKey('revealSpecificSecret', counterparty, protocolID, keyID);\n        if (this.cache.has(cacheKey)) {\n            const cachedValue = this.cacheGet(cacheKey);\n            if (cachedValue === undefined) {\n                throw new Error('Cached value is undefined');\n            }\n            return cachedValue;\n        }\n        else {\n            const result = this.keyDeriver.revealSpecificSecret(counterparty, protocolID, keyID);\n            this.cacheSet(cacheKey, result);\n            return result;\n        }\n    }\n    /**\n     * Generates a unique cache key based on the method name and input parameters.\n     * @param {string} methodName - The name of the method.\n     * @param {...any} args - The arguments passed to the method.\n     * @returns {string} - The generated cache key.\n     */\n    generateCacheKey(methodName, ...args) {\n        const serializedArgs = args\n            .map((arg) => this.serializeArgument(arg))\n            .join('|');\n        return `${methodName}|${serializedArgs}`;\n    }\n    /**\n     * Serializes an argument to a string for use in a cache key.\n     * @param {any} arg - The argument to serialize.\n     * @returns {string} - The serialized argument.\n     */\n    serializeArgument(arg) {\n        if (arg instanceof PublicKey || arg instanceof PrivateKey) {\n            return arg.toString();\n        }\n        else if (Array.isArray(arg)) {\n            return arg.map((item) => this.serializeArgument(item)).join(',');\n        }\n        else if (typeof arg === 'object' && arg !== null) {\n            return JSON.stringify(arg);\n        }\n        else {\n            return String(arg);\n        }\n    }\n    /**\n     * Retrieves an item from the cache and updates its position to reflect recent use.\n     * @param {string} cacheKey - The key of the cached item.\n     * @returns {any} - The cached value.\n     */\n    cacheGet(cacheKey) {\n        const value = this.cache.get(cacheKey);\n        // Update the entry to reflect recent use\n        this.cache.delete(cacheKey);\n        if (value !== undefined) {\n            this.cache.set(cacheKey, value);\n        }\n        return value;\n    }\n    /**\n     * Adds an item to the cache and evicts the least recently used item if necessary.\n     * @param {string} cacheKey - The key of the item to cache.\n     * @param {any} value - The value to cache.\n     */\n    cacheSet(cacheKey, value) {\n        if (this.cache.size >= this.maxCacheSize) {\n            // Evict the least recently used item (first item in Map)\n            const firstKey = this.cache.keys().next().value;\n            this.cache.delete(firstKey);\n        }\n        this.cache.set(cacheKey, value);\n    }\n}\n//# sourceMappingURL=CachedKeyDeriver.js.map","import CachedKeyDeriver from './CachedKeyDeriver.js';\nimport { Hash, ECDSA, BigNumber, Signature, Schnorr, PublicKey, Point } from '../primitives/index.js';\n/**\n * A ProtoWallet is precursor to a full wallet, capable of performing all foundational cryptographic operations.\n * It can derive keys, create signatures, facilitate encryption and HMAC operations, and reveal key linkages.\n *\n * However, ProtoWallet does not create transactions, manage outputs, interact with the blockchain,\n * enable the management of identity certificates, or store any data. It is also not concerned with privileged keys.\n */\nexport class ProtoWallet {\n    keyDeriver;\n    constructor(rootKeyOrKeyDeriver) {\n        if (typeof rootKeyOrKeyDeriver.identityKey !== 'string') {\n            rootKeyOrKeyDeriver = new CachedKeyDeriver(rootKeyOrKeyDeriver);\n        }\n        this.keyDeriver = rootKeyOrKeyDeriver;\n    }\n    async getPublicKey(args) {\n        if (args.identityKey) {\n            if (this.keyDeriver == null) {\n                throw new Error('keyDeriver is undefined');\n            }\n            return { publicKey: this.keyDeriver.rootKey.toPublicKey().toString() };\n        }\n        else {\n            if (args.protocolID == null || args.keyID == null || args.keyID === '') {\n                throw new Error('protocolID and keyID are required if identityKey is false or undefined.');\n            }\n            const keyDeriver = this.keyDeriver ??\n                (() => {\n                    throw new Error('keyDeriver is undefined');\n                })();\n            return {\n                publicKey: keyDeriver\n                    .derivePublicKey(args.protocolID, args.keyID, args.counterparty ?? 'self', args.forSelf)\n                    .toString()\n            };\n        }\n    }\n    async revealCounterpartyKeyLinkage(args) {\n        const { publicKey: identityKey } = await this.getPublicKey({\n            identityKey: true\n        });\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const linkage = this.keyDeriver.revealCounterpartySecret(args.counterparty);\n        const linkageProof = new Schnorr().generateProof(this.keyDeriver.rootKey, this.keyDeriver.rootKey.toPublicKey(), PublicKey.fromString(args.counterparty), Point.fromDER(linkage));\n        const linkageProofBin = [\n            ...linkageProof.R.encode(true),\n            ...linkageProof.SPrime.encode(true),\n            ...linkageProof.z.toArray()\n        ];\n        const revelationTime = new Date().toISOString();\n        const { ciphertext: encryptedLinkage } = await this.encrypt({\n            plaintext: linkage,\n            protocolID: [2, 'counterparty linkage revelation'],\n            keyID: revelationTime,\n            counterparty: args.verifier\n        });\n        const { ciphertext: encryptedLinkageProof } = await this.encrypt({\n            plaintext: linkageProofBin,\n            protocolID: [2, 'counterparty linkage revelation'],\n            keyID: revelationTime,\n            counterparty: args.verifier\n        });\n        return {\n            prover: identityKey,\n            verifier: args.verifier,\n            counterparty: args.counterparty,\n            revelationTime,\n            encryptedLinkage,\n            encryptedLinkageProof\n        };\n    }\n    async revealSpecificKeyLinkage(args) {\n        const { publicKey: identityKey } = await this.getPublicKey({\n            identityKey: true\n        });\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const linkage = this.keyDeriver.revealSpecificSecret(args.counterparty, args.protocolID, args.keyID);\n        const { ciphertext: encryptedLinkage } = await this.encrypt({\n            plaintext: linkage,\n            protocolID: [\n                2,\n                `specific linkage revelation ${args.protocolID[0]} ${args.protocolID[1]}`\n            ],\n            keyID: args.keyID,\n            counterparty: args.verifier\n        });\n        const { ciphertext: encryptedLinkageProof } = await this.encrypt({\n            plaintext: [0],\n            protocolID: [\n                2,\n                `specific linkage revelation ${args.protocolID[0]} ${args.protocolID[1]}`\n            ],\n            keyID: args.keyID,\n            counterparty: args.verifier\n        });\n        return {\n            prover: identityKey,\n            verifier: args.verifier,\n            counterparty: args.counterparty,\n            protocolID: args.protocolID,\n            keyID: args.keyID,\n            encryptedLinkage,\n            encryptedLinkageProof,\n            proofType: 0\n        };\n    }\n    async encrypt(args) {\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const key = this.keyDeriver.deriveSymmetricKey(args.protocolID, args.keyID, args.counterparty ?? 'self');\n        return { ciphertext: key.encrypt(args.plaintext) };\n    }\n    async decrypt(args) {\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const key = this.keyDeriver.deriveSymmetricKey(args.protocolID, args.keyID, args.counterparty ?? 'self');\n        return { plaintext: key.decrypt(args.ciphertext) };\n    }\n    async createHmac(args) {\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const key = this.keyDeriver.deriveSymmetricKey(args.protocolID, args.keyID, args.counterparty ?? 'self');\n        return { hmac: Hash.sha256hmac(key.toArray(), args.data) };\n    }\n    async verifyHmac(args) {\n        if (this.keyDeriver == null) {\n            throw new Error('keyDeriver is undefined');\n        }\n        const key = this.keyDeriver.deriveSymmetricKey(args.protocolID, args.keyID, args.counterparty ?? 'self');\n        const valid = Hash.sha256hmac(key.toArray(), args.data).toString() ===\n            args.hmac.toString();\n        if (!valid) {\n            const e = new Error('HMAC is not valid');\n            e.code = 'ERR_INVALID_HMAC';\n            throw e;\n        }\n        return { valid };\n    }\n    async createSignature(args) {\n        if ((args.hashToDirectlySign == null) && (args.data == null)) {\n            throw new Error('args.data or args.hashToDirectlySign must be valid');\n        }\n        const hash = args.hashToDirectlySign ?? Hash.sha256(args.data ?? []);\n        const keyDeriver = this.keyDeriver ??\n            (() => {\n                throw new Error('keyDeriver is undefined');\n            })();\n        const key = keyDeriver.derivePrivateKey(args.protocolID, args.keyID, args.counterparty ?? 'anyone');\n        return {\n            signature: ECDSA.sign(new BigNumber(hash), key, true).toDER()\n        };\n    }\n    async verifySignature(args) {\n        if ((args.hashToDirectlyVerify == null) && (args.data == null)) {\n            throw new Error('args.data or args.hashToDirectlyVerify must be valid');\n        }\n        const hash = args.hashToDirectlyVerify ?? Hash.sha256(args.data ?? []);\n        const keyDeriver = this.keyDeriver ??\n            (() => {\n                throw new Error('keyDeriver is undefined');\n            })();\n        const key = keyDeriver.derivePublicKey(args.protocolID, args.keyID, args.counterparty ?? 'self', args.forSelf);\n        const valid = ECDSA.verify(new BigNumber(hash), Signature.fromDER(args.signature), key);\n        if (!valid) {\n            const e = new Error('Signature is not valid');\n            e.code = 'ERR_INVALID_SIGNATURE';\n            throw e;\n        }\n        return { valid };\n    }\n}\nexport default ProtoWallet;\n//# sourceMappingURL=ProtoWallet.js.map","/**\n * Facilitates wallet operations over the window.CWI interface.\n */\nexport default class WindowCWISubstrate {\n    CWI;\n    constructor() {\n        if (typeof window !== 'object') {\n            throw new Error('The window.CWI substrate requires a global window object.');\n        }\n        if (typeof window.CWI !== 'object') {\n            throw new Error('The window.CWI interface does not appear to be bound to the window object.');\n        }\n        this.CWI = window.CWI; // Binding CWI to prevent changes\n    }\n    async createAction(args, originator) {\n        return await this.CWI.createAction(args, originator);\n    }\n    async signAction(args, originator) {\n        return await this.CWI.signAction(args, originator);\n    }\n    async abortAction(args, originator) {\n        return await this.CWI.abortAction(args, originator);\n    }\n    async listActions(args, originator) {\n        return await this.CWI.listActions(args, originator);\n    }\n    async internalizeAction(args, originator) {\n        return await this.CWI.internalizeAction(args, originator);\n    }\n    async listOutputs(args, originator) {\n        return await this.CWI.listOutputs(args, originator);\n    }\n    async relinquishOutput(args, originator) {\n        return await this.CWI.relinquishOutput(args, originator);\n    }\n    async getPublicKey(args, originator) {\n        return await this.CWI.getPublicKey(args, originator);\n    }\n    async revealCounterpartyKeyLinkage(args, originator) {\n        return await this.CWI.revealCounterpartyKeyLinkage(args, originator);\n    }\n    async revealSpecificKeyLinkage(args, originator) {\n        return await this.CWI.revealSpecificKeyLinkage(args, originator);\n    }\n    async encrypt(args, originator) {\n        return await this.CWI.encrypt(args, originator);\n    }\n    async decrypt(args, originator) {\n        return await this.CWI.decrypt(args, originator);\n    }\n    async createHmac(args, originator) {\n        return await this.CWI.createHmac(args, originator);\n    }\n    async verifyHmac(args, originator) {\n        return await this.CWI.verifyHmac(args, originator);\n    }\n    async createSignature(args, originator) {\n        return await this.CWI.createSignature(args, originator);\n    }\n    async verifySignature(args, originator) {\n        return await this.CWI.verifySignature(args, originator);\n    }\n    async acquireCertificate(args, originator) {\n        return await this.CWI.acquireCertificate(args, originator);\n    }\n    async listCertificates(args, originator) {\n        return await this.CWI.listCertificates(args, originator);\n    }\n    async proveCertificate(args, originator) {\n        return await this.CWI.proveCertificate(args, originator);\n    }\n    async relinquishCertificate(args, originator) {\n        return await this.CWI.relinquishCertificate(args, originator);\n    }\n    async discoverByIdentityKey(args, originator) {\n        return await this.CWI.discoverByIdentityKey(args, originator);\n    }\n    async discoverByAttributes(args, originator) {\n        return await this.CWI.discoverByAttributes(args, originator);\n    }\n    async isAuthenticated(args, originator) {\n        return await this.CWI.isAuthenticated(args, originator);\n    }\n    async waitForAuthentication(args, originator) {\n        return await this.CWI.waitForAuthentication(args, originator);\n    }\n    async getHeight(args, originator) {\n        return await this.CWI.getHeight(args, originator);\n    }\n    async getHeaderForHeight(args, originator) {\n        return await this.CWI.getHeaderForHeight(args, originator);\n    }\n    async getNetwork(args, originator) {\n        return await this.CWI.getNetwork(args, originator);\n    }\n    async getVersion(args, originator) {\n        return await this.CWI.getVersion(args, originator);\n    }\n}\n//# sourceMappingURL=window.CWI.js.map","import Random from '../../primitives/Random.js';\nimport * as Utils from '../../primitives/utils.js';\nimport { WalletError } from '../WalletError.js';\n/**\n * Facilitates wallet operations over cross-document messaging.\n */\nexport default class XDMSubstrate {\n    domain;\n    constructor(domain = '*') {\n        if (typeof window !== 'object') {\n            throw new Error('The XDM substrate requires a global window object.');\n        }\n        if (typeof window.postMessage !== 'function') {\n            throw new Error('The window object does not seem to support postMessage calls.');\n        }\n        this.domain = domain;\n    }\n    async invoke(call, args) {\n        return await new Promise((resolve, reject) => {\n            const id = Utils.toBase64(Random(12));\n            const listener = (e) => {\n                if (e.data.type !== 'CWI' ||\n                    !e.isTrusted ||\n                    e.data.id !== id ||\n                    e.data.isInvocation === true) {\n                    return;\n                }\n                if (typeof window.removeEventListener === 'function') {\n                    window.removeEventListener('message', listener);\n                }\n                if (e.data.status === 'error') {\n                    const err = new WalletError(e.data.description, e.data.code);\n                    reject(err);\n                }\n                else {\n                    resolve(e.data.result);\n                }\n            };\n            window.addEventListener('message', listener);\n            window.parent.postMessage({\n                type: 'CWI',\n                isInvocation: true,\n                id,\n                call,\n                args\n            }, this.domain);\n        });\n    }\n    async createAction(args) {\n        return await this.invoke('createAction', args);\n    }\n    async signAction(args) {\n        return await this.invoke('signAction', args);\n    }\n    async abortAction(args) {\n        return await this.invoke('abortAction', args);\n    }\n    async listActions(args) {\n        return await this.invoke('listActions', args);\n    }\n    async internalizeAction(args) {\n        return await this.invoke('internalizeAction', args);\n    }\n    async listOutputs(args) {\n        return await this.invoke('listOutputs', args);\n    }\n    async relinquishOutput(args) {\n        return await this.invoke('relinquishOutput', args);\n    }\n    async getPublicKey(args) {\n        return await this.invoke('getPublicKey', args);\n    }\n    async revealCounterpartyKeyLinkage(args) {\n        return await this.invoke('revealCounterpartyKeyLinkage', args);\n    }\n    async revealSpecificKeyLinkage(args) {\n        return await this.invoke('revealSpecificKeyLinkage', args);\n    }\n    async encrypt(args) {\n        return await this.invoke('encrypt', args);\n    }\n    async decrypt(args) {\n        return await this.invoke('decrypt', args);\n    }\n    async createHmac(args) {\n        return await this.invoke('createHmac', args);\n    }\n    async verifyHmac(args) {\n        return await this.invoke('verifyHmac', args);\n    }\n    async createSignature(args) {\n        return await this.invoke('createSignature', args);\n    }\n    async verifySignature(args) {\n        return await this.invoke('verifySignature', args);\n    }\n    async acquireCertificate(args) {\n        return await this.invoke('acquireCertificate', args);\n    }\n    async listCertificates(args) {\n        return await this.invoke('listCertificates', args);\n    }\n    async proveCertificate(args) {\n        return await this.invoke('proveCertificate', args);\n    }\n    async relinquishCertificate(args) {\n        return await this.invoke('relinquishCertificate', args);\n    }\n    async discoverByIdentityKey(args) {\n        return await this.invoke('discoverByIdentityKey', args);\n    }\n    async discoverByAttributes(args) {\n        return await this.invoke('discoverByAttributes', args);\n    }\n    async isAuthenticated(args) {\n        return await this.invoke('isAuthenticated', args);\n    }\n    async waitForAuthentication(args) {\n        return await this.invoke('waitForAuthentication', args);\n    }\n    async getHeight(args) {\n        return await this.invoke('getHeight', args);\n    }\n    async getHeaderForHeight(args) {\n        return await this.invoke('getHeaderForHeight', args);\n    }\n    async getNetwork(args) {\n        return await this.invoke('getNetwork', args);\n    }\n    async getVersion(args) {\n        return await this.invoke('getVersion', args);\n    }\n}\n//# sourceMappingURL=XDM.js.map","import * as Utils from '../../primitives/utils.js';\nimport ProtoWallet from '../../wallet/ProtoWallet.js';\nimport Signature from '../../primitives/Signature.js';\n/**\n * Represents an Identity Certificate as per the Wallet interface specifications.\n *\n * This class provides methods to serialize and deserialize certificates, as well as signing and verifying the certificate's signature.\n */\nexport default class Certificate {\n    /**\n     * Type identifier for the certificate, base64 encoded string, 32 bytes.\n     */\n    type;\n    /**\n     * Unique serial number of the certificate, base64 encoded string, 32 bytes.\n     */\n    serialNumber;\n    /**\n     * The public key belonging to the certificate's subject, compressed public key hex string.\n     */\n    subject;\n    /**\n     * Public key of the certifier who issued the certificate, compressed public key hex string.\n     */\n    certifier;\n    /**\n     * The outpoint used to confirm that the certificate has not been revoked (TXID.OutputIndex), as a string.\n     */\n    revocationOutpoint;\n    /**\n     * All the fields present in the certificate, with field names as keys and encrypted field values as Base64 strings.\n     */\n    fields;\n    /**\n     * Certificate signature by the certifier's private key, DER encoded hex string.\n     */\n    signature;\n    /**\n     * Constructs a new Certificate.\n     *\n     * @param {Base64String} type - Type identifier for the certificate, base64 encoded string, 32 bytes.\n     * @param {Base64String} serialNumber - Unique serial number of the certificate, base64 encoded string, 32 bytes.\n     * @param {PubKeyHex} subject - The public key belonging to the certificate's subject, compressed public key hex string.\n     * @param {PubKeyHex} certifier - Public key of the certifier who issued the certificate, compressed public key hex string.\n     * @param {OutpointString} revocationOutpoint - The outpoint used to confirm that the certificate has not been revoked (TXID.OutputIndex), as a string.\n     * @param {Record<CertificateFieldNameUnder50Bytes, string>} fields - All the fields present in the certificate.\n     * @param {HexString} signature - Certificate signature by the certifier's private key, DER encoded hex string.\n     */\n    constructor(type, serialNumber, subject, certifier, revocationOutpoint, fields, signature) {\n        this.type = type;\n        this.serialNumber = serialNumber;\n        this.subject = subject;\n        this.certifier = certifier;\n        this.revocationOutpoint = revocationOutpoint;\n        this.fields = fields;\n        this.signature = signature;\n    }\n    /**\n     * Serializes the certificate into binary format, with or without a signature.\n     *\n     * @param {boolean} [includeSignature=true] - Whether to include the signature in the serialization.\n     * @returns {number[]} - The serialized certificate in binary format.\n     */\n    toBinary(includeSignature = true) {\n        const writer = new Utils.Writer();\n        // Write type (Base64String, 32 bytes)\n        const typeBytes = Utils.toArray(this.type, 'base64');\n        writer.write(typeBytes);\n        // Write serialNumber (Base64String, 32 bytes)\n        const serialNumberBytes = Utils.toArray(this.serialNumber, 'base64');\n        writer.write(serialNumberBytes);\n        // Write subject (33 bytes compressed PubKeyHex)\n        const subjectBytes = Utils.toArray(this.subject, 'hex');\n        writer.write(subjectBytes);\n        // Write certifier (33 bytes compressed PubKeyHex)\n        const certifierBytes = Utils.toArray(this.certifier, 'hex');\n        writer.write(certifierBytes);\n        // Write revocationOutpoint (TXID + OutputIndex)\n        const [txid, outputIndex] = this.revocationOutpoint.split('.');\n        const txidBytes = Utils.toArray(txid, 'hex');\n        writer.write(txidBytes);\n        writer.writeVarIntNum(Number(outputIndex));\n        // Write fields\n        // Sort field names lexicographically\n        const fieldNames = Object.keys(this.fields).sort();\n        writer.writeVarIntNum(fieldNames.length);\n        for (const fieldName of fieldNames) {\n            const fieldValue = this.fields[fieldName];\n            // Field name\n            const fieldNameBytes = Utils.toArray(fieldName, 'utf8');\n            writer.writeVarIntNum(fieldNameBytes.length);\n            writer.write(fieldNameBytes);\n            // Field value\n            const fieldValueBytes = Utils.toArray(fieldValue, 'utf8');\n            writer.writeVarIntNum(fieldValueBytes.length);\n            writer.write(fieldValueBytes);\n        }\n        // Write signature if included\n        if (includeSignature && (this.signature ?? '').length > 0) { // ✅ Explicitly handle nullish signature\n            const signatureBytes = Utils.toArray(this.signature, 'hex'); // ✅ Type assertion ensures it's a string\n            writer.write(signatureBytes);\n        }\n        return writer.toArray();\n    }\n    /**\n     * Deserializes a certificate from binary format.\n     *\n     * @param {number[]} bin - The binary data representing the certificate.\n     * @returns {Certificate} - The deserialized Certificate object.\n     */\n    static fromBinary(bin) {\n        const reader = new Utils.Reader(bin);\n        // Read type\n        const typeBytes = reader.read(32);\n        const type = Utils.toBase64(typeBytes);\n        // Read serialNumber\n        const serialNumberBytes = reader.read(32);\n        const serialNumber = Utils.toBase64(serialNumberBytes);\n        // Read subject (33 bytes)\n        const subjectBytes = reader.read(33);\n        const subject = Utils.toHex(subjectBytes);\n        // Read certifier (33 bytes)\n        const certifierBytes = reader.read(33);\n        const certifier = Utils.toHex(certifierBytes);\n        // Read revocationOutpoint\n        const txidBytes = reader.read(32);\n        const txid = Utils.toHex(txidBytes);\n        const outputIndex = reader.readVarIntNum();\n        const revocationOutpoint = `${txid}.${outputIndex}`;\n        // Read fields\n        const numFields = reader.readVarIntNum();\n        const fields = {};\n        for (let i = 0; i < numFields; i++) {\n            // Field name\n            const fieldNameLength = reader.readVarIntNum();\n            const fieldNameBytes = reader.read(fieldNameLength);\n            const fieldName = Utils.toUTF8(fieldNameBytes);\n            // Field value\n            const fieldValueLength = reader.readVarIntNum();\n            const fieldValueBytes = reader.read(fieldValueLength);\n            const fieldValue = Utils.toUTF8(fieldValueBytes);\n            fields[fieldName] = fieldValue;\n        }\n        // Read signature if present\n        let signature;\n        if (!reader.eof()) {\n            const signatureBytes = reader.read();\n            const sig = Signature.fromDER(signatureBytes);\n            signature = sig.toString('hex');\n        }\n        return new Certificate(type, serialNumber, subject, certifier, revocationOutpoint, fields, signature);\n    }\n    /**\n     * Verifies the certificate's signature.\n     *\n     * @returns {Promise<boolean>} - A promise that resolves to true if the signature is valid.\n     */\n    async verify() {\n        // A verifier can be any wallet capable of verifying signatures\n        const verifier = new ProtoWallet('anyone');\n        const verificationData = this.toBinary(false); // Exclude the signature from the verification data\n        const signatureHex = this.signature ?? ''; // Provide a fallback value (empty string)\n        const { valid } = await verifier.verifySignature({\n            signature: Utils.toArray(signatureHex, 'hex'),\n            data: verificationData,\n            protocolID: [2, 'certificate signature'],\n            keyID: `${this.type} ${this.serialNumber}`,\n            counterparty: this.certifier // The certifier is the one who signed the certificate\n        });\n        return valid;\n    }\n    /**\n   * Signs the certificate using the provided certifier wallet.\n   *\n   * @param {Wallet} certifierWallet - The wallet representing the certifier.\n   * @returns {Promise<void>}\n   */\n    async sign(certifierWallet) {\n        if (this.signature != null && this.signature.length > 0) { // ✅ Explicitly checking for null/undefined\n            throw new Error(`Certificate has already been signed! Signature present: ${this.signature}`);\n        }\n        // Ensure the certifier declared is the one actually signing\n        this.certifier = (await certifierWallet.getPublicKey({ identityKey: true })).publicKey;\n        const preimage = this.toBinary(false); // Exclude the signature when signing\n        const { signature } = await certifierWallet.createSignature({\n            data: preimage,\n            protocolID: [2, 'certificate signature'],\n            keyID: `${this.type} ${this.serialNumber}`\n        });\n        this.signature = Utils.toHex(signature);\n    }\n    /**\n     * Helper function which retrieves the protocol ID and key ID for certificate field encryption.\n     *\n     * For master certificate creation, no serial number is provided because entropy is required\n     * from both the client and the certifier. In this case, the `keyID` is simply the `fieldName`.\n     *\n     * For VerifiableCertificates verifier keyring creation, both the serial number and field name are available,\n     * so the `keyID` is formed by concatenating the `serialNumber` and `fieldName`.\n     *\n     * @param fieldName - The name of the field within the certificate to be encrypted.\n     * @param serialNumber - (Optional) The serial number of the certificate.\n     * @returns An object containing:\n     *   - `protocolID` (WalletProtocol): The protocol ID for certificate field encryption.\n     *   - `keyID` (string): A unique key identifier. It is the `fieldName` if `serialNumber` is undefined,\n     *     otherwise it is a combination of `serialNumber` and `fieldName`.\n     */\n    static getCertificateFieldEncryptionDetails(fieldName, serialNumber) {\n        return {\n            protocolID: [2, 'certificate field encryption'],\n            keyID: serialNumber ? `${serialNumber} ${fieldName}` : fieldName\n        };\n    }\n}\n//# sourceMappingURL=Certificate.js.map","import { SecurityLevels } from '../Wallet.interfaces.js';\nimport Certificate from '../../auth/certificates/Certificate.js';\nimport * as Utils from '../../primitives/utils.js';\nimport calls from './WalletWireCalls.js';\nimport { WalletError } from '../WalletError.js';\n/**\n * A way to make remote calls to a wallet over a wallet wire.\n */\nexport default class WalletWireTransceiver {\n    wire;\n    constructor(wire) {\n        this.wire = wire;\n    }\n    async transmit(call, originator = '', params = []) {\n        const frameWriter = new Utils.Writer();\n        frameWriter.writeUInt8(calls[call]);\n        const originatorArray = Utils.toArray(originator, 'utf8');\n        frameWriter.writeUInt8(originatorArray.length);\n        frameWriter.write(originatorArray);\n        if (params.length > 0) {\n            frameWriter.write(params);\n        }\n        const frame = frameWriter.toArray();\n        const result = await this.wire.transmitToWallet(frame);\n        const resultReader = new Utils.Reader(result);\n        const errorByte = resultReader.readUInt8();\n        if (errorByte === 0) {\n            const resultFrame = resultReader.read();\n            return resultFrame;\n        }\n        else {\n            // Deserialize the error message length\n            const errorMessageLength = resultReader.readVarIntNum();\n            const errorMessageBytes = resultReader.read(errorMessageLength);\n            const errorMessage = Utils.toUTF8(errorMessageBytes);\n            // Deserialize the stack trace length\n            const stackTraceLength = resultReader.readVarIntNum();\n            const stackTraceBytes = resultReader.read(stackTraceLength);\n            const stackTrace = Utils.toUTF8(stackTraceBytes);\n            // Construct a custom wallet error\n            const e = new WalletError(errorMessage, errorByte, stackTrace);\n            throw e;\n        }\n    }\n    async createAction(args, originator) {\n        const paramWriter = new Utils.Writer();\n        // Serialize description\n        const descriptionBytes = Utils.toArray(args.description, 'utf8');\n        paramWriter.writeVarIntNum(descriptionBytes.length);\n        paramWriter.write(descriptionBytes);\n        // input BEEF\n        if (args.inputBEEF != null) {\n            paramWriter.writeVarIntNum(args.inputBEEF.length);\n            paramWriter.write(args.inputBEEF);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize inputs\n        if (args.inputs != null) {\n            paramWriter.writeVarIntNum(args.inputs.length);\n            for (const input of args.inputs) {\n                // outpoint\n                paramWriter.write(this.encodeOutpoint(input.outpoint));\n                // unlockingScript / unlockingScriptLength\n                if (input.unlockingScript != null && input.unlockingScript !== '') {\n                    const unlockingScriptBytes = Utils.toArray(input.unlockingScript, 'hex');\n                    paramWriter.writeVarIntNum(unlockingScriptBytes.length);\n                    paramWriter.write(unlockingScriptBytes);\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                    paramWriter.writeVarIntNum(input.unlockingScriptLength ?? 0);\n                }\n                // inputDescription\n                const inputDescriptionBytes = Utils.toArray(input.inputDescription, 'utf8');\n                paramWriter.writeVarIntNum(inputDescriptionBytes.length);\n                paramWriter.write(inputDescriptionBytes);\n                // sequenceNumber\n                if (typeof input.sequenceNumber === 'number') {\n                    paramWriter.writeVarIntNum(input.sequenceNumber);\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                }\n            }\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize outputs\n        if (args.outputs != null) {\n            paramWriter.writeVarIntNum(args.outputs.length);\n            for (const output of args.outputs) {\n                // lockingScript\n                const lockingScriptBytes = Utils.toArray(output.lockingScript, 'hex');\n                paramWriter.writeVarIntNum(lockingScriptBytes.length);\n                paramWriter.write(lockingScriptBytes);\n                // satoshis\n                paramWriter.writeVarIntNum(output.satoshis);\n                // outputDescription\n                const outputDescriptionBytes = Utils.toArray(output.outputDescription, 'utf8');\n                paramWriter.writeVarIntNum(outputDescriptionBytes.length);\n                paramWriter.write(outputDescriptionBytes);\n                // basket\n                if (output.basket != null && output.basket !== '') {\n                    const basketBytes = Utils.toArray(output.basket, 'utf8');\n                    paramWriter.writeVarIntNum(basketBytes.length);\n                    paramWriter.write(basketBytes);\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                }\n                // customInstructions\n                if (output.customInstructions != null && output.customInstructions !== '') {\n                    const customInstructionsBytes = Utils.toArray(output.customInstructions, 'utf8');\n                    paramWriter.writeVarIntNum(customInstructionsBytes.length);\n                    paramWriter.write(customInstructionsBytes);\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                }\n                // tags\n                if (output.tags != null) {\n                    paramWriter.writeVarIntNum(output.tags.length);\n                    for (const tag of output.tags) {\n                        const tagBytes = Utils.toArray(tag, 'utf8');\n                        paramWriter.writeVarIntNum(tagBytes.length);\n                        paramWriter.write(tagBytes);\n                    }\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                }\n            }\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize lockTime\n        if (typeof args.lockTime === 'number') {\n            paramWriter.writeVarIntNum(args.lockTime);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize version\n        if (typeof args.version === 'number') {\n            paramWriter.writeVarIntNum(args.version);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize labels\n        if (args.labels != null) {\n            paramWriter.writeVarIntNum(args.labels.length);\n            for (const label of args.labels) {\n                const labelBytes = Utils.toArray(label, 'utf8');\n                paramWriter.writeVarIntNum(labelBytes.length);\n                paramWriter.write(labelBytes);\n            }\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize options\n        if (args.options != null) {\n            paramWriter.writeInt8(1); // options present\n            // signAndProcess\n            if (typeof args.options.signAndProcess === 'boolean') {\n                paramWriter.writeInt8(args.options.signAndProcess ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // acceptDelayedBroadcast\n            if (typeof args.options.acceptDelayedBroadcast === 'boolean') {\n                paramWriter.writeInt8(args.options.acceptDelayedBroadcast ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // trustSelf\n            if (args.options.trustSelf === 'known') {\n                paramWriter.writeInt8(1);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // knownTxids\n            if (args.options.knownTxids != null) {\n                paramWriter.writeVarIntNum(args.options.knownTxids.length);\n                for (const txid of args.options.knownTxids) {\n                    const txidBytes = Utils.toArray(txid, 'hex');\n                    paramWriter.write(txidBytes);\n                }\n            }\n            else {\n                paramWriter.writeVarIntNum(-1);\n            }\n            // returnTXIDOnly\n            if (typeof args.options.returnTXIDOnly === 'boolean') {\n                paramWriter.writeInt8(args.options.returnTXIDOnly ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // noSend\n            if (typeof args.options.noSend === 'boolean') {\n                paramWriter.writeInt8(args.options.noSend ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // noSendChange\n            if (args.options.noSendChange != null) {\n                paramWriter.writeVarIntNum(args.options.noSendChange.length);\n                for (const outpoint of args.options.noSendChange) {\n                    paramWriter.write(this.encodeOutpoint(outpoint));\n                }\n            }\n            else {\n                paramWriter.writeVarIntNum(-1);\n            }\n            // sendWith\n            if (args.options.sendWith != null) {\n                paramWriter.writeVarIntNum(args.options.sendWith.length);\n                for (const txid of args.options.sendWith) {\n                    const txidBytes = Utils.toArray(txid, 'hex');\n                    paramWriter.write(txidBytes);\n                }\n            }\n            else {\n                paramWriter.writeVarIntNum(-1);\n            }\n            // randomizeOutputs\n            if (typeof args.options.randomizeOutputs === 'boolean') {\n                paramWriter.writeInt8(args.options.randomizeOutputs ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n        }\n        else {\n            paramWriter.writeInt8(0); // options not present\n        }\n        // Transmit and parse response\n        const result = await this.transmit('createAction', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const response = {};\n        // Parse txid\n        const txidFlag = resultReader.readInt8();\n        if (txidFlag === 1) {\n            const txidBytes = resultReader.read(32);\n            response.txid = Utils.toHex(txidBytes);\n        }\n        // Parse tx\n        const txFlag = resultReader.readInt8();\n        if (txFlag === 1) {\n            const txLength = resultReader.readVarIntNum();\n            response.tx = resultReader.read(txLength);\n        }\n        // Parse noSendChange\n        const noSendChangeLength = resultReader.readVarIntNum();\n        if (noSendChangeLength >= 0) {\n            response.noSendChange = [];\n            for (let i = 0; i < noSendChangeLength; i++) {\n                const outpoint = this.readOutpoint(resultReader);\n                response.noSendChange.push(outpoint);\n            }\n        }\n        // Parse sendWithResults\n        const sendWithResultsLength = resultReader.readVarIntNum();\n        if (sendWithResultsLength >= 0) {\n            response.sendWithResults = [];\n            for (let i = 0; i < sendWithResultsLength; i++) {\n                const txidBytes = resultReader.read(32);\n                const txid = Utils.toHex(txidBytes);\n                const statusCode = resultReader.readInt8();\n                let status = 'unproven';\n                if (statusCode === 1)\n                    status = 'unproven';\n                else if (statusCode === 2)\n                    status = 'sending';\n                else if (statusCode === 3)\n                    status = 'failed';\n                response.sendWithResults.push({ txid, status });\n            }\n        }\n        // Parse signableTransaction\n        const signableTransactionFlag = resultReader.readInt8();\n        if (signableTransactionFlag === 1) {\n            const txLength = resultReader.readVarIntNum();\n            const tx = resultReader.read(txLength);\n            const referenceLength = resultReader.readVarIntNum();\n            const referenceBytes = resultReader.read(referenceLength);\n            response.signableTransaction = {\n                tx,\n                reference: Utils.toBase64(referenceBytes)\n            };\n        }\n        return response;\n    }\n    async signAction(args, originator) {\n        const paramWriter = new Utils.Writer();\n        // Serialize spends\n        const spendIndexes = Object.keys(args.spends);\n        paramWriter.writeVarIntNum(spendIndexes.length);\n        for (const index of spendIndexes) {\n            paramWriter.writeVarIntNum(Number(index));\n            const spend = args.spends[Number(index)];\n            // unlockingScript\n            const unlockingScriptBytes = Utils.toArray(spend.unlockingScript, 'hex');\n            paramWriter.writeVarIntNum(unlockingScriptBytes.length);\n            paramWriter.write(unlockingScriptBytes);\n            // sequenceNumber\n            if (typeof spend.sequenceNumber === 'number') {\n                paramWriter.writeVarIntNum(spend.sequenceNumber);\n            }\n            else {\n                paramWriter.writeVarIntNum(-1);\n            }\n        }\n        // Serialize reference\n        const referenceBytes = Utils.toArray(args.reference, 'base64');\n        paramWriter.writeVarIntNum(referenceBytes.length);\n        paramWriter.write(referenceBytes);\n        // Serialize options\n        if (args.options != null) {\n            paramWriter.writeInt8(1); // options present\n            // acceptDelayedBroadcast\n            if (typeof args.options.acceptDelayedBroadcast === 'boolean') {\n                paramWriter.writeInt8(args.options.acceptDelayedBroadcast ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // returnTXIDOnly\n            if (typeof args.options.returnTXIDOnly === 'boolean') {\n                paramWriter.writeInt8(args.options.returnTXIDOnly ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // noSend\n            if (typeof args.options.noSend === 'boolean') {\n                paramWriter.writeInt8(args.options.noSend ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n            // sendWith\n            if (args.options.sendWith != null) {\n                paramWriter.writeVarIntNum(args.options.sendWith.length);\n                for (const txid of args.options.sendWith) {\n                    const txidBytes = Utils.toArray(txid, 'hex');\n                    paramWriter.write(txidBytes);\n                }\n            }\n            else {\n                paramWriter.writeVarIntNum(-1);\n            }\n        }\n        else {\n            paramWriter.writeInt8(0); // options not present\n        }\n        // Transmit and parse response\n        const result = await this.transmit('signAction', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const response = {};\n        // Parse txid\n        const txidFlag = resultReader.readInt8();\n        if (txidFlag === 1) {\n            const txidBytes = resultReader.read(32);\n            response.txid = Utils.toHex(txidBytes);\n        }\n        // Parse tx\n        const txFlag = resultReader.readInt8();\n        if (txFlag === 1) {\n            const txLength = resultReader.readVarIntNum();\n            response.tx = resultReader.read(txLength);\n        }\n        // Parse sendWithResults\n        const sendWithResultsLength = resultReader.readVarIntNum();\n        if (sendWithResultsLength >= 0) {\n            response.sendWithResults = [];\n            for (let i = 0; i < sendWithResultsLength; i++) {\n                const txidBytes = resultReader.read(32);\n                const txid = Utils.toHex(txidBytes);\n                const statusCode = resultReader.readInt8();\n                let status = 'unproven';\n                if (statusCode === 1)\n                    status = 'unproven';\n                else if (statusCode === 2)\n                    status = 'sending';\n                else if (statusCode === 3)\n                    status = 'failed';\n                response.sendWithResults.push({ txid, status });\n            }\n        }\n        return response;\n    }\n    async abortAction(args, originator) {\n        await this.transmit('abortAction', originator, Utils.toArray(args.reference, 'base64'));\n        return { aborted: true };\n    }\n    async listActions(args, originator) {\n        const paramWriter = new Utils.Writer();\n        // Serialize labels\n        paramWriter.writeVarIntNum(args.labels.length);\n        for (const label of args.labels) {\n            const labelBytes = Utils.toArray(label, 'utf8');\n            paramWriter.writeVarIntNum(labelBytes.length);\n            paramWriter.write(labelBytes);\n        }\n        // Serialize labelQueryMode\n        if (args.labelQueryMode === 'any') {\n            paramWriter.writeInt8(1);\n        }\n        else if (args.labelQueryMode === 'all') {\n            paramWriter.writeInt8(2);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        // Serialize include options\n        const includeOptions = [\n            args.includeLabels,\n            args.includeInputs,\n            args.includeInputSourceLockingScripts,\n            args.includeInputUnlockingScripts,\n            args.includeOutputs,\n            args.includeOutputLockingScripts\n        ];\n        for (const option of includeOptions) {\n            if (typeof option === 'boolean') {\n                paramWriter.writeInt8(option ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n        }\n        // Serialize limit and offset\n        if (typeof args.limit === 'number') {\n            paramWriter.writeVarIntNum(args.limit);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        if (typeof args.offset === 'number') {\n            paramWriter.writeVarIntNum(args.offset);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        // Transmit and parse response\n        const result = await this.transmit('listActions', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const totalActions = resultReader.readVarIntNum();\n        const actions = [];\n        for (let i = 0; i < totalActions; i++) {\n            // Parse action fields\n            const txidBytes = resultReader.read(32);\n            const txid = Utils.toHex(txidBytes);\n            const satoshis = resultReader.readVarIntNum();\n            const statusCode = resultReader.readInt8();\n            let status;\n            switch (statusCode) {\n                case 1:\n                    status = 'completed';\n                    break;\n                case 2:\n                    status = 'unprocessed';\n                    break;\n                case 3:\n                    status = 'sending';\n                    break;\n                case 4:\n                    status = 'unproven';\n                    break;\n                case 5:\n                    status = 'unsigned';\n                    break;\n                case 6:\n                    status = 'nosend';\n                    break;\n                case 7:\n                    status = 'nonfinal';\n                    break;\n                case 8:\n                    status = 'failed';\n                    break;\n                default:\n                    throw new Error(`Unknown status code: ${statusCode}`);\n            }\n            const isOutgoing = resultReader.readInt8() === 1;\n            const descriptionLength = resultReader.readVarIntNum();\n            const descriptionBytes = resultReader.read(descriptionLength);\n            const description = Utils.toUTF8(descriptionBytes);\n            const action = {\n                txid,\n                satoshis,\n                status,\n                isOutgoing,\n                description,\n                version: 0,\n                lockTime: 0\n            };\n            // Parse labels\n            const labelsLength = resultReader.readVarIntNum();\n            if (labelsLength >= 0) {\n                action.labels = [];\n                for (let j = 0; j < labelsLength; j++) {\n                    const labelLength = resultReader.readVarIntNum();\n                    const labelBytes = resultReader.read(labelLength);\n                    action.labels.push(Utils.toUTF8(labelBytes));\n                }\n            }\n            // Parse version and lockTime\n            action.version = resultReader.readVarIntNum();\n            action.lockTime = resultReader.readVarIntNum();\n            // Parse inputs\n            const inputsLength = resultReader.readVarIntNum();\n            if (inputsLength >= 0) {\n                action.inputs = [];\n                for (let k = 0; k < inputsLength; k++) {\n                    const sourceOutpoint = this.readOutpoint(resultReader);\n                    const sourceSatoshis = resultReader.readVarIntNum();\n                    // sourceLockingScript\n                    const sourceLockingScriptLength = resultReader.readVarIntNum();\n                    let sourceLockingScript;\n                    if (sourceLockingScriptLength >= 0) {\n                        const sourceLockingScriptBytes = resultReader.read(sourceLockingScriptLength);\n                        sourceLockingScript = Utils.toHex(sourceLockingScriptBytes);\n                    }\n                    // unlockingScript\n                    const unlockingScriptLength = resultReader.readVarIntNum();\n                    let unlockingScript;\n                    if (unlockingScriptLength >= 0) {\n                        const unlockingScriptBytes = resultReader.read(unlockingScriptLength);\n                        unlockingScript = Utils.toHex(unlockingScriptBytes);\n                    }\n                    // inputDescription\n                    const inputDescriptionLength = resultReader.readVarIntNum();\n                    const inputDescriptionBytes = resultReader.read(inputDescriptionLength);\n                    const inputDescription = Utils.toUTF8(inputDescriptionBytes);\n                    // sequenceNumber\n                    const sequenceNumber = resultReader.readVarIntNum();\n                    action.inputs.push({\n                        sourceOutpoint,\n                        sourceSatoshis,\n                        sourceLockingScript,\n                        unlockingScript,\n                        inputDescription,\n                        sequenceNumber\n                    });\n                }\n            }\n            // Parse outputs\n            const outputsLength = resultReader.readVarIntNum();\n            if (outputsLength >= 0) {\n                action.outputs = [];\n                for (let l = 0; l < outputsLength; l++) {\n                    const outputIndex = resultReader.readVarIntNum();\n                    const satoshis = resultReader.readVarIntNum();\n                    // lockingScript\n                    const lockingScriptLength = resultReader.readVarIntNum();\n                    let lockingScript;\n                    if (lockingScriptLength >= 0) {\n                        const lockingScriptBytes = resultReader.read(lockingScriptLength);\n                        lockingScript = Utils.toHex(lockingScriptBytes);\n                    }\n                    const spendable = resultReader.readInt8() === 1;\n                    // outputDescription\n                    const outputDescriptionLength = resultReader.readVarIntNum();\n                    const outputDescriptionBytes = resultReader.read(outputDescriptionLength);\n                    const outputDescription = Utils.toUTF8(outputDescriptionBytes);\n                    // basket\n                    const basketLength = resultReader.readVarIntNum();\n                    let basket;\n                    if (basketLength >= 0) {\n                        const basketBytes = resultReader.read(basketLength);\n                        basket = Utils.toUTF8(basketBytes);\n                    }\n                    // tags\n                    const tagsLength = resultReader.readVarIntNum();\n                    const tags = [];\n                    if (tagsLength >= 0) {\n                        for (let m = 0; m < tagsLength; m++) {\n                            const tagLength = resultReader.readVarIntNum();\n                            const tagBytes = resultReader.read(tagLength);\n                            tags.push(Utils.toUTF8(tagBytes));\n                        }\n                    }\n                    // customInstructions\n                    const customInstructionsLength = resultReader.readVarIntNum();\n                    let customInstructions;\n                    if (customInstructionsLength >= 0) {\n                        const customInstructionsBytes = resultReader.read(customInstructionsLength);\n                        customInstructions = Utils.toUTF8(customInstructionsBytes);\n                    }\n                    action.outputs.push({\n                        outputIndex,\n                        satoshis,\n                        lockingScript,\n                        spendable,\n                        outputDescription,\n                        basket,\n                        tags,\n                        customInstructions\n                    });\n                }\n            }\n            actions.push(action);\n        }\n        return {\n            totalActions,\n            actions\n        };\n    }\n    async internalizeAction(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.writeVarIntNum(args.tx.length);\n        paramWriter.write(args.tx);\n        paramWriter.writeVarIntNum(args.outputs.length);\n        for (const out of args.outputs) {\n            paramWriter.writeVarIntNum(out.outputIndex);\n            if (out.protocol === 'wallet payment') {\n                if (out.paymentRemittance == null) {\n                    throw new Error('Payment remittance is required for wallet payment');\n                }\n                paramWriter.writeUInt8(1);\n                paramWriter.write(Utils.toArray(out.paymentRemittance.senderIdentityKey, 'hex'));\n                const derivationPrefixAsArray = Utils.toArray(out.paymentRemittance.derivationPrefix, 'base64');\n                paramWriter.writeVarIntNum(derivationPrefixAsArray.length);\n                paramWriter.write(derivationPrefixAsArray);\n                const derivationSuffixAsArray = Utils.toArray(out.paymentRemittance.derivationSuffix, 'base64');\n                paramWriter.writeVarIntNum(derivationSuffixAsArray.length);\n                paramWriter.write(derivationSuffixAsArray);\n            }\n            else {\n                paramWriter.writeUInt8(2);\n                const basketAsArray = Utils.toArray(out.insertionRemittance?.basket, 'utf8');\n                paramWriter.writeVarIntNum(basketAsArray.length);\n                paramWriter.write(basketAsArray);\n                if (typeof out.insertionRemittance?.customInstructions === 'string' && out.insertionRemittance.customInstructions !== '') {\n                    const customInstructionsAsArray = Utils.toArray(out.insertionRemittance.customInstructions, 'utf8');\n                    paramWriter.writeVarIntNum(customInstructionsAsArray.length);\n                    paramWriter.write(customInstructionsAsArray);\n                }\n                else {\n                    paramWriter.writeVarIntNum(-1);\n                }\n                if (typeof out.insertionRemittance?.tags === 'object') {\n                    paramWriter.writeVarIntNum(out.insertionRemittance.tags.length);\n                    for (const tag of out.insertionRemittance.tags) {\n                        const tagAsArray = Utils.toArray(tag, 'utf8');\n                        paramWriter.writeVarIntNum(tagAsArray.length);\n                        paramWriter.write(tagAsArray);\n                    }\n                }\n                else {\n                    paramWriter.writeVarIntNum(0);\n                }\n            }\n        }\n        if (typeof args.labels === 'object') {\n            paramWriter.writeVarIntNum(args.labels.length);\n            for (const l of args.labels) {\n                const labelAsArray = Utils.toArray(l, 'utf8');\n                paramWriter.writeVarIntNum(labelAsArray.length);\n                paramWriter.write(labelAsArray);\n            }\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        const descriptionAsArray = Utils.toArray(args.description);\n        paramWriter.writeVarIntNum(descriptionAsArray.length);\n        paramWriter.write(descriptionAsArray);\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        await this.transmit('internalizeAction', originator, paramWriter.toArray());\n        return { accepted: true };\n    }\n    async listOutputs(args, originator) {\n        const paramWriter = new Utils.Writer();\n        const basketAsArray = Utils.toArray(args.basket, 'utf8');\n        paramWriter.writeVarIntNum(basketAsArray.length);\n        paramWriter.write(basketAsArray);\n        if (typeof args.tags === 'object') {\n            paramWriter.writeVarIntNum(args.tags.length);\n            for (const tag of args.tags) {\n                const tagAsArray = Utils.toArray(tag, 'utf8');\n                paramWriter.writeVarIntNum(tagAsArray.length);\n                paramWriter.write(tagAsArray);\n            }\n        }\n        else {\n            paramWriter.writeVarIntNum(0);\n        }\n        if (args.tagQueryMode === 'all') {\n            paramWriter.writeInt8(1);\n        }\n        else if (args.tagQueryMode === 'any') {\n            paramWriter.writeInt8(2);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (args.include === 'locking scripts') {\n            paramWriter.writeInt8(1);\n        }\n        else if (args.include === 'entire transactions') {\n            paramWriter.writeInt8(2);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (typeof args.includeCustomInstructions === 'boolean') {\n            paramWriter.writeInt8(args.includeCustomInstructions ? 1 : 0);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (typeof args.includeTags === 'boolean') {\n            paramWriter.writeInt8(args.includeTags ? 1 : 0);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (typeof args.includeLabels === 'boolean') {\n            paramWriter.writeInt8(args.includeLabels ? 1 : 0);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (typeof args.limit === 'number') {\n            paramWriter.writeVarIntNum(args.limit);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        if (typeof args.offset === 'number') {\n            paramWriter.writeVarIntNum(args.offset);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        const result = await this.transmit('listOutputs', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const totalOutputs = resultReader.readVarIntNum();\n        const beefLength = resultReader.readVarIntNum();\n        let BEEF;\n        if (beefLength >= 0) {\n            BEEF = resultReader.read(beefLength);\n        }\n        const outputs = [];\n        for (let i = 0; i < totalOutputs; i++) {\n            const outpoint = this.readOutpoint(resultReader);\n            const satoshis = resultReader.readVarIntNum();\n            const output = {\n                spendable: true,\n                outpoint,\n                satoshis\n            };\n            const scriptLength = resultReader.readVarIntNum();\n            if (scriptLength >= 0) {\n                output.lockingScript = Utils.toHex(resultReader.read(scriptLength));\n            }\n            const customInstructionsLength = resultReader.readVarIntNum();\n            if (customInstructionsLength >= 0) {\n                output.customInstructions = Utils.toUTF8(resultReader.read(customInstructionsLength));\n            }\n            const tagsLength = resultReader.readVarIntNum();\n            if (tagsLength !== -1) {\n                const tags = [];\n                for (let i = 0; i < tagsLength; i++) {\n                    const tagLength = resultReader.readVarIntNum();\n                    tags.push(Utils.toUTF8(resultReader.read(tagLength)));\n                }\n                output.tags = tags;\n            }\n            const labelsLength = resultReader.readVarIntNum();\n            if (labelsLength !== -1) {\n                const labels = [];\n                for (let i = 0; i < labelsLength; i++) {\n                    const labelLength = resultReader.readVarIntNum();\n                    labels.push(Utils.toUTF8(resultReader.read(labelLength)));\n                }\n                output.labels = labels;\n            }\n            outputs.push(output);\n        }\n        return {\n            totalOutputs,\n            BEEF,\n            outputs\n        };\n    }\n    async relinquishOutput(args, originator) {\n        const paramWriter = new Utils.Writer();\n        const basketAsArray = Utils.toArray(args.basket, 'utf8');\n        paramWriter.writeVarIntNum(basketAsArray.length);\n        paramWriter.write(basketAsArray);\n        paramWriter.write(this.encodeOutpoint(args.output));\n        await this.transmit('relinquishOutput', originator, paramWriter.toArray());\n        return { relinquished: true };\n    }\n    encodeOutpoint(outpoint) {\n        const writer = new Utils.Writer();\n        const [txid, index] = outpoint.split('.');\n        writer.write(Utils.toArray(txid, 'hex'));\n        writer.writeVarIntNum(Number(index));\n        return writer.toArray();\n    }\n    readOutpoint(reader) {\n        const txid = Utils.toHex(reader.read(32));\n        const index = reader.readVarIntNum();\n        return `${txid}.${index}`;\n    }\n    async getPublicKey(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.writeUInt8(args.identityKey ? 1 : 0);\n        if (!args.identityKey) {\n            paramWriter.write(this.encodeKeyRelatedParams(args.protocolID ??= [SecurityLevels.Silent, 'default'], args.keyID ??= '', args.counterparty, args.privileged, args.privilegedReason));\n            if (typeof args.forSelf === 'boolean') {\n                paramWriter.writeInt8(args.forSelf ? 1 : 0);\n            }\n            else {\n                paramWriter.writeInt8(-1);\n            }\n        }\n        else {\n            paramWriter.write(this.encodePrivilegedParams(args.privileged, args.privilegedReason));\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        const result = await this.transmit('getPublicKey', originator, paramWriter.toArray());\n        return {\n            publicKey: Utils.toHex(result)\n        };\n    }\n    async revealCounterpartyKeyLinkage(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodePrivilegedParams(args.privileged, args.privilegedReason));\n        paramWriter.write(Utils.toArray(args.counterparty, 'hex'));\n        paramWriter.write(Utils.toArray(args.verifier, 'hex'));\n        const result = await this.transmit('revealCounterpartyKeyLinkage', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const prover = Utils.toHex(resultReader.read(33));\n        const verifier = Utils.toHex(resultReader.read(33));\n        const counterparty = Utils.toHex(resultReader.read(33));\n        const revelationTimeLength = resultReader.readVarIntNum();\n        const revelationTime = Utils.toUTF8(resultReader.read(revelationTimeLength));\n        const encryptedLinkageLength = resultReader.readVarIntNum();\n        const encryptedLinkage = resultReader.read(encryptedLinkageLength);\n        const encryptedLinkageProofLength = resultReader.readVarIntNum();\n        const encryptedLinkageProof = resultReader.read(encryptedLinkageProofLength);\n        return {\n            prover,\n            verifier,\n            counterparty,\n            revelationTime,\n            encryptedLinkage,\n            encryptedLinkageProof\n        };\n    }\n    async revealSpecificKeyLinkage(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        paramWriter.write(Utils.toArray(args.verifier, 'hex'));\n        const result = await this.transmit('revealSpecificKeyLinkage', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const prover = Utils.toHex(resultReader.read(33));\n        const verifier = Utils.toHex(resultReader.read(33));\n        const counterparty = Utils.toHex(resultReader.read(33));\n        const securityLevel = resultReader.readUInt8();\n        const protocolLength = resultReader.readVarIntNum();\n        const protocol = Utils.toUTF8(resultReader.read(protocolLength));\n        const keyIDLength = resultReader.readVarIntNum();\n        const keyID = Utils.toUTF8(resultReader.read(keyIDLength));\n        const encryptedLinkageLength = resultReader.readVarIntNum();\n        const encryptedLinkage = resultReader.read(encryptedLinkageLength);\n        const encryptedLinkageProofLength = resultReader.readVarIntNum();\n        const encryptedLinkageProof = resultReader.read(encryptedLinkageProofLength);\n        const proofType = resultReader.readUInt8();\n        return {\n            prover,\n            verifier,\n            counterparty,\n            protocolID: [securityLevel, protocol],\n            keyID,\n            encryptedLinkage,\n            encryptedLinkageProof,\n            proofType\n        };\n    }\n    async encrypt(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        paramWriter.writeVarIntNum(args.plaintext.length);\n        paramWriter.write(args.plaintext);\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        return {\n            ciphertext: await this.transmit('encrypt', originator, paramWriter.toArray())\n        };\n    }\n    async decrypt(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        paramWriter.writeVarIntNum(args.ciphertext.length);\n        paramWriter.write(args.ciphertext);\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        return {\n            plaintext: await this.transmit('decrypt', originator, paramWriter.toArray())\n        };\n    }\n    async createHmac(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        paramWriter.writeVarIntNum(args.data.length);\n        paramWriter.write(args.data);\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        return {\n            hmac: await this.transmit('createHmac', originator, paramWriter.toArray())\n        };\n    }\n    async verifyHmac(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        paramWriter.write(args.hmac);\n        paramWriter.writeVarIntNum(args.data.length);\n        paramWriter.write(args.data);\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        await this.transmit('verifyHmac', originator, paramWriter.toArray());\n        return { valid: true };\n    }\n    async createSignature(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        if (typeof args.data === 'object') {\n            paramWriter.writeUInt8(1);\n            paramWriter.writeVarIntNum(args.data.length);\n            paramWriter.write(args.data);\n        }\n        else {\n            paramWriter.writeUInt8(2);\n            paramWriter.write(args.hashToDirectlySign ??= []);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        return {\n            signature: await this.transmit('createSignature', originator, paramWriter.toArray())\n        };\n    }\n    async verifySignature(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(this.encodeKeyRelatedParams(args.protocolID, args.keyID, args.counterparty, args.privileged, args.privilegedReason));\n        if (typeof args.forSelf === 'boolean') {\n            paramWriter.writeInt8(args.forSelf ? 1 : 0);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        paramWriter.writeVarIntNum(args.signature.length);\n        paramWriter.write(args.signature);\n        if (typeof args.data === 'object') {\n            paramWriter.writeUInt8(1);\n            paramWriter.writeVarIntNum(args.data.length);\n            paramWriter.write(args.data);\n        }\n        else {\n            paramWriter.writeUInt8(2);\n            paramWriter.write(args.hashToDirectlyVerify ?? []);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        await this.transmit('verifySignature', originator, paramWriter.toArray());\n        return { valid: true };\n    }\n    encodeKeyRelatedParams(protocolID, keyID, counterparty, privileged, privilegedReason) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.writeUInt8(protocolID[0]);\n        const protocolAsArray = Utils.toArray(protocolID[1], 'utf8');\n        paramWriter.writeVarIntNum(protocolAsArray.length);\n        paramWriter.write(protocolAsArray);\n        const keyIDAsArray = Utils.toArray(keyID, 'utf8');\n        paramWriter.writeVarIntNum(keyIDAsArray.length);\n        paramWriter.write(keyIDAsArray);\n        if (typeof counterparty !== 'string') {\n            paramWriter.writeUInt8(0);\n        }\n        else if (counterparty === 'self') {\n            paramWriter.writeUInt8(11);\n        }\n        else if (counterparty === 'anyone') {\n            paramWriter.writeUInt8(12);\n        }\n        else {\n            paramWriter.write(Utils.toArray(counterparty, 'hex'));\n        }\n        paramWriter.write(this.encodePrivilegedParams(privileged, privilegedReason));\n        return paramWriter.toArray();\n    }\n    async acquireCertificate(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(Utils.toArray(args.type, 'base64'));\n        paramWriter.write(Utils.toArray(args.certifier, 'hex'));\n        const fieldEntries = Object.entries(args.fields);\n        paramWriter.writeVarIntNum(fieldEntries.length);\n        for (const [key, value] of fieldEntries) {\n            const keyAsArray = Utils.toArray(key, 'utf8');\n            const valueAsArray = Utils.toArray(value, 'utf8');\n            paramWriter.writeVarIntNum(keyAsArray.length);\n            paramWriter.write(keyAsArray);\n            paramWriter.writeVarIntNum(valueAsArray.length);\n            paramWriter.write(valueAsArray);\n        }\n        paramWriter.write(this.encodePrivilegedParams(args.privileged, args.privilegedReason));\n        paramWriter.writeUInt8(args.acquisitionProtocol === 'direct' ? 1 : 2);\n        if (args.acquisitionProtocol === 'direct') {\n            paramWriter.write(Utils.toArray(args.serialNumber, 'base64'));\n            paramWriter.write(this.encodeOutpoint(args.revocationOutpoint ?? ''));\n            const signatureAsArray = Utils.toArray(args.signature, 'hex');\n            paramWriter.writeVarIntNum(signatureAsArray.length);\n            paramWriter.write(signatureAsArray);\n            const keyringRevealerAsArray = args.keyringRevealer !== 'certifier'\n                ? Utils.toArray(args.keyringRevealer, 'hex')\n                : [11];\n            paramWriter.write(keyringRevealerAsArray);\n            const keyringKeys = Object.keys(args.keyringForSubject ?? {});\n            paramWriter.writeVarIntNum(keyringKeys.length);\n            for (let i = 0; i < keyringKeys.length; i++) {\n                const keyringKeysAsArray = Utils.toArray(keyringKeys[i], 'utf8');\n                paramWriter.writeVarIntNum(keyringKeysAsArray.length);\n                paramWriter.write(keyringKeysAsArray);\n                const keyringForSubjectAsArray = Utils.toArray(args.keyringForSubject?.[keyringKeys[i]], 'base64');\n                paramWriter.writeVarIntNum(keyringForSubjectAsArray.length);\n                paramWriter.write(keyringForSubjectAsArray);\n            }\n        }\n        else {\n            const certifierUrlAsArray = Utils.toArray(args.certifierUrl, 'utf8');\n            paramWriter.writeVarIntNum(certifierUrlAsArray.length);\n            paramWriter.write(certifierUrlAsArray);\n        }\n        const result = await this.transmit('acquireCertificate', originator, paramWriter.toArray());\n        const cert = Certificate.fromBinary(result);\n        return {\n            ...cert,\n            signature: cert.signature\n        };\n    }\n    encodePrivilegedParams(privileged, privilegedReason) {\n        const paramWriter = new Utils.Writer();\n        if (typeof privileged === 'boolean') {\n            paramWriter.writeInt8(privileged ? 1 : 0);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        if (typeof privilegedReason === 'string') {\n            const privilegedReasonAsArray = Utils.toArray(privilegedReason, 'utf8');\n            paramWriter.writeInt8(privilegedReasonAsArray.length);\n            paramWriter.write(privilegedReasonAsArray);\n        }\n        else {\n            paramWriter.writeInt8(-1);\n        }\n        return paramWriter.toArray();\n    }\n    async listCertificates(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.writeVarIntNum(args.certifiers.length);\n        for (let i = 0; i < args.certifiers.length; i++) {\n            paramWriter.write(Utils.toArray(args.certifiers[i], 'hex'));\n        }\n        paramWriter.writeVarIntNum(args.types.length);\n        for (let i = 0; i < args.types.length; i++) {\n            paramWriter.write(Utils.toArray(args.types[i], 'base64'));\n        }\n        if (typeof args.limit === 'number') {\n            paramWriter.writeVarIntNum(args.limit);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        if (typeof args.offset === 'number') {\n            paramWriter.writeVarIntNum(args.offset);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        paramWriter.write(this.encodePrivilegedParams(args.privileged, args.privilegedReason));\n        const result = await this.transmit('listCertificates', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const totalCertificates = resultReader.readVarIntNum();\n        const certificates = [];\n        for (let i = 0; i < totalCertificates; i++) {\n            const certificateLength = resultReader.readVarIntNum();\n            const certificateBin = resultReader.read(certificateLength);\n            const cert = Certificate.fromBinary(certificateBin);\n            certificates.push({\n                ...cert,\n                signature: cert.signature\n            });\n        }\n        return {\n            totalCertificates,\n            certificates\n        };\n    }\n    async proveCertificate(args, originator) {\n        const paramWriter = new Utils.Writer();\n        const typeAsArray = Utils.toArray(args.certificate.type, 'base64');\n        paramWriter.write(typeAsArray);\n        const subjectAsArray = Utils.toArray(args.certificate.subject, 'hex');\n        paramWriter.write(subjectAsArray);\n        const serialNumberAsArray = Utils.toArray(args.certificate.serialNumber, 'base64');\n        paramWriter.write(serialNumberAsArray);\n        const certifierAsArray = Utils.toArray(args.certificate.certifier, 'hex');\n        paramWriter.write(certifierAsArray);\n        const revocationOutpointAsArray = this.encodeOutpoint(args.certificate.revocationOutpoint ?? '');\n        paramWriter.write(revocationOutpointAsArray);\n        const signatureAsArray = Utils.toArray(args.certificate.signature, 'hex');\n        paramWriter.writeVarIntNum(signatureAsArray.length);\n        paramWriter.write(signatureAsArray);\n        const fieldEntries = Object.entries(args.certificate.fields ?? {});\n        paramWriter.writeVarIntNum(fieldEntries.length);\n        for (const [key, value] of fieldEntries) {\n            const keyAsArray = Utils.toArray(key, 'utf8');\n            const valueAsArray = Utils.toArray(value, 'utf8');\n            paramWriter.writeVarIntNum(keyAsArray.length);\n            paramWriter.write(keyAsArray);\n            paramWriter.writeVarIntNum(valueAsArray.length);\n            paramWriter.write(valueAsArray);\n        }\n        paramWriter.writeVarIntNum(args.fieldsToReveal.length);\n        for (const field of args.fieldsToReveal) {\n            const fieldAsArray = Utils.toArray(field, 'utf8');\n            paramWriter.writeVarIntNum(fieldAsArray.length);\n            paramWriter.write(fieldAsArray);\n        }\n        paramWriter.write(Utils.toArray(args.verifier, 'hex'));\n        paramWriter.write(this.encodePrivilegedParams(args.privileged, args.privilegedReason));\n        const result = await this.transmit('proveCertificate', originator, paramWriter.toArray());\n        const resultReader = new Utils.Reader(result);\n        const numFields = resultReader.readVarIntNum();\n        const keyringForVerifier = {};\n        for (let i = 0; i < numFields; i++) {\n            const fieldKeyLength = resultReader.readVarIntNum();\n            const fieldKey = Utils.toUTF8(resultReader.read(fieldKeyLength));\n            const fieldValueLength = resultReader.readVarIntNum();\n            keyringForVerifier[fieldKey] = Utils.toBase64(resultReader.read(fieldValueLength));\n        }\n        return {\n            keyringForVerifier\n        };\n    }\n    async relinquishCertificate(args, originator) {\n        const paramWriter = new Utils.Writer();\n        const typeAsArray = Utils.toArray(args.type, 'base64');\n        paramWriter.write(typeAsArray);\n        const serialNumberAsArray = Utils.toArray(args.serialNumber, 'base64');\n        paramWriter.write(serialNumberAsArray);\n        const certifierAsArray = Utils.toArray(args.certifier, 'hex');\n        paramWriter.write(certifierAsArray);\n        await this.transmit('relinquishCertificate', originator, paramWriter.toArray());\n        return { relinquished: true };\n    }\n    parseDiscoveryResult(result) {\n        const resultReader = new Utils.Reader(result);\n        const totalCertificates = resultReader.readVarIntNum();\n        const certificates = [];\n        for (let i = 0; i < totalCertificates; i++) {\n            const certBinLen = resultReader.readVarIntNum();\n            const certBin = resultReader.read(certBinLen);\n            const cert = Certificate.fromBinary(certBin);\n            const nameLength = resultReader.readVarIntNum();\n            const name = Utils.toUTF8(resultReader.read(nameLength));\n            const iconUrlLength = resultReader.readVarIntNum();\n            const iconUrl = Utils.toUTF8(resultReader.read(iconUrlLength));\n            const descriptionLength = resultReader.readVarIntNum();\n            const description = Utils.toUTF8(resultReader.read(descriptionLength));\n            const trust = resultReader.readUInt8();\n            const publiclyRevealedKeyring = {};\n            const numPublicKeyringEntries = resultReader.readVarIntNum();\n            for (let j = 0; j < numPublicKeyringEntries; j++) {\n                const fieldKeyLen = resultReader.readVarIntNum();\n                const fieldKey = Utils.toUTF8(resultReader.read(fieldKeyLen));\n                const fieldValueLen = resultReader.readVarIntNum();\n                publiclyRevealedKeyring[fieldKey] = resultReader.read(fieldValueLen);\n            }\n            const decryptedFields = {};\n            const numDecryptedFields = resultReader.readVarIntNum();\n            for (let k = 0; k < numDecryptedFields; k++) {\n                const fieldKeyLen = resultReader.readVarIntNum();\n                const fieldKey = Utils.toUTF8(resultReader.read(fieldKeyLen));\n                const fieldValueLen = resultReader.readVarIntNum();\n                decryptedFields[fieldKey] = Utils.toUTF8(resultReader.read(fieldValueLen));\n            }\n            certificates.push({\n                ...cert,\n                signature: cert.signature,\n                certifierInfo: { iconUrl, name, description, trust },\n                publiclyRevealedKeyring,\n                decryptedFields\n            });\n        }\n        return {\n            totalCertificates,\n            certificates\n        };\n    }\n    async discoverByIdentityKey(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.write(Utils.toArray(args.identityKey, 'hex'));\n        if (typeof args.limit === 'number') {\n            paramWriter.writeVarIntNum(args.limit);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        if (typeof args.offset === 'number') {\n            paramWriter.writeVarIntNum(args.offset);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        const result = await this.transmit('discoverByIdentityKey', originator, paramWriter.toArray());\n        return this.parseDiscoveryResult(result);\n    }\n    async discoverByAttributes(args, originator) {\n        const paramWriter = new Utils.Writer();\n        const attributeKeys = Object.keys(args.attributes);\n        paramWriter.writeVarIntNum(attributeKeys.length);\n        for (let i = 0; i < attributeKeys.length; i++) {\n            paramWriter.writeVarIntNum(attributeKeys[i].length);\n            paramWriter.write(Utils.toArray(attributeKeys[i], 'utf8'));\n            paramWriter.writeVarIntNum(args.attributes[attributeKeys[i]].length);\n            paramWriter.write(Utils.toArray(args.attributes[attributeKeys[i]], 'utf8'));\n        }\n        if (typeof args.limit === 'number') {\n            paramWriter.writeVarIntNum(args.limit);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        if (typeof args.offset === 'number') {\n            paramWriter.writeVarIntNum(args.offset);\n        }\n        else {\n            paramWriter.writeVarIntNum(-1);\n        }\n        // Serialize seekPermission\n        paramWriter.writeInt8(typeof args.seekPermission === 'boolean'\n            ? args.seekPermission\n                ? 1\n                : 0\n            : -1);\n        const result = await this.transmit('discoverByAttributes', originator, paramWriter.toArray());\n        return this.parseDiscoveryResult(result);\n    }\n    async isAuthenticated(args, originator) {\n        const result = await this.transmit('isAuthenticated', originator);\n        // @ts-expect-error\n        return { authenticated: result[0] === 1 };\n    }\n    async waitForAuthentication(args, originator) {\n        await this.transmit('waitForAuthentication', originator);\n        return { authenticated: true };\n    }\n    async getHeight(args, originator) {\n        const result = await this.transmit('getHeight', originator);\n        const resultReader = new Utils.Reader(result);\n        return {\n            height: resultReader.readVarIntNum()\n        };\n    }\n    async getHeaderForHeight(args, originator) {\n        const paramWriter = new Utils.Writer();\n        paramWriter.writeVarIntNum(args.height);\n        const header = await this.transmit('getHeaderForHeight', originator, paramWriter.toArray());\n        return {\n            header: Utils.toHex(header)\n        };\n    }\n    async getNetwork(args, originator) {\n        const net = await this.transmit('getNetwork', originator);\n        return {\n            network: net[0] === 0 ? 'mainnet' : 'testnet'\n        };\n    }\n    async getVersion(args, originator) {\n        const version = await this.transmit('getVersion', originator);\n        return {\n            version: Utils.toUTF8(version)\n        };\n    }\n}\n//# sourceMappingURL=WalletWireTransceiver.js.map","import WalletWireCalls from './WalletWireCalls.js';\nimport * as Utils from '../../primitives/utils.js';\nexport default class HTTPWalletWire {\n    baseUrl;\n    httpClient;\n    originator;\n    constructor(originator, baseUrl = 'http://localhost:3301', httpClient = fetch) {\n        this.baseUrl = baseUrl;\n        this.httpClient = httpClient;\n        this.originator = originator;\n    }\n    async transmitToWallet(message) {\n        const messageReader = new Utils.Reader(message);\n        // Read call code\n        const callCode = messageReader.readUInt8();\n        // Map call code to call name\n        const callName = WalletWireCalls[callCode]; // calls is enum\n        if (callName === undefined || callName === '') {\n            // Invalid call code\n            throw new Error(`Invalid call code: ${callCode}`);\n        }\n        // Read originator length\n        const originatorLength = messageReader.readUInt8();\n        let originator;\n        if (originatorLength > 0) {\n            const originatorBytes = messageReader.read(originatorLength);\n            originator = Utils.toUTF8(originatorBytes);\n        }\n        const payload = messageReader.read();\n        const response = await fetch(`${this.baseUrl}/${callName}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/octet-stream',\n                Origin: originator ?? '' // ✅ Explicitly handle null/undefined cases\n            },\n            body: new Uint8Array(payload)\n        });\n        const responseBuffer = await response.arrayBuffer();\n        return Array.from(new Uint8Array(responseBuffer));\n    }\n}\n//# sourceMappingURL=HTTPWalletWire.js.map","/**\n * When a `createAction` or `signAction` is completed in undelayed mode (`acceptDelayedBroadcast`: false),\n * any unsucccessful result will return the results by way of this exception to ensure attention is\n * paid to processing errors.\n */\nexport class WERR_REVIEW_ACTIONS extends Error {\n    reviewActionResults;\n    sendWithResults;\n    txid;\n    tx;\n    noSendChange;\n    code;\n    isError = true;\n    /**\n     * All parameters correspond to their comparable `createAction` or `signSction` results\n     * with the exception of `reviewActionResults`;\n     * which contains more details, particularly for double spend results.\n     */\n    constructor(reviewActionResults, sendWithResults, txid, tx, noSendChange) {\n        super('Undelayed createAction or signAction results require review.');\n        this.reviewActionResults = reviewActionResults;\n        this.sendWithResults = sendWithResults;\n        this.txid = txid;\n        this.tx = tx;\n        this.noSendChange = noSendChange;\n        this.code = 5;\n        this.name = this.constructor.name;\n    }\n}\nexport default WERR_REVIEW_ACTIONS;\n//# sourceMappingURL=WERR_REVIEW_ACTIONS.js.map","import { WERR_REVIEW_ACTIONS } from '../WERR_REVIEW_ACTIONS.js';\nimport { toOriginHeader } from './utils/toOriginHeader.js';\nexport default class HTTPWalletJSON {\n    baseUrl;\n    httpClient;\n    originator;\n    api; // Fixed `any` types\n    constructor(originator, baseUrl = 'http://localhost:3321', httpClient = fetch) {\n        this.baseUrl = baseUrl;\n        this.originator = originator;\n        this.httpClient = httpClient;\n        // Detect if we're in a browser environment\n        const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window?.origin !== 'file://';\n        this.api = async (call, args) => {\n            // In browser environments, let the browser handle Origin header automatically\n            // In Node.js environments, we need to set it manually if originator is provided\n            const origin = !isBrowser && this.originator\n                ? toOriginHeader(this.originator, 'http')\n                : undefined;\n            if (!isBrowser && origin === undefined) {\n                console.error('Originator is required in Node.js environments');\n            }\n            const res = await (await httpClient(`${this.baseUrl}/${call}`, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    ...(origin ? { Origin: origin } : {}),\n                    ...(origin ? { Originator: origin } : {}),\n                },\n                body: JSON.stringify(args)\n            }));\n            const data = await res.json();\n            // Check the HTTP status on the original response\n            if (!res.ok) {\n                if (res.status === 400 && data.isError && data.code === 5) {\n                    const err = new WERR_REVIEW_ACTIONS(data.reviewActionResults, data.sendWithResults, data.txid, data.tx, data.noSendChange);\n                    throw err;\n                }\n                else {\n                    const err = {\n                        call,\n                        args,\n                        message: data.message ?? `HTTP Client error ${res.status}`\n                    };\n                    throw new Error(JSON.stringify(err));\n                }\n            }\n            return data;\n        };\n    }\n    async createAction(args) {\n        return await this.api('createAction', args);\n    }\n    async signAction(args) {\n        return await this.api('signAction', args);\n    }\n    async abortAction(args) {\n        return await this.api('abortAction', args);\n    }\n    async listActions(args) {\n        return await this.api('listActions', args);\n    }\n    async internalizeAction(args) {\n        return await this.api('internalizeAction', args);\n    }\n    async listOutputs(args) {\n        return await this.api('listOutputs', args);\n    }\n    async relinquishOutput(args) {\n        return await this.api('relinquishOutput', args);\n    }\n    async getPublicKey(args) {\n        return await this.api('getPublicKey', args);\n    }\n    async revealCounterpartyKeyLinkage(args) {\n        return await this.api('revealCounterpartyKeyLinkage', args);\n    }\n    async revealSpecificKeyLinkage(args) {\n        return await this.api('revealSpecificKeyLinkage', args);\n    }\n    async encrypt(args) {\n        return await this.api('encrypt', args);\n    }\n    async decrypt(args) {\n        return await this.api('decrypt', args);\n    }\n    async createHmac(args) {\n        return await this.api('createHmac', args);\n    }\n    async verifyHmac(args) {\n        return await this.api('verifyHmac', args);\n    }\n    async createSignature(args) {\n        return await this.api('createSignature', args);\n    }\n    async verifySignature(args) {\n        return await this.api('verifySignature', args);\n    }\n    async acquireCertificate(args) {\n        return await this.api('acquireCertificate', args);\n    }\n    async listCertificates(args) {\n        return await this.api('listCertificates', args);\n    }\n    async proveCertificate(args) {\n        return await this.api('proveCertificate', args);\n    }\n    async relinquishCertificate(args) {\n        return await this.api('relinquishCertificate', args);\n    }\n    async discoverByIdentityKey(args) {\n        return await this.api('discoverByIdentityKey', args);\n    }\n    async discoverByAttributes(args) {\n        return await this.api('discoverByAttributes', args);\n    }\n    async isAuthenticated(args) {\n        return await this.api('isAuthenticated', args);\n    }\n    async waitForAuthentication(args) {\n        return await this.api('waitForAuthentication', args);\n    }\n    async getHeight(args) {\n        return await this.api('getHeight', args);\n    }\n    async getHeaderForHeight(args) {\n        return await this.api('getHeaderForHeight', args);\n    }\n    async getNetwork(args) {\n        return await this.api('getNetwork', args);\n    }\n    async getVersion(args) {\n        return await this.api('getVersion', args);\n    }\n}\n//# sourceMappingURL=HTTPWalletJSON.js.map","export function toOriginHeader(originator, fallbackScheme = 'http') {\n    // If the caller already gave us a scheme, assume it’s fine\n    if (/^[a-z][a-z0-9+.-]*:\\/\\//i.test(originator)) {\n        try {\n            return new URL(originator).origin; // trims any path/query\n        }\n        catch { /* fall through to fix-up */ }\n    }\n    // Otherwise, prepend the fallback scheme and validate\n    try {\n        return new URL(`${fallbackScheme}://${originator}`).origin;\n    }\n    catch {\n        throw new Error(`Invalid originator value: ${originator}`);\n    }\n}\n//# sourceMappingURL=toOriginHeader.js.map","import Random from '../../primitives/Random.js';\nimport * as Utils from '../../primitives/utils.js';\nimport { WalletError } from '../WalletError.js';\n/**\n * Facilitates wallet operations over cross-document messaging.\n */\nexport default class ReactNativeWebView {\n    domain;\n    constructor(domain = '*') {\n        if (typeof window !== 'object') {\n            throw new Error('The XDM substrate requires a global window object.');\n        }\n        if (!window.hasOwnProperty(\"ReactNativeWebView\")) {\n            throw new Error('The window object does not have a ReactNativeWebView property.');\n        }\n        if (typeof window.ReactNativeWebView.postMessage !== 'function') {\n            throw new Error('The window.ReactNativeWebView property does not seem to support postMessage calls.');\n        }\n        this.domain = domain;\n    }\n    async invoke(call, args) {\n        return await new Promise((resolve, reject) => {\n            const id = Utils.toBase64(Random(12));\n            const listener = (e) => {\n                const data = JSON.parse(e.data);\n                if (data.type !== 'CWI' ||\n                    data.id !== id ||\n                    data.isInvocation === true) {\n                    return;\n                }\n                if (typeof window.removeEventListener === 'function') {\n                    window.removeEventListener('message', listener);\n                }\n                if (data.status === 'error') {\n                    const err = new WalletError(data.description, data.code);\n                    reject(err);\n                }\n                else {\n                    resolve(data.result);\n                }\n            };\n            window.addEventListener('message', listener);\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n                type: 'CWI',\n                isInvocation: true,\n                id,\n                call,\n                args\n            }));\n        });\n    }\n    async createAction(args) {\n        return await this.invoke('createAction', args);\n    }\n    async signAction(args) {\n        return await this.invoke('signAction', args);\n    }\n    async abortAction(args) {\n        return await this.invoke('abortAction', args);\n    }\n    async listActions(args) {\n        return await this.invoke('listActions', args);\n    }\n    async internalizeAction(args) {\n        return await this.invoke('internalizeAction', args);\n    }\n    async listOutputs(args) {\n        return await this.invoke('listOutputs', args);\n    }\n    async relinquishOutput(args) {\n        return await this.invoke('relinquishOutput', args);\n    }\n    async getPublicKey(args) {\n        return await this.invoke('getPublicKey', args);\n    }\n    async revealCounterpartyKeyLinkage(args) {\n        return await this.invoke('revealCounterpartyKeyLinkage', args);\n    }\n    async revealSpecificKeyLinkage(args) {\n        return await this.invoke('revealSpecificKeyLinkage', args);\n    }\n    async encrypt(args) {\n        return await this.invoke('encrypt', args);\n    }\n    async decrypt(args) {\n        return await this.invoke('decrypt', args);\n    }\n    async createHmac(args) {\n        return await this.invoke('createHmac', args);\n    }\n    async verifyHmac(args) {\n        return await this.invoke('verifyHmac', args);\n    }\n    async createSignature(args) {\n        return await this.invoke('createSignature', args);\n    }\n    async verifySignature(args) {\n        return await this.invoke('verifySignature', args);\n    }\n    async acquireCertificate(args) {\n        return await this.invoke('acquireCertificate', args);\n    }\n    async listCertificates(args) {\n        return await this.invoke('listCertificates', args);\n    }\n    async proveCertificate(args) {\n        return await this.invoke('proveCertificate', args);\n    }\n    async relinquishCertificate(args) {\n        return await this.invoke('relinquishCertificate', args);\n    }\n    async discoverByIdentityKey(args) {\n        return await this.invoke('discoverByIdentityKey', args);\n    }\n    async discoverByAttributes(args) {\n        return await this.invoke('discoverByAttributes', args);\n    }\n    async isAuthenticated(args) {\n        return await this.invoke('isAuthenticated', args);\n    }\n    async waitForAuthentication(args) {\n        return await this.invoke('waitForAuthentication', args);\n    }\n    async getHeight(args) {\n        return await this.invoke('getHeight', args);\n    }\n    async getHeaderForHeight(args) {\n        return await this.invoke('getHeaderForHeight', args);\n    }\n    async getNetwork(args) {\n        return await this.invoke('getNetwork', args);\n    }\n    async getVersion(args) {\n        return await this.invoke('getVersion', args);\n    }\n}\n//# sourceMappingURL=ReactNativeWebView.js.map","import WindowCWISubstrate from './substrates/window.CWI.js';\nimport XDMSubstrate from './substrates/XDM.js';\nimport WalletWireTransceiver from './substrates/WalletWireTransceiver.js';\nimport HTTPWalletWire from './substrates/HTTPWalletWire.js';\nimport HTTPWalletJSON from './substrates/HTTPWalletJSON.js';\nimport ReactNativeWebView from './substrates/ReactNativeWebView.js';\nconst MAX_XDM_RESPONSE_WAIT = 200;\n/**\n * The SDK is how applications communicate with wallets over a communications substrate.\n */\nexport default class WalletClient {\n    substrate;\n    originator;\n    constructor(substrate = 'auto', originator) {\n        if (substrate === 'Cicada') {\n            substrate = new WalletWireTransceiver(new HTTPWalletWire(originator));\n        }\n        if (substrate === 'window.CWI')\n            substrate = new WindowCWISubstrate();\n        if (substrate === 'XDM')\n            substrate = new XDMSubstrate();\n        if (substrate === 'json-api')\n            substrate = new HTTPWalletJSON(originator);\n        if (substrate === 'react-native')\n            substrate = new ReactNativeWebView(originator);\n        this.substrate = substrate;\n        this.originator = originator;\n    }\n    async connectToSubstrate() {\n        if (typeof this.substrate === 'object') {\n            return; // substrate is already connected\n        }\n        let sub;\n        const checkSub = async (timeout) => {\n            let result;\n            if (typeof timeout === 'number') {\n                result = await Promise.race([\n                    sub.getVersion({}),\n                    new Promise((_resolve, reject) => setTimeout(() => reject(new Error('Timed out.')), timeout))\n                ]);\n            }\n            else {\n                result = await sub.getVersion({});\n            }\n            if (typeof result !== 'object' || typeof result.version !== 'string') {\n                throw new Error('Failed to use substrate.');\n            }\n        };\n        try {\n            sub = new WindowCWISubstrate();\n            await checkSub();\n            this.substrate = sub;\n        }\n        catch (e) {\n            // XDM failed, try the next one...\n            try {\n                sub = new XDMSubstrate();\n                await checkSub(MAX_XDM_RESPONSE_WAIT);\n                this.substrate = sub;\n            }\n            catch (e) {\n                // HTTP wire failed, move on...\n                try {\n                    sub = new WalletWireTransceiver(new HTTPWalletWire(this.originator));\n                    await checkSub();\n                    this.substrate = sub;\n                }\n                catch (e) {\n                    // HTTP Wire failed, attempt the next...\n                    try {\n                        sub = new HTTPWalletJSON(this.originator);\n                        await checkSub();\n                        this.substrate = sub;\n                    }\n                    catch (e) {\n                        // HTTP JSON failed, attempt the next...\n                        try {\n                            sub = new ReactNativeWebView(this.originator);\n                            await checkSub();\n                            this.substrate = sub;\n                        }\n                        catch (e) {\n                            // No comms. Tell the user to install a BSV wallet.\n                            throw new Error('No wallet available over any communication substrate. Install a BSV wallet today!');\n                        }\n                    }\n                }\n            }\n        }\n    }\n    async createAction(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.createAction(args, this.originator);\n    }\n    async signAction(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.signAction(args, this.originator);\n    }\n    async abortAction(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.abortAction(args, this.originator);\n    }\n    async listActions(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.listActions(args, this.originator);\n    }\n    async internalizeAction(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.internalizeAction(args, this.originator);\n    }\n    async listOutputs(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.listOutputs(args, this.originator);\n    }\n    async relinquishOutput(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.relinquishOutput(args, this.originator);\n    }\n    async getPublicKey(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.getPublicKey(args, this.originator);\n    }\n    async revealCounterpartyKeyLinkage(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.revealCounterpartyKeyLinkage(args, this.originator);\n    }\n    async revealSpecificKeyLinkage(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.revealSpecificKeyLinkage(args, this.originator);\n    }\n    async encrypt(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.encrypt(args, this.originator);\n    }\n    async decrypt(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.decrypt(args, this.originator);\n    }\n    async createHmac(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.createHmac(args, this.originator);\n    }\n    async verifyHmac(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.verifyHmac(args, this.originator);\n    }\n    async createSignature(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.createSignature(args, this.originator);\n    }\n    async verifySignature(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.verifySignature(args, this.originator);\n    }\n    async acquireCertificate(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.acquireCertificate(args, this.originator);\n    }\n    async listCertificates(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.listCertificates(args, this.originator);\n    }\n    async proveCertificate(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.proveCertificate(args, this.originator);\n    }\n    async relinquishCertificate(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.relinquishCertificate(args, this.originator);\n    }\n    async discoverByIdentityKey(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.discoverByIdentityKey(args, this.originator);\n    }\n    async discoverByAttributes(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.discoverByAttributes(args, this.originator);\n    }\n    async isAuthenticated(args = {}) {\n        await this.connectToSubstrate();\n        return await this.substrate.isAuthenticated(args, this.originator);\n    }\n    async waitForAuthentication(args = {}) {\n        await this.connectToSubstrate();\n        return await this.substrate.waitForAuthentication(args, this.originator);\n    }\n    async getHeight(args = {}) {\n        await this.connectToSubstrate();\n        return await this.substrate.getHeight(args, this.originator);\n    }\n    async getHeaderForHeight(args) {\n        await this.connectToSubstrate();\n        return await this.substrate.getHeaderForHeight(args, this.originator);\n    }\n    async getNetwork(args = {}) {\n        await this.connectToSubstrate();\n        return await this.substrate.getNetwork(args, this.originator);\n    }\n    async getVersion(args = {}) {\n        await this.connectToSubstrate();\n        return await this.substrate.getVersion(args, this.originator);\n    }\n}\n//# sourceMappingURL=WalletClient.js.map","import * as Utils from '../../primitives/utils.js';\nimport calls from './WalletWireCalls.js';\nimport Certificate from '../../auth/certificates/Certificate.js';\n/**\n * Processes incoming wallet calls received over a wallet wire, with a given wallet.\n */\nexport default class WalletWireProcessor {\n    wallet;\n    constructor(wallet) {\n        this.wallet = wallet;\n    }\n    decodeOutpoint(reader) {\n        const txidBytes = reader.read(32);\n        const txid = Utils.toHex(txidBytes);\n        const index = reader.readVarIntNum();\n        return `${txid}.${index}`;\n    }\n    encodeOutpoint(outpoint) {\n        const writer = new Utils.Writer();\n        const [txid, index] = outpoint.split('.');\n        writer.write(Utils.toArray(txid, 'hex'));\n        writer.writeVarIntNum(Number(index));\n        return writer.toArray();\n    }\n    async transmitToWallet(message) {\n        const messageReader = new Utils.Reader(message);\n        try {\n            // Read call code\n            const callCode = messageReader.readUInt8();\n            // Map call code to call name\n            const callName = calls[callCode]; // calls is enum\n            if (callName === undefined || callName === '') {\n                // Invalid call code\n                throw new Error(`Invalid call code: ${callCode}`);\n            }\n            // Read originator length\n            const originatorLength = messageReader.readUInt8();\n            const originatorBytes = messageReader.read(originatorLength);\n            const originator = Utils.toUTF8(originatorBytes);\n            // Read parameters\n            const paramsReader = messageReader; // Remaining bytes\n            switch (callName) {\n                case 'createAction': {\n                    // Deserialize parameters from paramsReader\n                    const args = {};\n                    // Read description\n                    const descriptionLength = paramsReader.readVarIntNum();\n                    const descriptionBytes = paramsReader.read(descriptionLength);\n                    args.description = Utils.toUTF8(descriptionBytes);\n                    // tx\n                    const inputBeefLength = paramsReader.readVarIntNum();\n                    if (inputBeefLength >= 0) {\n                        args.inputBEEF = paramsReader.read(inputBeefLength); // BEEF (Byte[])\n                    }\n                    else {\n                        args.inputBEEF = undefined;\n                    }\n                    // Read inputs\n                    const inputsLength = paramsReader.readVarIntNum();\n                    if (inputsLength >= 0) {\n                        args.inputs = [];\n                        for (let i = 0; i < inputsLength; i++) {\n                            const input = {};\n                            // outpoint\n                            input.outpoint = this.decodeOutpoint(paramsReader);\n                            // unlockingScript / unlockingScriptLength\n                            const unlockingScriptLength = paramsReader.readVarIntNum();\n                            if (unlockingScriptLength >= 0) {\n                                const unlockingScriptBytes = paramsReader.read(unlockingScriptLength);\n                                input.unlockingScript = Utils.toHex(unlockingScriptBytes);\n                            }\n                            else {\n                                input.unlockingScript = undefined;\n                                const unlockingScriptLengthValue = paramsReader.readVarIntNum();\n                                input.unlockingScriptLength = unlockingScriptLengthValue;\n                            }\n                            // inputDescription\n                            const inputDescriptionLength = paramsReader.readVarIntNum();\n                            const inputDescriptionBytes = paramsReader.read(inputDescriptionLength);\n                            input.inputDescription = Utils.toUTF8(inputDescriptionBytes);\n                            // sequenceNumber\n                            const sequenceNumber = paramsReader.readVarIntNum();\n                            if (sequenceNumber >= 0) {\n                                input.sequenceNumber = sequenceNumber;\n                            }\n                            else {\n                                input.sequenceNumber = undefined;\n                            }\n                            args.inputs.push(input);\n                        }\n                    }\n                    else {\n                        args.inputs = undefined;\n                    }\n                    // Read outputs\n                    const outputsLength = paramsReader.readVarIntNum();\n                    if (outputsLength >= 0) {\n                        args.outputs = [];\n                        for (let i = 0; i < outputsLength; i++) {\n                            const output = {};\n                            // lockingScript\n                            const lockingScriptLength = paramsReader.readVarIntNum();\n                            const lockingScriptBytes = paramsReader.read(lockingScriptLength);\n                            output.lockingScript = Utils.toHex(lockingScriptBytes);\n                            // satoshis\n                            output.satoshis = paramsReader.readVarIntNum();\n                            // outputDescription\n                            const outputDescriptionLength = paramsReader.readVarIntNum();\n                            const outputDescriptionBytes = paramsReader.read(outputDescriptionLength);\n                            output.outputDescription = Utils.toUTF8(outputDescriptionBytes);\n                            // basket\n                            const basketLength = paramsReader.readVarIntNum();\n                            if (basketLength >= 0) {\n                                const basketBytes = paramsReader.read(basketLength);\n                                output.basket = Utils.toUTF8(basketBytes);\n                            }\n                            else {\n                                output.basket = undefined;\n                            }\n                            // customInstructions\n                            const customInstructionsLength = paramsReader.readVarIntNum();\n                            if (customInstructionsLength >= 0) {\n                                const customInstructionsBytes = paramsReader.read(customInstructionsLength);\n                                output.customInstructions = Utils.toUTF8(customInstructionsBytes);\n                            }\n                            else {\n                                output.customInstructions = undefined;\n                            }\n                            // tags\n                            const tagsLength = paramsReader.readVarIntNum();\n                            if (tagsLength >= 0) {\n                                output.tags = [];\n                                for (let j = 0; j < tagsLength; j++) {\n                                    const tagLength = paramsReader.readVarIntNum();\n                                    const tagBytes = paramsReader.read(tagLength);\n                                    const tag = Utils.toUTF8(tagBytes);\n                                    output.tags.push(tag);\n                                }\n                            }\n                            else {\n                                output.tags = undefined;\n                            }\n                            args.outputs.push(output);\n                        }\n                    }\n                    else {\n                        args.outputs = undefined;\n                    }\n                    // lockTime\n                    const lockTime = paramsReader.readVarIntNum();\n                    if (lockTime >= 0) {\n                        args.lockTime = lockTime;\n                    }\n                    else {\n                        args.lockTime = undefined;\n                    }\n                    // version\n                    const version = paramsReader.readVarIntNum();\n                    if (version >= 0) {\n                        args.version = version;\n                    }\n                    else {\n                        args.version = undefined;\n                    }\n                    // labels\n                    const labelsLength = paramsReader.readVarIntNum();\n                    if (labelsLength >= 0) {\n                        args.labels = [];\n                        for (let i = 0; i < labelsLength; i++) {\n                            const labelLength = paramsReader.readVarIntNum();\n                            const labelBytes = paramsReader.read(labelLength);\n                            const label = Utils.toUTF8(labelBytes);\n                            args.labels.push(label);\n                        }\n                    }\n                    else {\n                        args.labels = undefined;\n                    }\n                    // options\n                    const optionsPresent = paramsReader.readInt8();\n                    if (optionsPresent === 1) {\n                        args.options = {};\n                        // signAndProcess\n                        const signAndProcessFlag = paramsReader.readInt8();\n                        if (signAndProcessFlag === -1) {\n                            args.options.signAndProcess = undefined;\n                        }\n                        else {\n                            args.options.signAndProcess = signAndProcessFlag === 1;\n                        }\n                        // acceptDelayedBroadcast\n                        const acceptDelayedBroadcastFlag = paramsReader.readInt8();\n                        if (acceptDelayedBroadcastFlag === -1) {\n                            args.options.acceptDelayedBroadcast = undefined;\n                        }\n                        else {\n                            args.options.acceptDelayedBroadcast =\n                                acceptDelayedBroadcastFlag === 1;\n                        }\n                        // trustSelf\n                        const trustSelfFlag = paramsReader.readInt8();\n                        if (trustSelfFlag === -1) {\n                            args.options.trustSelf = undefined;\n                        }\n                        else if (trustSelfFlag === 1) {\n                            args.options.trustSelf = 'known';\n                        }\n                        // knownTxids\n                        const knownTxidsLength = paramsReader.readVarIntNum();\n                        if (knownTxidsLength >= 0) {\n                            args.options.knownTxids = [];\n                            for (let i = 0; i < knownTxidsLength; i++) {\n                                const txidBytes = paramsReader.read(32);\n                                const txid = Utils.toHex(txidBytes);\n                                args.options.knownTxids.push(txid);\n                            }\n                        }\n                        else {\n                            args.options.knownTxids = undefined;\n                        }\n                        // returnTXIDOnly\n                        const returnTXIDOnlyFlag = paramsReader.readInt8();\n                        if (returnTXIDOnlyFlag === -1) {\n                            args.options.returnTXIDOnly = undefined;\n                        }\n                        else {\n                            args.options.returnTXIDOnly = returnTXIDOnlyFlag === 1;\n                        }\n                        // noSend\n                        const noSendFlag = paramsReader.readInt8();\n                        if (noSendFlag === -1) {\n                            args.options.noSend = undefined;\n                        }\n                        else {\n                            args.options.noSend = noSendFlag === 1;\n                        }\n                        // noSendChange\n                        const noSendChangeLength = paramsReader.readVarIntNum();\n                        if (noSendChangeLength >= 0) {\n                            args.options.noSendChange = [];\n                            for (let i = 0; i < noSendChangeLength; i++) {\n                                const outpoint = this.decodeOutpoint(paramsReader);\n                                args.options.noSendChange.push(outpoint);\n                            }\n                        }\n                        else {\n                            args.options.noSendChange = undefined;\n                        }\n                        // sendWith\n                        const sendWithLength = paramsReader.readVarIntNum();\n                        if (sendWithLength >= 0) {\n                            args.options.sendWith = [];\n                            for (let i = 0; i < sendWithLength; i++) {\n                                const txidBytes = paramsReader.read(32);\n                                const txid = Utils.toHex(txidBytes);\n                                args.options.sendWith.push(txid);\n                            }\n                        }\n                        else {\n                            args.options.sendWith = undefined;\n                        }\n                        // randomizeOutputs\n                        const randomizeOutputsFlag = paramsReader.readInt8();\n                        if (randomizeOutputsFlag === -1) {\n                            args.options.randomizeOutputs = undefined;\n                        }\n                        else {\n                            args.options.randomizeOutputs = randomizeOutputsFlag === 1;\n                        }\n                    }\n                    else {\n                        args.options = undefined;\n                    }\n                    // Call the method\n                    const createActionResult = await this.wallet.createAction(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // txid\n                    if (createActionResult.txid != null && createActionResult.txid !== '') {\n                        resultWriter.writeInt8(1);\n                        resultWriter.write(Utils.toArray(createActionResult.txid, 'hex'));\n                    }\n                    else {\n                        resultWriter.writeInt8(0);\n                    }\n                    // tx\n                    if (createActionResult.tx != null) {\n                        resultWriter.writeInt8(1);\n                        resultWriter.writeVarIntNum(createActionResult.tx.length);\n                        resultWriter.write(createActionResult.tx);\n                    }\n                    else {\n                        resultWriter.writeInt8(0);\n                    }\n                    // noSendChange\n                    if (createActionResult.noSendChange != null) {\n                        resultWriter.writeVarIntNum(createActionResult.noSendChange.length);\n                        for (const outpoint of createActionResult.noSendChange) {\n                            resultWriter.write(this.encodeOutpoint(outpoint));\n                        }\n                    }\n                    else {\n                        resultWriter.writeVarIntNum(-1);\n                    }\n                    // sendWithResults\n                    if (createActionResult.sendWithResults != null) {\n                        resultWriter.writeVarIntNum(createActionResult.sendWithResults.length);\n                        for (const result of createActionResult.sendWithResults) {\n                            resultWriter.write(Utils.toArray(result.txid, 'hex'));\n                            let statusCode;\n                            if (result.status === 'unproven')\n                                statusCode = 1;\n                            else if (result.status === 'sending')\n                                statusCode = 2;\n                            else if (result.status === 'failed')\n                                statusCode = 3;\n                            resultWriter.writeInt8(statusCode);\n                        }\n                    }\n                    else {\n                        resultWriter.writeVarIntNum(-1);\n                    }\n                    // signableTransaction\n                    if (createActionResult.signableTransaction != null) {\n                        resultWriter.writeInt8(1);\n                        resultWriter.writeVarIntNum(createActionResult.signableTransaction.tx.length);\n                        resultWriter.write(createActionResult.signableTransaction.tx);\n                        const referenceBytes = Utils.toArray(createActionResult.signableTransaction.reference, 'base64');\n                        resultWriter.writeVarIntNum(referenceBytes.length);\n                        resultWriter.write(referenceBytes);\n                    }\n                    else {\n                        resultWriter.writeInt8(0);\n                    }\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'signAction': {\n                    const args = {};\n                    // Deserialize spends\n                    const spendCount = paramsReader.readVarIntNum();\n                    args.spends = {};\n                    for (let i = 0; i < spendCount; i++) {\n                        const inputIndex = paramsReader.readVarIntNum();\n                        const spend = {};\n                        // unlockingScript\n                        const unlockingScriptLength = paramsReader.readVarIntNum();\n                        const unlockingScriptBytes = paramsReader.read(unlockingScriptLength);\n                        spend.unlockingScript = Utils.toHex(unlockingScriptBytes);\n                        // sequenceNumber\n                        const sequenceNumber = paramsReader.readVarIntNum();\n                        if (sequenceNumber >= 0) {\n                            spend.sequenceNumber = sequenceNumber;\n                        }\n                        else {\n                            spend.sequenceNumber = undefined;\n                        }\n                        args.spends[inputIndex] = spend;\n                    }\n                    // Deserialize reference\n                    const referenceLength = paramsReader.readVarIntNum();\n                    const referenceBytes = paramsReader.read(referenceLength);\n                    args.reference = Utils.toBase64(referenceBytes);\n                    // Deserialize options\n                    const optionsPresent = paramsReader.readInt8();\n                    if (optionsPresent === 1) {\n                        args.options = {};\n                        // acceptDelayedBroadcast\n                        const acceptDelayedBroadcastFlag = paramsReader.readInt8();\n                        if (acceptDelayedBroadcastFlag === -1) {\n                            args.options.acceptDelayedBroadcast = undefined;\n                        }\n                        else {\n                            args.options.acceptDelayedBroadcast =\n                                acceptDelayedBroadcastFlag === 1;\n                        }\n                        // returnTXIDOnly\n                        const returnTXIDOnlyFlag = paramsReader.readInt8();\n                        if (returnTXIDOnlyFlag === -1) {\n                            args.options.returnTXIDOnly = undefined;\n                        }\n                        else {\n                            args.options.returnTXIDOnly = returnTXIDOnlyFlag === 1;\n                        }\n                        // noSend\n                        const noSendFlag = paramsReader.readInt8();\n                        if (noSendFlag === -1) {\n                            args.options.noSend = undefined;\n                        }\n                        else {\n                            args.options.noSend = noSendFlag === 1;\n                        }\n                        // sendWith\n                        const sendWithLength = paramsReader.readVarIntNum();\n                        if (sendWithLength >= 0) {\n                            args.options.sendWith = [];\n                            for (let i = 0; i < sendWithLength; i++) {\n                                const txidBytes = paramsReader.read(32);\n                                const txid = Utils.toHex(txidBytes);\n                                args.options.sendWith.push(txid);\n                            }\n                        }\n                        else {\n                            args.options.sendWith = undefined;\n                        }\n                    }\n                    else {\n                        args.options = undefined;\n                    }\n                    // Call the method\n                    const signActionResult = await this.wallet.signAction(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // txid\n                    if (signActionResult.txid != null && signActionResult.txid !== '') {\n                        resultWriter.writeInt8(1);\n                        resultWriter.write(Utils.toArray(signActionResult.txid, 'hex'));\n                    }\n                    else {\n                        resultWriter.writeInt8(0);\n                    }\n                    // tx\n                    if (signActionResult.tx != null) {\n                        resultWriter.writeInt8(1);\n                        resultWriter.writeVarIntNum(signActionResult.tx.length);\n                        resultWriter.write(signActionResult.tx);\n                    }\n                    else {\n                        resultWriter.writeInt8(0);\n                    }\n                    // sendWithResults\n                    if (signActionResult.sendWithResults != null) {\n                        resultWriter.writeVarIntNum(signActionResult.sendWithResults.length);\n                        for (const result of signActionResult.sendWithResults) {\n                            resultWriter.write(Utils.toArray(result.txid, 'hex'));\n                            let statusCode;\n                            if (result.status === 'unproven')\n                                statusCode = 1;\n                            else if (result.status === 'sending')\n                                statusCode = 2;\n                            else if (result.status === 'failed')\n                                statusCode = 3;\n                            resultWriter.writeInt8(statusCode);\n                        }\n                    }\n                    else {\n                        resultWriter.writeVarIntNum(-1);\n                    }\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'abortAction': {\n                    // Deserialize reference\n                    const referenceBytes = paramsReader.read();\n                    const reference = Utils.toBase64(referenceBytes);\n                    // Call the method\n                    await this.wallet.abortAction({ reference }, originator);\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'listActions': {\n                    const args = {};\n                    // Deserialize labels\n                    const labelsLength = paramsReader.readVarIntNum();\n                    args.labels = [];\n                    for (let i = 0; i < labelsLength; i++) {\n                        const labelLength = paramsReader.readVarIntNum();\n                        const labelBytes = paramsReader.read(labelLength);\n                        args.labels.push(Utils.toUTF8(labelBytes));\n                    }\n                    // Deserialize labelQueryMode\n                    const labelQueryModeFlag = paramsReader.readInt8();\n                    if (labelQueryModeFlag === -1) {\n                        args.labelQueryMode = undefined;\n                    }\n                    else if (labelQueryModeFlag === 1) {\n                        args.labelQueryMode = 'any';\n                    }\n                    else if (labelQueryModeFlag === 2) {\n                        args.labelQueryMode = 'all';\n                    }\n                    // Deserialize include options\n                    const includeOptionsNames = [\n                        'includeLabels',\n                        'includeInputs',\n                        'includeInputSourceLockingScripts',\n                        'includeInputUnlockingScripts',\n                        'includeOutputs',\n                        'includeOutputLockingScripts'\n                    ];\n                    for (const optionName of includeOptionsNames) {\n                        const optionFlag = paramsReader.readInt8();\n                        if (optionFlag === -1) {\n                            args[optionName] = undefined;\n                        }\n                        else {\n                            args[optionName] = optionFlag === 1;\n                        }\n                    }\n                    // Deserialize limit\n                    const limit = paramsReader.readVarIntNum();\n                    if (limit >= 0) {\n                        args.limit = limit;\n                    }\n                    else {\n                        args.limit = undefined;\n                    }\n                    // Deserialize offset\n                    const offset = paramsReader.readVarIntNum();\n                    if (offset >= 0) {\n                        args.offset = offset;\n                    }\n                    else {\n                        args.offset = undefined;\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const listActionsResult = await this.wallet.listActions(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // totalActions\n                    resultWriter.writeVarIntNum(listActionsResult.totalActions);\n                    // actions\n                    for (const action of listActionsResult.actions) {\n                        // txid\n                        resultWriter.write(Utils.toArray(action.txid, 'hex'));\n                        // satoshis\n                        resultWriter.writeVarIntNum(action.satoshis);\n                        // status\n                        let statusCode;\n                        switch (action.status) {\n                            case 'completed':\n                                statusCode = 1;\n                                break;\n                            case 'unprocessed':\n                                statusCode = 2;\n                                break;\n                            case 'sending':\n                                statusCode = 3;\n                                break;\n                            case 'unproven':\n                                statusCode = 4;\n                                break;\n                            case 'unsigned':\n                                statusCode = 5;\n                                break;\n                            case 'nosend':\n                                statusCode = 6;\n                                break;\n                            case 'nonfinal':\n                                statusCode = 7;\n                                break;\n                            case 'failed':\n                                statusCode = 8;\n                                break;\n                            default:\n                                statusCode = -1;\n                                break;\n                        }\n                        resultWriter.writeInt8(statusCode);\n                        // isOutgoing\n                        resultWriter.writeInt8(action.isOutgoing ? 1 : 0);\n                        // description\n                        const descriptionBytes = Utils.toArray(action.description, 'utf8');\n                        resultWriter.writeVarIntNum(descriptionBytes.length);\n                        resultWriter.write(descriptionBytes);\n                        // labels\n                        if (action.labels !== undefined) {\n                            resultWriter.writeVarIntNum(action.labels.length);\n                            for (const label of action.labels) {\n                                const labelBytes = Utils.toArray(label, 'utf8');\n                                resultWriter.writeVarIntNum(labelBytes.length);\n                                resultWriter.write(labelBytes);\n                            }\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                        // version\n                        resultWriter.writeVarIntNum(action.version);\n                        // lockTime\n                        resultWriter.writeVarIntNum(action.lockTime);\n                        // inputs\n                        if (action.inputs !== undefined) {\n                            resultWriter.writeVarIntNum(action.inputs.length);\n                            for (const input of action.inputs) {\n                                // sourceOutpoint\n                                resultWriter.write(this.encodeOutpoint(input.sourceOutpoint));\n                                // sourceSatoshis\n                                resultWriter.writeVarIntNum(input.sourceSatoshis);\n                                // sourceLockingScript\n                                if (input.sourceLockingScript !== undefined) {\n                                    const sourceLockingScriptBytes = Utils.toArray(input.sourceLockingScript, 'hex');\n                                    resultWriter.writeVarIntNum(sourceLockingScriptBytes.length);\n                                    resultWriter.write(sourceLockingScriptBytes);\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                                // unlockingScript\n                                if (input.unlockingScript !== undefined) {\n                                    const unlockingScriptBytes = Utils.toArray(input.unlockingScript, 'hex');\n                                    resultWriter.writeVarIntNum(unlockingScriptBytes.length);\n                                    resultWriter.write(unlockingScriptBytes);\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                                // inputDescription\n                                const inputDescriptionBytes = Utils.toArray(input.inputDescription, 'utf8');\n                                resultWriter.writeVarIntNum(inputDescriptionBytes.length);\n                                resultWriter.write(inputDescriptionBytes);\n                                // sequenceNumber\n                                resultWriter.writeVarIntNum(input.sequenceNumber);\n                            }\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                        // outputs\n                        if (action.outputs !== undefined) {\n                            resultWriter.writeVarIntNum(action.outputs.length);\n                            for (const output of action.outputs) {\n                                // outputIndex\n                                resultWriter.writeVarIntNum(output.outputIndex);\n                                // satoshis\n                                resultWriter.writeVarIntNum(output.satoshis);\n                                // lockingScript\n                                if (output.lockingScript !== undefined) {\n                                    const lockingScriptBytes = Utils.toArray(output.lockingScript, 'hex');\n                                    resultWriter.writeVarIntNum(lockingScriptBytes.length);\n                                    resultWriter.write(lockingScriptBytes);\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                                // spendable\n                                resultWriter.writeInt8(output.spendable ? 1 : 0);\n                                // outputDescription\n                                const outputDescriptionBytes = Utils.toArray(output.outputDescription, 'utf8');\n                                resultWriter.writeVarIntNum(outputDescriptionBytes.length);\n                                resultWriter.write(outputDescriptionBytes);\n                                // basket\n                                if (output.basket !== undefined) {\n                                    const basketBytes = Utils.toArray(output.basket, 'utf8');\n                                    resultWriter.writeVarIntNum(basketBytes.length);\n                                    resultWriter.write(basketBytes);\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                                // tags\n                                if (output.tags !== undefined) {\n                                    resultWriter.writeVarIntNum(output.tags.length);\n                                    for (const tag of output.tags) {\n                                        const tagBytes = Utils.toArray(tag, 'utf8');\n                                        resultWriter.writeVarIntNum(tagBytes.length);\n                                        resultWriter.write(tagBytes);\n                                    }\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                                // customInstructions\n                                if (output.customInstructions !== undefined) {\n                                    const customInstructionsBytes = Utils.toArray(output.customInstructions, 'utf8');\n                                    resultWriter.writeVarIntNum(customInstructionsBytes.length);\n                                    resultWriter.write(customInstructionsBytes);\n                                }\n                                else {\n                                    resultWriter.writeVarIntNum(-1);\n                                }\n                            }\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                    }\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'internalizeAction': {\n                    const args = {};\n                    // Read tx\n                    const txLength = paramsReader.readVarIntNum();\n                    args.tx = paramsReader.read(txLength);\n                    // Read outputs\n                    const outputsLength = paramsReader.readVarIntNum();\n                    args.outputs = [];\n                    for (let i = 0; i < outputsLength; i++) {\n                        const output = {};\n                        // outputIndex\n                        output.outputIndex = paramsReader.readVarIntNum();\n                        // protocol\n                        const protocolFlag = paramsReader.readUInt8();\n                        if (protocolFlag === 1) {\n                            output.protocol = 'wallet payment';\n                            output.paymentRemittance = {};\n                            // senderIdentityKey\n                            const senderIdentityKeyBytes = paramsReader.read(33);\n                            output.paymentRemittance.senderIdentityKey = Utils.toHex(senderIdentityKeyBytes);\n                            // derivationPrefix\n                            const derivationPrefixLength = paramsReader.readVarIntNum();\n                            const derivationPrefixBytes = paramsReader.read(derivationPrefixLength);\n                            output.paymentRemittance.derivationPrefix = Utils.toBase64(derivationPrefixBytes);\n                            // derivationSuffix\n                            const derivationSuffixLength = paramsReader.readVarIntNum();\n                            const derivationSuffixBytes = paramsReader.read(derivationSuffixLength);\n                            output.paymentRemittance.derivationSuffix = Utils.toBase64(derivationSuffixBytes);\n                        }\n                        else if (protocolFlag === 2) {\n                            output.protocol = 'basket insertion';\n                            output.insertionRemittance = {};\n                            // basket\n                            const basketLength = paramsReader.readVarIntNum();\n                            const basketBytes = paramsReader.read(basketLength);\n                            output.insertionRemittance.basket = Utils.toUTF8(basketBytes);\n                            // customInstructions\n                            const customInstructionsLength = paramsReader.readVarIntNum();\n                            if (customInstructionsLength >= 0) {\n                                const customInstructionsBytes = paramsReader.read(customInstructionsLength);\n                                output.insertionRemittance.customInstructions = Utils.toUTF8(customInstructionsBytes);\n                            }\n                            // tags\n                            const tagsLength = paramsReader.readVarIntNum();\n                            if (tagsLength > 0) {\n                                output.insertionRemittance.tags = [];\n                                for (let j = 0; j < tagsLength; j++) {\n                                    const tagLength = paramsReader.readVarIntNum();\n                                    const tagBytes = paramsReader.read(tagLength);\n                                    output.insertionRemittance.tags.push(Utils.toUTF8(tagBytes));\n                                }\n                            }\n                            else {\n                                output.insertionRemittance.tags = [];\n                            }\n                        }\n                        args.outputs.push(output);\n                    }\n                    const numberOfLabels = paramsReader.readVarIntNum();\n                    if (numberOfLabels >= 0) {\n                        args.labels = [];\n                        for (let i = 0; i < numberOfLabels; i++) {\n                            const labelLength = paramsReader.readVarIntNum();\n                            args.labels.push(Utils.toUTF8(paramsReader.read(labelLength)));\n                        }\n                    }\n                    const descriptionLength = paramsReader.readVarIntNum();\n                    args.description = Utils.toUTF8(paramsReader.read(descriptionLength));\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    await this.wallet.internalizeAction(args, originator);\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'listOutputs': {\n                    const args = {};\n                    // Deserialize basket\n                    const basketLength = paramsReader.readVarIntNum();\n                    const basketBytes = paramsReader.read(basketLength);\n                    args.basket = Utils.toUTF8(basketBytes);\n                    // Deserialize tags\n                    const tagsLength = paramsReader.readVarIntNum();\n                    if (tagsLength > 0) {\n                        args.tags = [];\n                        for (let i = 0; i < tagsLength; i++) {\n                            const tagLength = paramsReader.readVarIntNum();\n                            const tagBytes = paramsReader.read(tagLength);\n                            args.tags.push(Utils.toUTF8(tagBytes));\n                        }\n                    }\n                    else {\n                        args.tags = undefined;\n                    }\n                    // Deserialize tagQueryMode\n                    const tagQueryModeFlag = paramsReader.readInt8();\n                    if (tagQueryModeFlag === 1) {\n                        args.tagQueryMode = 'all';\n                    }\n                    else if (tagQueryModeFlag === 2) {\n                        args.tagQueryMode = 'any';\n                    }\n                    else {\n                        args.tagQueryMode = undefined;\n                    }\n                    // Deserialize include\n                    const includeFlag = paramsReader.readInt8();\n                    if (includeFlag === 1) {\n                        args.include = 'locking scripts';\n                    }\n                    else if (includeFlag === 2) {\n                        args.include = 'entire transactions';\n                    }\n                    else {\n                        args.include = undefined;\n                    }\n                    // Deserialize includeCustomInstructions\n                    const includeCustomInstructionsFlag = paramsReader.readInt8();\n                    if (includeCustomInstructionsFlag === -1) {\n                        args.includeCustomInstructions = undefined;\n                    }\n                    else {\n                        args.includeCustomInstructions =\n                            includeCustomInstructionsFlag === 1;\n                    }\n                    // Deserialize includeTags\n                    const includeTagsFlag = paramsReader.readInt8();\n                    if (includeTagsFlag === -1) {\n                        args.includeTags = undefined;\n                    }\n                    else {\n                        args.includeTags = includeTagsFlag === 1;\n                    }\n                    // Deserialize includeLabels\n                    const includeLabelsFlag = paramsReader.readInt8();\n                    if (includeLabelsFlag === -1) {\n                        args.includeLabels = undefined;\n                    }\n                    else {\n                        args.includeLabels = includeLabelsFlag === 1;\n                    }\n                    // Deserialize limit\n                    const limit = paramsReader.readVarIntNum();\n                    if (limit >= 0) {\n                        args.limit = limit;\n                    }\n                    else {\n                        args.limit = undefined;\n                    }\n                    // Deserialize offset\n                    const offset = paramsReader.readVarIntNum();\n                    if (offset >= 0) {\n                        args.offset = offset;\n                    }\n                    else {\n                        args.offset = undefined;\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const listOutputsResult = await this.wallet.listOutputs(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // totalOutputs\n                    resultWriter.writeVarIntNum(listOutputsResult.totalOutputs);\n                    // BEEF length and BEEF or -1\n                    if (listOutputsResult.BEEF != null) {\n                        resultWriter.writeVarIntNum(listOutputsResult.BEEF.length);\n                        resultWriter.write(listOutputsResult.BEEF);\n                    }\n                    else {\n                        resultWriter.writeVarIntNum(-1);\n                    }\n                    // outputs\n                    for (const output of listOutputsResult.outputs) {\n                        // outpoint\n                        resultWriter.write(this.encodeOutpoint(output.outpoint));\n                        // satoshis\n                        resultWriter.writeVarIntNum(output.satoshis);\n                        // lockingScript\n                        if (output.lockingScript !== undefined) {\n                            const lockingScriptBytes = Utils.toArray(output.lockingScript, 'hex');\n                            resultWriter.writeVarIntNum(lockingScriptBytes.length);\n                            resultWriter.write(lockingScriptBytes);\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                        // customInstructions\n                        if (output.customInstructions !== undefined) {\n                            const customInstructionsBytes = Utils.toArray(output.customInstructions, 'utf8');\n                            resultWriter.writeVarIntNum(customInstructionsBytes.length);\n                            resultWriter.write(customInstructionsBytes);\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                        // tags\n                        if (output.tags !== undefined) {\n                            resultWriter.writeVarIntNum(output.tags.length);\n                            for (const tag of output.tags) {\n                                const tagBytes = Utils.toArray(tag, 'utf8');\n                                resultWriter.writeVarIntNum(tagBytes.length);\n                                resultWriter.write(tagBytes);\n                            }\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                        // labels\n                        if (output.labels !== undefined) {\n                            resultWriter.writeVarIntNum(output.labels.length);\n                            for (const label of output.labels) {\n                                const labelBytes = Utils.toArray(label, 'utf8');\n                                resultWriter.writeVarIntNum(labelBytes.length);\n                                resultWriter.write(labelBytes);\n                            }\n                        }\n                        else {\n                            resultWriter.writeVarIntNum(-1);\n                        }\n                    }\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'relinquishOutput': {\n                    const args = {};\n                    // Deserialize basket\n                    const basketLength = paramsReader.readVarIntNum();\n                    const basketBytes = paramsReader.read(basketLength);\n                    args.basket = Utils.toUTF8(basketBytes);\n                    // Deserialize outpoint\n                    args.output = this.decodeOutpoint(paramsReader);\n                    // Call the method\n                    await this.wallet.relinquishOutput(args, originator);\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'getPublicKey': {\n                    const args = {};\n                    // Deserialize identityKey flag\n                    const identityKeyFlag = paramsReader.readUInt8();\n                    args.identityKey = identityKeyFlag === 1;\n                    if (args.identityKey !== true) {\n                        // Deserialize protocolID\n                        args.protocolID = this.decodeProtocolID(paramsReader);\n                        // Deserialize keyID\n                        args.keyID = this.decodeString(paramsReader);\n                        // Deserialize counterparty\n                        args.counterparty = this.decodeCounterparty(paramsReader);\n                        // Deserialize privilege parameters\n                        const privilegedFlag = paramsReader.readInt8();\n                        if (privilegedFlag === -1) {\n                            args.privileged = undefined;\n                        }\n                        else {\n                            args.privileged = privilegedFlag === 1;\n                        }\n                        const privilegedReasonLength = paramsReader.readInt8();\n                        if (privilegedReasonLength !== -1) {\n                            const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                            args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                        }\n                        else {\n                            args.privilegedReason = undefined;\n                        }\n                        // Deserialize forSelf\n                        const forSelfFlag = paramsReader.readInt8();\n                        if (forSelfFlag === -1) {\n                            args.forSelf = undefined;\n                        }\n                        else {\n                            args.forSelf = forSelfFlag === 1;\n                        }\n                    }\n                    else {\n                        // Deserialize privilege parameters\n                        const privilegedFlag = paramsReader.readInt8();\n                        if (privilegedFlag === -1) {\n                            args.privileged = undefined;\n                        }\n                        else {\n                            args.privileged = privilegedFlag === 1;\n                        }\n                        const privilegedReasonLength = paramsReader.readInt8();\n                        if (privilegedReasonLength !== -1) {\n                            const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                            args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                        }\n                        else {\n                            args.privilegedReason = undefined;\n                        }\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const getPublicKeyResult = await this.wallet.getPublicKey(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    const publicKeyBytes = Utils.toArray(getPublicKeyResult.publicKey, 'hex');\n                    responseWriter.write(publicKeyBytes);\n                    return responseWriter.toArray();\n                }\n                case 'encrypt': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize plaintext\n                    const plaintextLength = paramsReader.readVarIntNum();\n                    args.plaintext = paramsReader.read(plaintextLength);\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const encryptResult = await this.wallet.encrypt(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(encryptResult.ciphertext);\n                    return responseWriter.toArray();\n                }\n                case 'decrypt': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize ciphertext\n                    const ciphertextLength = paramsReader.readVarIntNum();\n                    args.ciphertext = paramsReader.read(ciphertextLength);\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const decryptResult = await this.wallet.decrypt(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(decryptResult.plaintext);\n                    return responseWriter.toArray();\n                }\n                case 'createHmac': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize data\n                    const dataLength = paramsReader.readVarIntNum();\n                    args.data = paramsReader.read(dataLength);\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const createHmacResult = await this.wallet.createHmac(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(createHmacResult.hmac);\n                    return responseWriter.toArray();\n                }\n                case 'verifyHmac': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize hmac\n                    args.hmac = paramsReader.read(32);\n                    // Deserialize data\n                    const dataLength = paramsReader.readVarIntNum();\n                    args.data = paramsReader.read(dataLength);\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    await this.wallet.verifyHmac(args, originator);\n                    // Serialize the result (no data to return)\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'createSignature': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize data or hashToDirectlySign\n                    const dataTypeFlag = paramsReader.readUInt8();\n                    if (dataTypeFlag === 1) {\n                        const dataLength = paramsReader.readVarIntNum();\n                        args.data = paramsReader.read(dataLength);\n                    }\n                    else if (dataTypeFlag === 2) {\n                        args.hashToDirectlySign = paramsReader.read(32);\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const createSignatureResult = await this.wallet.createSignature(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(createSignatureResult.signature);\n                    return responseWriter.toArray();\n                }\n                case 'verifySignature': {\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Deserialize forSelf\n                    const forSelfFlag = paramsReader.readInt8();\n                    if (forSelfFlag === -1) {\n                        args.forSelf = undefined;\n                    }\n                    else {\n                        args.forSelf = forSelfFlag === 1;\n                    }\n                    // Deserialize signature\n                    const signatureLength = paramsReader.readVarIntNum();\n                    args.signature = paramsReader.read(signatureLength);\n                    // Deserialize data or hashToDirectlyVerify\n                    const dataTypeFlag = paramsReader.readUInt8();\n                    if (dataTypeFlag === 1) {\n                        const dataLength = paramsReader.readVarIntNum();\n                        args.data = paramsReader.read(dataLength);\n                    }\n                    else if (dataTypeFlag === 2) {\n                        args.hashToDirectlyVerify = paramsReader.read(32);\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    await this.wallet.verifySignature(args, originator);\n                    // Serialize the result (no data to return)\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'isAuthenticated': {\n                    // No parameters to deserialize\n                    // Call the method\n                    const isAuthenticatedResult = await this.wallet.isAuthenticated({}, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.writeUInt8(isAuthenticatedResult.authenticated ? 1 : 0);\n                    return responseWriter.toArray();\n                }\n                case 'waitForAuthentication': {\n                    // No parameters to deserialize\n                    // Call the method\n                    await this.wallet.waitForAuthentication({}, originator);\n                    // Serialize the result (authenticated is always true)\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'getHeight': {\n                    // No parameters to deserialize\n                    // Call the method\n                    const getHeightResult = await this.wallet.getHeight({}, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.writeVarIntNum(getHeightResult.height);\n                    return responseWriter.toArray();\n                }\n                case 'getHeaderForHeight': {\n                    const args = {};\n                    // Deserialize height\n                    args.height = paramsReader.readVarIntNum();\n                    // Call the method\n                    const getHeaderResult = await this.wallet.getHeaderForHeight(args, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    const headerBytes = Utils.toArray(getHeaderResult.header, 'hex');\n                    responseWriter.write(headerBytes);\n                    return responseWriter.toArray();\n                }\n                case 'getNetwork': {\n                    // No parameters to deserialize\n                    // Call the method\n                    const getNetworkResult = await this.wallet.getNetwork({}, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.writeUInt8(getNetworkResult.network === 'mainnet' ? 0 : 1);\n                    return responseWriter.toArray();\n                }\n                case 'getVersion': {\n                    // No parameters to deserialize\n                    // Call the method\n                    const getVersionResult = await this.wallet.getVersion({}, originator);\n                    // Serialize the result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    const versionBytes = Utils.toArray(getVersionResult.version, 'utf8');\n                    responseWriter.write(versionBytes);\n                    return responseWriter.toArray();\n                }\n                case 'revealCounterpartyKeyLinkage': {\n                    const args = {};\n                    // Read privileged parameters\n                    const privilegedFlag = paramsReader.readInt8();\n                    if (privilegedFlag === -1) {\n                        args.privileged = undefined;\n                    }\n                    else {\n                        args.privileged = privilegedFlag === 1;\n                    }\n                    const privilegedReasonLength = paramsReader.readInt8();\n                    if (privilegedReasonLength === -1) {\n                        args.privilegedReason = undefined;\n                    }\n                    else {\n                        const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                        args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                    }\n                    // Read counterparty public key\n                    const counterpartyBytes = paramsReader.read(33);\n                    args.counterparty = Utils.toHex(counterpartyBytes);\n                    // Read verifier public key\n                    const verifierBytes = paramsReader.read(33);\n                    args.verifier = Utils.toHex(verifierBytes);\n                    // Call the method\n                    const revealResult = await this.wallet.revealCounterpartyKeyLinkage(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // Write prover\n                    resultWriter.write(Utils.toArray(revealResult.prover, 'hex'));\n                    // Write verifier\n                    resultWriter.write(Utils.toArray(revealResult.verifier, 'hex'));\n                    // Write counterparty\n                    resultWriter.write(Utils.toArray(revealResult.counterparty, 'hex'));\n                    // Write revelationTime\n                    const revelationTimeBytes = Utils.toArray(revealResult.revelationTime, 'utf8');\n                    resultWriter.writeVarIntNum(revelationTimeBytes.length);\n                    resultWriter.write(revelationTimeBytes);\n                    // Write encryptedLinkage\n                    resultWriter.writeVarIntNum(revealResult.encryptedLinkage.length);\n                    resultWriter.write(revealResult.encryptedLinkage);\n                    // Write encryptedLinkageProof\n                    resultWriter.writeVarIntNum(revealResult.encryptedLinkageProof.length);\n                    resultWriter.write(revealResult.encryptedLinkageProof);\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'revealSpecificKeyLinkage': {\n                    // Deserialize key-related parameters and privileged parameters\n                    const args = this.decodeKeyRelatedParams(paramsReader);\n                    // Read verifier public key\n                    const verifierBytes = paramsReader.read(33);\n                    args.verifier = Utils.toHex(verifierBytes);\n                    // Call the method\n                    const revealResult = await this.wallet.revealSpecificKeyLinkage(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // Write prover\n                    resultWriter.write(Utils.toArray(revealResult.prover, 'hex'));\n                    // Write verifier\n                    resultWriter.write(Utils.toArray(revealResult.verifier, 'hex'));\n                    // Write counterparty\n                    resultWriter.write(Utils.toArray(revealResult.counterparty, 'hex'));\n                    // Write securityLevel\n                    resultWriter.writeUInt8(revealResult.protocolID[0]);\n                    // Write protocol string\n                    const protocolBytesOut = Utils.toArray(revealResult.protocolID[1], 'utf8');\n                    resultWriter.writeVarIntNum(protocolBytesOut.length);\n                    resultWriter.write(protocolBytesOut);\n                    // Write keyID\n                    const keyIDBytesOut = Utils.toArray(revealResult.keyID, 'utf8');\n                    resultWriter.writeVarIntNum(keyIDBytesOut.length);\n                    resultWriter.write(keyIDBytesOut);\n                    // Write encryptedLinkage\n                    resultWriter.writeVarIntNum(revealResult.encryptedLinkage.length);\n                    resultWriter.write(revealResult.encryptedLinkage);\n                    // Write encryptedLinkageProof\n                    resultWriter.writeVarIntNum(revealResult.encryptedLinkageProof.length);\n                    resultWriter.write(revealResult.encryptedLinkageProof);\n                    // Write proofType\n                    resultWriter.writeUInt8(revealResult.proofType);\n                    // Return success code and result\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'acquireCertificate': {\n                    const args = {};\n                    // Read args.type\n                    const typeBytes = paramsReader.read(32);\n                    args.type = Utils.toBase64(typeBytes);\n                    // args.certifier\n                    const certifierBytes = paramsReader.read(33);\n                    args.certifier = Utils.toHex(certifierBytes);\n                    // Read fields\n                    const fieldsLength = paramsReader.readVarIntNum();\n                    args.fields = {};\n                    for (let i = 0; i < fieldsLength; i++) {\n                        const fieldNameLength = paramsReader.readVarIntNum();\n                        const fieldNameBytes = paramsReader.read(fieldNameLength);\n                        const fieldName = Utils.toUTF8(fieldNameBytes);\n                        const fieldValueLength = paramsReader.readVarIntNum();\n                        const fieldValueBytes = paramsReader.read(fieldValueLength);\n                        const fieldValue = Utils.toUTF8(fieldValueBytes);\n                        args.fields[fieldName] = fieldValue;\n                    }\n                    // Read privileged parameters\n                    const privilegedFlag = paramsReader.readInt8();\n                    if (privilegedFlag === -1) {\n                        args.privileged = undefined;\n                    }\n                    else {\n                        args.privileged = privilegedFlag === 1;\n                    }\n                    const privilegedReasonLength = paramsReader.readInt8();\n                    if (privilegedReasonLength === -1) {\n                        args.privilegedReason = undefined;\n                    }\n                    else {\n                        const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                        args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                    }\n                    // Read acquisitionProtocol\n                    const acquisitionProtocolFlag = paramsReader.readUInt8();\n                    args.acquisitionProtocol =\n                        acquisitionProtocolFlag === 1 ? 'direct' : 'issuance';\n                    if (args.acquisitionProtocol === 'direct') {\n                        // args.serialNumber\n                        const serialNumberBytes = paramsReader.read(32);\n                        args.serialNumber = Utils.toBase64(serialNumberBytes);\n                        // args.revocationOutpoint\n                        args.revocationOutpoint = this.decodeOutpoint(paramsReader);\n                        // args.signature\n                        const signatureLength = paramsReader.readVarIntNum();\n                        const signatureBytes = paramsReader.read(signatureLength);\n                        args.signature = Utils.toHex(signatureBytes);\n                        // args.keyringRevealer\n                        const keyringRevealerIdentifier = paramsReader.readUInt8();\n                        if (keyringRevealerIdentifier === 11) {\n                            args.keyringRevealer = 'certifier';\n                        }\n                        else {\n                            const keyringRevealerBytes = [keyringRevealerIdentifier].concat(paramsReader.read(32));\n                            args.keyringRevealer = Utils.toHex(keyringRevealerBytes);\n                        }\n                        // args.keyringForSubject\n                        const keyringEntriesLength = paramsReader.readVarIntNum();\n                        args.keyringForSubject = {};\n                        for (let i = 0; i < keyringEntriesLength; i++) {\n                            const fieldKeyLength = paramsReader.readVarIntNum();\n                            const fieldKeyBytes = paramsReader.read(fieldKeyLength);\n                            const fieldKey = Utils.toUTF8(fieldKeyBytes);\n                            const fieldValueLength = paramsReader.readVarIntNum();\n                            const fieldValueBytes = paramsReader.read(fieldValueLength);\n                            const fieldValue = Utils.toBase64(fieldValueBytes);\n                            args.keyringForSubject[fieldKey] = fieldValue;\n                        }\n                    }\n                    else {\n                        // args.certifierUrl\n                        const certifierUrlLength = paramsReader.readVarIntNum();\n                        const certifierUrlBytes = paramsReader.read(certifierUrlLength);\n                        args.certifierUrl = Utils.toUTF8(certifierUrlBytes);\n                    }\n                    // Call the method\n                    const acquireResult = await this.wallet.acquireCertificate(args, originator);\n                    // Serialize the certificate (assuming Certificate class is available)\n                    const cert = new Certificate(acquireResult.type, acquireResult.serialNumber, acquireResult.subject, acquireResult.certifier, acquireResult.revocationOutpoint, acquireResult.fields, acquireResult.signature);\n                    const certBin = cert.toBinary();\n                    // Return success code and certificate binary\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(certBin);\n                    return responseWriter.toArray();\n                }\n                case 'listCertificates': {\n                    const args = {};\n                    // Read certifiers\n                    const certifiersLength = paramsReader.readVarIntNum();\n                    args.certifiers = [];\n                    for (let i = 0; i < certifiersLength; i++) {\n                        const certifierBytes = paramsReader.read(33);\n                        args.certifiers.push(Utils.toHex(certifierBytes));\n                    }\n                    // Read types\n                    const typesLength = paramsReader.readVarIntNum();\n                    args.types = [];\n                    for (let i = 0; i < typesLength; i++) {\n                        const typeBytes = paramsReader.read(32);\n                        args.types.push(Utils.toBase64(typeBytes));\n                    }\n                    // Read limit and offset\n                    const limit = paramsReader.readVarIntNum();\n                    if (limit >= 0) {\n                        args.limit = limit;\n                    }\n                    else {\n                        args.limit = undefined;\n                    }\n                    const offset = paramsReader.readVarIntNum();\n                    if (offset >= 0) {\n                        args.offset = offset;\n                    }\n                    else {\n                        args.offset = undefined;\n                    }\n                    // Read privileged parameters\n                    const privilegedFlag = paramsReader.readInt8();\n                    if (privilegedFlag === -1) {\n                        args.privileged = undefined;\n                    }\n                    else {\n                        args.privileged = privilegedFlag === 1;\n                    }\n                    const privilegedReasonLength = paramsReader.readInt8();\n                    if (privilegedReasonLength === -1) {\n                        args.privilegedReason = undefined;\n                    }\n                    else {\n                        const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                        args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                    }\n                    // Call the method\n                    const listResult = await this.wallet.listCertificates(args, originator);\n                    // Serialize the result\n                    const resultWriter = new Utils.Writer();\n                    // totalCertificates\n                    resultWriter.writeVarIntNum(listResult.totalCertificates);\n                    // certificates\n                    for (const cert of listResult.certificates) {\n                        const certificate = new Certificate(cert.type, cert.serialNumber, cert.subject, cert.certifier, cert.revocationOutpoint, cert.fields, cert.signature);\n                        const certBin = certificate.toBinary();\n                        // Write certificate binary length and data\n                        resultWriter.writeVarIntNum(certBin.length);\n                        resultWriter.write(certBin);\n                    }\n                    // Return the response\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'proveCertificate': {\n                    const args = {};\n                    // Read certificate\n                    const cert = {};\n                    // Read type\n                    const typeBytes = paramsReader.read(32);\n                    cert.type = Utils.toBase64(typeBytes);\n                    // Read subject\n                    const subjectBytes = paramsReader.read(33);\n                    cert.subject = Utils.toHex(subjectBytes);\n                    // Read serialNumber\n                    const serialNumberBytes = paramsReader.read(32);\n                    cert.serialNumber = Utils.toBase64(serialNumberBytes);\n                    // Read certifier\n                    const certifierBytes = paramsReader.read(33);\n                    cert.certifier = Utils.toHex(certifierBytes);\n                    // Read revocationOutpoint\n                    cert.revocationOutpoint = this.decodeOutpoint(paramsReader);\n                    // Read signature\n                    const signatureLength = paramsReader.readVarIntNum();\n                    const signatureBytes = paramsReader.read(signatureLength);\n                    cert.signature = Utils.toHex(signatureBytes);\n                    // Read fields\n                    const fieldsLength = paramsReader.readVarIntNum();\n                    cert.fields = {};\n                    for (let i = 0; i < fieldsLength; i++) {\n                        const fieldNameLength = paramsReader.readVarIntNum();\n                        const fieldNameBytes = paramsReader.read(fieldNameLength);\n                        const fieldName = Utils.toUTF8(fieldNameBytes);\n                        const fieldValueLength = paramsReader.readVarIntNum();\n                        const fieldValueBytes = paramsReader.read(fieldValueLength);\n                        const fieldValue = Utils.toUTF8(fieldValueBytes);\n                        cert.fields[fieldName] = fieldValue;\n                    }\n                    args.certificate = cert;\n                    // Read fields to reveal\n                    const fieldsToRevealLength = paramsReader.readVarIntNum();\n                    args.fieldsToReveal = [];\n                    for (let i = 0; i < fieldsToRevealLength; i++) {\n                        const fieldNameLength = paramsReader.readVarIntNum();\n                        const fieldNameBytes = paramsReader.read(fieldNameLength);\n                        const fieldName = Utils.toUTF8(fieldNameBytes);\n                        args.fieldsToReveal.push(fieldName);\n                    }\n                    // Read verifier\n                    const verifierBytes = paramsReader.read(33);\n                    args.verifier = Utils.toHex(verifierBytes);\n                    // Read privileged parameters\n                    const privilegedFlag = paramsReader.readInt8();\n                    if (privilegedFlag === -1) {\n                        args.privileged = undefined;\n                    }\n                    else {\n                        args.privileged = privilegedFlag === 1;\n                    }\n                    const privilegedReasonLength = paramsReader.readInt8();\n                    if (privilegedReasonLength === -1) {\n                        args.privilegedReason = undefined;\n                    }\n                    else {\n                        const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n                        args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n                    }\n                    // Call the method\n                    const proveResult = await this.wallet.proveCertificate(args, originator);\n                    // Serialize keyringForVerifier\n                    const resultWriter = new Utils.Writer();\n                    const keyringEntries = Object.entries(proveResult.keyringForVerifier);\n                    resultWriter.writeVarIntNum(keyringEntries.length);\n                    for (const [fieldName, fieldValue] of keyringEntries) {\n                        const fieldNameBytes = Utils.toArray(fieldName, 'utf8');\n                        resultWriter.writeVarIntNum(fieldNameBytes.length);\n                        resultWriter.write(fieldNameBytes);\n                        const fieldValueBytes = Utils.toArray(fieldValue, 'base64');\n                        resultWriter.writeVarIntNum(fieldValueBytes.length);\n                        resultWriter.write(fieldValueBytes);\n                    }\n                    // Return the response\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(resultWriter.toArray());\n                    return responseWriter.toArray();\n                }\n                case 'relinquishCertificate': {\n                    const args = {};\n                    // Read type\n                    const typeBytes = paramsReader.read(32);\n                    args.type = Utils.toBase64(typeBytes);\n                    // Read serialNumber\n                    const serialNumberBytes = paramsReader.read(32);\n                    args.serialNumber = Utils.toBase64(serialNumberBytes);\n                    // Read certifier\n                    const certifierBytes = paramsReader.read(33);\n                    args.certifier = Utils.toHex(certifierBytes);\n                    // Call the method\n                    await this.wallet.relinquishCertificate(args, originator);\n                    // Return success code\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    return responseWriter.toArray();\n                }\n                case 'discoverByIdentityKey': {\n                    const args = {};\n                    // Read identityKey\n                    const identityKeyBytes = paramsReader.read(33);\n                    args.identityKey = Utils.toHex(identityKeyBytes);\n                    // Read limit and offset\n                    const limit = paramsReader.readVarIntNum();\n                    if (limit >= 0) {\n                        args.limit = limit;\n                    }\n                    else {\n                        args.limit = undefined;\n                    }\n                    const offset = paramsReader.readVarIntNum();\n                    if (offset >= 0) {\n                        args.offset = offset;\n                    }\n                    else {\n                        args.offset = undefined;\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const discoverResult = await this.wallet.discoverByIdentityKey(args, originator);\n                    // Serialize the result\n                    const result = this.serializeDiscoveryResult(discoverResult);\n                    // Return the response\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(result);\n                    return responseWriter.toArray();\n                }\n                case 'discoverByAttributes': {\n                    const args = {};\n                    // Read attributes\n                    const attributesLength = paramsReader.readVarIntNum();\n                    args.attributes = {};\n                    for (let i = 0; i < attributesLength; i++) {\n                        const fieldKeyLength = paramsReader.readVarIntNum();\n                        const fieldKeyBytes = paramsReader.read(fieldKeyLength);\n                        const fieldKey = Utils.toUTF8(fieldKeyBytes);\n                        const fieldValueLength = paramsReader.readVarIntNum();\n                        const fieldValueBytes = paramsReader.read(fieldValueLength);\n                        const fieldValue = Utils.toUTF8(fieldValueBytes);\n                        args.attributes[fieldKey] = fieldValue;\n                    }\n                    // Read limit and offset\n                    const limit = paramsReader.readVarIntNum();\n                    if (limit >= 0) {\n                        args.limit = limit;\n                    }\n                    else {\n                        args.limit = undefined;\n                    }\n                    const offset = paramsReader.readVarIntNum();\n                    if (offset >= 0) {\n                        args.offset = offset;\n                    }\n                    else {\n                        args.offset = undefined;\n                    }\n                    // Deserialize seekPermission\n                    const seekPermission = paramsReader.readInt8();\n                    if (seekPermission >= 0) {\n                        args.seekPermission = seekPermission === 1;\n                    }\n                    else {\n                        args.seekPermission = undefined;\n                    }\n                    // Call the method\n                    const discoverResult = await this.wallet.discoverByAttributes(args, originator);\n                    // Serialize the result\n                    const result = this.serializeDiscoveryResult(discoverResult);\n                    // Return the response\n                    const responseWriter = new Utils.Writer();\n                    responseWriter.writeUInt8(0); // errorByte = 0\n                    responseWriter.write(result);\n                    return responseWriter.toArray();\n                }\n                default:\n                    throw new Error(`Method ${callName} not implemented`);\n            }\n        }\n        catch (err) {\n            const responseWriter = new Utils.Writer();\n            responseWriter.writeUInt8(typeof err.code === 'number' ? err.code : 1); // errorCode = 1 (generic error)\n            // Serialize the error message\n            const errorMessage = typeof err.message === 'string' ? err.message : 'Unknown error';\n            const errorMessageBytes = Utils.toArray(errorMessage, 'utf8');\n            responseWriter.writeVarIntNum(errorMessageBytes.length);\n            responseWriter.write(errorMessageBytes);\n            // Serialize the stack trace\n            const stackTrace = typeof err.stack === 'string' ? err.stack : '';\n            const stackTraceBytes = Utils.toArray(stackTrace, 'utf8');\n            responseWriter.writeVarIntNum(stackTraceBytes.length);\n            responseWriter.write(stackTraceBytes);\n            return responseWriter.toArray();\n        }\n    }\n    decodeProtocolID(reader) {\n        const securityLevel = reader.readUInt8();\n        const protocolLength = reader.readVarIntNum();\n        const protocolBytes = reader.read(protocolLength);\n        const protocolString = Utils.toUTF8(protocolBytes);\n        return [securityLevel, protocolString];\n    }\n    decodeString(reader) {\n        const length = reader.readVarIntNum();\n        const bytes = reader.read(length);\n        return Utils.toUTF8(bytes);\n    }\n    decodeCounterparty(reader) {\n        const counterpartyFlag = reader.readUInt8();\n        if (counterpartyFlag === 11) {\n            return 'self';\n        }\n        else if (counterpartyFlag === 12) {\n            return 'anyone';\n        }\n        else if (counterpartyFlag === 0) {\n            return undefined;\n        }\n        else {\n            const counterpartyRemainingBytes = reader.read(32);\n            return Utils.toHex([counterpartyFlag, ...counterpartyRemainingBytes]);\n        }\n    }\n    serializeDiscoveryResult(discoverResult) {\n        const resultWriter = new Utils.Writer();\n        // totalCertificates\n        resultWriter.writeVarIntNum(discoverResult.totalCertificates);\n        // certificates\n        for (const cert of discoverResult.certificates) {\n            // Serialize certificate binary\n            const certificate = new Certificate(cert.type, cert.serialNumber, cert.subject, cert.certifier, cert.revocationOutpoint, cert.fields, cert.signature);\n            const certBin = certificate.toBinary();\n            // Write certificate binary length and data\n            resultWriter.writeVarIntNum(certBin.length);\n            resultWriter.write(certBin);\n            // Serialize certifierInfo\n            const nameBytes = Utils.toArray(cert.certifierInfo.name, 'utf8');\n            resultWriter.writeVarIntNum(nameBytes.length);\n            resultWriter.write(nameBytes);\n            const iconUrlBytes = Utils.toArray(cert.certifierInfo.iconUrl, 'utf8');\n            resultWriter.writeVarIntNum(iconUrlBytes.length);\n            resultWriter.write(iconUrlBytes);\n            const descriptionBytes = Utils.toArray(cert.certifierInfo.description, 'utf8');\n            resultWriter.writeVarIntNum(descriptionBytes.length);\n            resultWriter.write(descriptionBytes);\n            resultWriter.writeUInt8(cert.certifierInfo.trust);\n            // Serialize publiclyRevealedKeyring\n            const publicKeyringEntries = Object.entries(cert.publiclyRevealedKeyring);\n            resultWriter.writeVarIntNum(publicKeyringEntries.length);\n            for (const [fieldName, fieldValue] of publicKeyringEntries) {\n                const fieldNameBytes = Utils.toArray(fieldName, 'utf8');\n                resultWriter.writeVarIntNum(fieldNameBytes.length);\n                resultWriter.write(fieldNameBytes);\n                const fieldValueBytes = Utils.toArray(fieldValue, 'base64');\n                resultWriter.writeVarIntNum(fieldValueBytes.length);\n                resultWriter.write(fieldValueBytes);\n            }\n            // Serialize decryptedFields\n            const decryptedFieldEntries = Object.entries(cert.decryptedFields);\n            resultWriter.writeVarIntNum(decryptedFieldEntries.length);\n            for (const [fieldName, fieldValue] of decryptedFieldEntries) {\n                const fieldNameBytes = Utils.toArray(fieldName, 'utf8');\n                resultWriter.writeVarIntNum(fieldNameBytes.length);\n                resultWriter.write(fieldNameBytes);\n                const fieldValueBytes = Utils.toArray(fieldValue, 'utf8');\n                resultWriter.writeVarIntNum(fieldValueBytes.length);\n                resultWriter.write(fieldValueBytes);\n            }\n        }\n        return resultWriter.toArray();\n    }\n    decodeKeyRelatedParams(paramsReader) {\n        const args = {};\n        // Read protocolID\n        args.protocolID = this.decodeProtocolID(paramsReader);\n        // Read keyID\n        const keyIDLength = paramsReader.readVarIntNum();\n        const keyIDBytes = paramsReader.read(keyIDLength);\n        args.keyID = Utils.toUTF8(keyIDBytes);\n        // Read counterparty\n        args.counterparty = this.decodeCounterparty(paramsReader);\n        // Read privileged parameters\n        const privilegedFlag = paramsReader.readInt8();\n        if (privilegedFlag === -1) {\n            args.privileged = undefined;\n        }\n        else {\n            args.privileged = privilegedFlag === 1;\n        }\n        const privilegedReasonLength = paramsReader.readInt8();\n        if (privilegedReasonLength === -1) {\n            args.privilegedReason = undefined;\n        }\n        else {\n            const privilegedReasonBytes = paramsReader.read(privilegedReasonLength);\n            args.privilegedReason = Utils.toUTF8(privilegedReasonBytes);\n        }\n        return args;\n    }\n}\n//# sourceMappingURL=WalletWireProcessor.js.map","import Certificate from './Certificate.js';\nimport * as Utils from '../../primitives/utils.js';\nimport SymmetricKey from '../../primitives/SymmetricKey.js';\nimport Random from '../../primitives/Random.js';\n/**\n * MasterCertificate extends the base Certificate class to manage a master keyring, enabling the creation of verifiable certificates.\n *\n * It allows for the selective disclosure of certificate fields by creating a `VerifiableCertificate` for a specific verifier.\n * The `MasterCertificate` can securely decrypt each master key and re-encrypt it for a verifier, creating a customized\n * keyring containing only the keys necessary for the verifier to access designated fields.\n *\n */\nexport class MasterCertificate extends Certificate {\n    masterKeyring;\n    constructor(type, serialNumber, subject, certifier, revocationOutpoint, fields, masterKeyring, signature) {\n        super(type, serialNumber, subject, certifier, revocationOutpoint, fields, signature);\n        // Ensure every field in `fields` is a string and has a corresponding key in `masterKeyring`\n        for (const fieldName of Object.keys(fields)) {\n            if (masterKeyring[fieldName] === undefined || masterKeyring[fieldName] === '') {\n                throw new Error(`Master keyring must contain a value for every field. Missing or empty key for field: \"${fieldName}\".`);\n            }\n        }\n        this.masterKeyring = masterKeyring;\n    }\n    /**\n     * Encrypts certificate fields for a subject and generates a master keyring.\n     * This method returns a master keyring tied to a specific certifier or subject who will validate\n     * and sign off on the fields, along with the encrypted certificate fields.\n     *\n     * @param {ProtoWallet} creatorWallet - The wallet of the creator responsible for encrypting the fields.\n     * @param {WalletCounterparty} certifierOrSubject - The certifier or subject who will validate the certificate fields.\n     * @param {Record<CertificateFieldNameUnder50Bytes, string>} fields - A record of certificate field names (under 50 bytes) mapped to their values.\n     * @param {BooleanDefaultFalse} [privileged] - Whether this is a privileged request.\n     * @param {DescriptionString5to50Bytes} [privilegedReason] - Reason provided for privileged access, required if this is a privileged operation.   *\n     * @returns {Promise<CreateCertificateFieldsResult>} A promise resolving to an object containing:\n     *   - `certificateFields` {Record<CertificateFieldNameUnder50Bytes, Base64String>}:\n     *     The encrypted certificate fields.\n     *   - `masterKeyring` {Record<CertificateFieldNameUnder50Bytes, Base64String>}:\n     *     The master keyring containing encrypted revelation keys for each field.\n     */\n    static async createCertificateFields(creatorWallet, certifierOrSubject, fields, privileged, privilegedReason) {\n        const certificateFields = {};\n        const masterKeyring = {};\n        for (const [fieldName, fieldValue] of Object.entries(fields)) {\n            const fieldSymmetricKey = SymmetricKey.fromRandom();\n            const encryptedFieldValue = fieldSymmetricKey.encrypt(Utils.toArray(fieldValue, 'utf8'));\n            certificateFields[fieldName] = Utils.toBase64(encryptedFieldValue);\n            const { ciphertext: encryptedFieldRevelationKey } = await creatorWallet.encrypt({\n                plaintext: fieldSymmetricKey.toArray(),\n                ...Certificate.getCertificateFieldEncryptionDetails(fieldName),\n                counterparty: certifierOrSubject,\n                privileged,\n                privilegedReason\n            });\n            masterKeyring[fieldName] = Utils.toBase64(encryptedFieldRevelationKey);\n        }\n        return {\n            certificateFields,\n            masterKeyring\n        };\n    }\n    /**\n     * Creates a keyring for a verifier, enabling them to decrypt specific certificate fields.\n     * This method decrypts the master field keys for the specified fields and re-encrypts them\n     * for the verifier's identity key. The result is a keyring containing the keys necessary\n     * for the verifier to access the designated fields.\n     *\n     * @param {ProtoWallet} subjectWallet - The wallet instance of the subject, used to decrypt and re-encrypt field keys.\n     * @param {WalletCounterparty} verifier - The verifier who will receive access to the selectively revealed fields. Can be an identity key as hex, 'anyone', or 'self'.\n     * @param {string[]} fieldsToReveal - An array of field names to be revealed to the verifier. Must be a subset of the certificate's fields.\n     * @param {string} [originator] - Optional originator identifier, used if additional context is needed for decryption and encryption operations.\n     * @returns {Promise<Record<CertificateFieldNameUnder50Bytes, string>>} - A keyring mapping field names to encrypted field revelation keys, allowing the verifier to decrypt specified fields.\n     * @param {BooleanDefaultFalse} [privileged] - Whether this is a privileged request.\n     * @param {DescriptionString5to50Bytes} [privilegedReason] - Reason provided for privileged access, required if this is a privileged operation.   *\n     * @throws {Error} Throws an error if:\n     *   - fieldsToReveal is not an array of strings.\n     *   - A field in `fieldsToReveal` does not exist in the certificate.\n     *   - The decrypted master field key fails to decrypt the corresponding field (indicating an invalid key).\n     */\n    static async createKeyringForVerifier(subjectWallet, certifier, verifier, fields, fieldsToReveal, masterKeyring, serialNumber, privileged, privilegedReason) {\n        if (!Array.isArray(fieldsToReveal)) {\n            throw new Error('fieldsToReveal must be an array of strings');\n        }\n        const fieldRevelationKeyring = {};\n        for (const fieldName of fieldsToReveal) {\n            // Make sure that fields to reveal is a subset of the certificate fields\n            if (fields[fieldName] === undefined || fields[fieldName] === null || fields[fieldName] === '') {\n                throw new Error(`Fields to reveal must be a subset of the certificate fields. Missing the \"${fieldName}\" field.`);\n            }\n            // Decrypt the master field key and verify that derived key actually decrypts requested field\n            const masterFieldKey = (await this.decryptField(subjectWallet, masterKeyring, fieldName, fields[fieldName], certifier, privileged, privilegedReason)).fieldRevelationKey;\n            // Encrypt derived fieldRevelationKey for verifier\n            const { ciphertext: encryptedFieldRevelationKey } = await subjectWallet.encrypt({\n                plaintext: masterFieldKey,\n                ...Certificate.getCertificateFieldEncryptionDetails(fieldName, serialNumber),\n                counterparty: verifier,\n                privileged,\n                privilegedReason\n            });\n            // Add encryptedFieldRevelationKey to fieldRevelationKeyring\n            fieldRevelationKeyring[fieldName] = Utils.toBase64(encryptedFieldRevelationKey);\n        }\n        // Return the field revelation keyring which can be used to create a verifiable certificate for a verifier.\n        return fieldRevelationKeyring;\n    }\n    /**\n     * Issues a new MasterCertificate for a specified subject.\n     *\n     * This method generates a certificate containing encrypted fields and a keyring\n     * for the subject to decrypt all fields. Each field is encrypted with a randomly\n     * generated symmetric key, which is then encrypted for the subject. The certificate\n     * can also includes a revocation outpoint to manage potential revocation.\n     *\n     * @param {ProtoWallet} certifierWallet - The wallet of the certifier, used to sign the certificate and encrypt field keys.\n     * @param {WalletCounterparty} subject - The subject for whom the certificate is issued.\n     * @param {Record<CertificateFieldNameUnder50Bytes, string>} fields - Unencrypted certificate fields to include, with their names and values.\n     * @param {string} certificateType - The type of certificate being issued.\n     * @param {function(string, Record<CertificateFieldNameUnder50Bytes, string>?): Promise<string>} getRevocationOutpoint -\n     *   Optional function to obtain a revocation outpoint for the certificate. Defaults to a placeholder.\n     * @param {function(string): Promise<void>} updateProgress - Optional callback for reporting progress updates during the operation. Defaults to a no-op.\n     * @returns {Promise<MasterCertificate>} - A signed MasterCertificate instance containing the encrypted fields and subject specific keyring.\n     *\n     * @throws {Error} Throws an error if any operation (e.g., encryption, signing) fails during certificate issuance.\n     */\n    static async issueCertificateForSubject(certifierWallet, subject, fields, certificateType, getRevocationOutpoint = async (_serial) => {\n        void _serial; // Explicitly acknowledge unused parameter\n        return 'Certificate revocation not tracked.';\n    }, serialNumber) {\n        // 1. Generate a random serialNumber if not provided\n        const finalSerialNumber = serialNumber ?? Utils.toBase64(Random(32));\n        // 2. Create encrypted certificate fields and associated master keyring\n        const { certificateFields, masterKeyring } = await this.createCertificateFields(certifierWallet, subject, fields);\n        // 3. Obtain a revocation outpoint\n        const revocationOutpoint = await getRevocationOutpoint(finalSerialNumber);\n        // 4. Create new MasterCertificate instance\n        const certificate = new MasterCertificate(certificateType, finalSerialNumber, subject, (await certifierWallet.getPublicKey({ identityKey: true })).publicKey, revocationOutpoint, certificateFields, masterKeyring);\n        // 5. Sign and return the new MasterCertificate certifying the subject.\n        await certificate.sign(certifierWallet);\n        return certificate;\n    }\n    /**\n     * Decrypts all fields in the MasterCertificate using the subject's or certifier's wallet.\n     *\n     * This method allows the subject or certifier to decrypt the `masterKeyring` and retrieve\n     * the encryption keys for each field, which are then used to decrypt the corresponding field values.\n     * The counterparty used for decryption depends on how the certificate fields were created:\n     * - If the certificate is self-signed, the counterparty should be set to 'self'.\n     * - Otherwise, the counterparty should always be the other party involved in the certificate issuance process (the subject or certifier).\n     *\n     * @param {ProtoWallet} subjectOrCertifierWallet - The wallet of the subject or certifier, used to decrypt the master keyring and field values.\n     * @param {Record<CertificateFieldNameUnder50Bytes, Base64String>} masterKeyring - A record containing encrypted keys for each field.\n     * @param {Record<CertificateFieldNameUnder50Bytes, Base64String>} fields - A record of encrypted field names and their values.\n     * @param {WalletCounterparty} counterparty - The counterparty responsible for creating or signing the certificate. For self-signed certificates, use 'self'.\n     * @param {BooleanDefaultFalse} [privileged] - Whether this is a privileged request.\n     * @param {DescriptionString5to50Bytes} [privilegedReason] - Reason provided for privileged access, required if this is a privileged operation.\n     * @returns {Promise<Record<CertificateFieldNameUnder50Bytes, string>>} A promise resolving to a record of field names and their decrypted values in plaintext.\n     *\n     * @throws {Error} Throws an error if the `masterKeyring` is invalid or if decryption fails for any field.\n     */\n    static async decryptFields(subjectOrCertifierWallet, masterKeyring, fields, counterparty, privileged, privilegedReason) {\n        if (masterKeyring == null || Object.keys(masterKeyring).length === 0) {\n            throw new Error('A MasterCertificate must have a valid masterKeyring!');\n        }\n        try {\n            const decryptedFields = {};\n            // Note: we want to iterate through all fields, not just masterKeyring keys/value pairs.\n            for (const fieldName of Object.keys(fields)) {\n                decryptedFields[fieldName] = (await this.decryptField(subjectOrCertifierWallet, masterKeyring, fieldName, fields[fieldName], counterparty, privileged, privilegedReason)).decryptedFieldValue;\n            }\n            return decryptedFields;\n        }\n        catch {\n            throw new Error('Failed to decrypt all master certificate fields.');\n        }\n    }\n    static async decryptField(subjectOrCertifierWallet, masterKeyring, fieldName, fieldValue, counterparty, privileged, privilegedReason) {\n        if (masterKeyring == null || Object.keys(masterKeyring).length === 0) {\n            throw new Error('A MasterCertificate must have a valid masterKeyring!');\n        }\n        try {\n            const { plaintext: fieldRevelationKey } = await subjectOrCertifierWallet.decrypt({\n                ciphertext: Utils.toArray(masterKeyring[fieldName], 'base64'),\n                ...Certificate.getCertificateFieldEncryptionDetails(fieldName),\n                counterparty,\n                privileged,\n                privilegedReason\n            });\n            const decryptedFieldValue = new SymmetricKey(fieldRevelationKey).decrypt(Utils.toArray(fieldValue, 'base64'));\n            return {\n                fieldRevelationKey,\n                decryptedFieldValue: Utils.toUTF8(decryptedFieldValue)\n            };\n        }\n        catch {\n            throw new Error('Failed to decrypt certificate field!');\n        }\n    }\n}\n//# sourceMappingURL=MasterCertificate.js.map","import SymmetricKey from '../../primitives/SymmetricKey.js';\nimport * as Utils from '../../primitives/utils.js';\nimport Certificate from './Certificate.js';\n/**\n * VerifiableCertificate extends the Certificate class, adding functionality to manage a verifier-specific keyring.\n * This keyring allows selective decryption of certificate fields for authorized verifiers.\n */\nexport class VerifiableCertificate extends Certificate {\n    keyring;\n    decryptedFields;\n    constructor(type, serialNumber, subject, certifier, revocationOutpoint, fields, keyring, signature, decryptedFields) {\n        super(type, serialNumber, subject, certifier, revocationOutpoint, fields, signature);\n        this.keyring = keyring;\n        this.decryptedFields = decryptedFields;\n    }\n    /**\n     *\n     * @param {WalletCertificate} certificate – The source certificate that was issued and signed by the certifier.\n     * @param {Record<CertificateFieldNameUnder50Bytes, string>} keyring – A allows the verifier to decrypt selected certificate fields.\n     * @returns {VerifiableCertificate} – A fully-formed instance containing the\n     *   original certificate data plus the supplied keyring.\n     */\n    static fromCertificate(certificate, keyring) {\n        return new VerifiableCertificate(certificate.type, certificate.serialNumber, certificate.subject, certificate.certifier, certificate.revocationOutpoint, certificate.fields, keyring, certificate.signature);\n    }\n    /**\n     * Decrypts selectively revealed certificate fields using the provided keyring and verifier wallet\n     * @param {ProtoWallet} verifierWallet - The wallet instance of the certificate's verifier, used to decrypt field keys.\n     * @returns {Promise<Record<CertificateFieldNameUnder50Bytes, string>>} - A promise that resolves to an object where each key is a field name and each value is the decrypted field value as a string.\n     * @param {BooleanDefaultFalse} [privileged] - Whether this is a privileged request.\n     * @param {DescriptionString5to50Bytes} [privilegedReason] - Reason provided for privileged access, required if this is a privileged operation.\n     * @throws {Error} Throws an error if any of the decryption operations fail, with a message indicating the failure context.\n     */\n    async decryptFields(verifierWallet, privileged, privilegedReason) {\n        if (this.keyring == null || Object.keys(this.keyring).length === 0) { // ✅ Explicitly check null and empty object\n            throw new Error('A keyring is required to decrypt certificate fields for the verifier.');\n        }\n        try {\n            const decryptedFields = {};\n            for (const fieldName in this.keyring) {\n                const { plaintext: fieldRevelationKey } = await verifierWallet.decrypt({\n                    ciphertext: Utils.toArray(this.keyring[fieldName], 'base64'),\n                    ...Certificate.getCertificateFieldEncryptionDetails(fieldName, this.serialNumber),\n                    counterparty: this.subject,\n                    privileged,\n                    privilegedReason\n                });\n                const fieldValue = new SymmetricKey(fieldRevelationKey).decrypt(Utils.toArray(this.fields[fieldName], 'base64'));\n                decryptedFields[fieldName] = Utils.toUTF8(fieldValue);\n            }\n            return decryptedFields;\n        }\n        catch (error) {\n            throw new Error(`Failed to decrypt selectively revealed certificate fields using keyring: ${String(error instanceof Error ? error.message : error)}`);\n        }\n    }\n}\n//# sourceMappingURL=VerifiableCertificate.js.map","//@ts-nocheck\nimport PrivateKey from '../../../primitives/PrivateKey.js';\nimport { ProtoWallet, KeyDeriver, CachedKeyDeriver } from '../../../wallet/index.js';\n// Test Mock wallet which extends ProtoWallet but still implements Wallet interface\n// Unsupported methods throw\nexport class CompletedProtoWallet extends ProtoWallet {\n    keyDeriver;\n    constructor(rootKeyOrKeyDeriver) {\n        super(rootKeyOrKeyDeriver);\n        if (rootKeyOrKeyDeriver instanceof KeyDeriver) {\n            this.keyDeriver = rootKeyOrKeyDeriver;\n        }\n        else if (typeof rootKeyOrKeyDeriver === 'string' ||\n            rootKeyOrKeyDeriver instanceof PrivateKey) {\n            this.keyDeriver = new CachedKeyDeriver(rootKeyOrKeyDeriver);\n        }\n        else {\n            throw new Error('Invalid key deriver provided');\n        }\n    }\n    async isAuthenticated() {\n        throw new Error('not implemented');\n    }\n    async waitForAuthentication() {\n        throw new Error('not implemented');\n    }\n    async getNetwork() {\n        throw new Error('not implemented');\n    }\n    async getVersion() {\n        throw new Error('not implemented');\n    }\n    async getPublicKey(args) {\n        if (args.privileged === true) {\n            throw new Error('no privilege support');\n        }\n        if (args.identityKey === true) {\n            if (this.keyDeriver === null || this.keyDeriver === undefined) {\n                throw new Error('keyDeriver is not initialized');\n            }\n            return { publicKey: this.keyDeriver.rootKey.toPublicKey().toString() };\n        }\n        else {\n            if (args.protocolID == null || typeof args.keyID !== 'string' || args.keyID.trim() === '') {\n                throw new Error('protocolID and keyID are required if identityKey is false or undefined.');\n            }\n            if (this.keyDeriver === null || this.keyDeriver === undefined) {\n                throw new Error('keyDeriver is not initialized');\n            }\n            return {\n                publicKey: this.keyDeriver\n                    .derivePublicKey(args.protocolID, args.keyID, typeof args.counterparty === 'string' && args.counterparty.trim() !== ''\n                    ? args.counterparty\n                    : 'self', Boolean(args.forSelf))\n                    .toString()\n            };\n        }\n    }\n    async createAction() {\n        throw new Error('not implemented');\n    }\n    async signAction() {\n        throw new Error('not implemented');\n    }\n    async abortAction() {\n        throw new Error('not implemented');\n    }\n    async listActions() {\n        throw new Error('not implemented');\n    }\n    async internalizeAction() {\n        throw new Error('not implemented');\n    }\n    async listOutputs() {\n        throw new Error('not implemented');\n    }\n    async relinquishOutput() {\n        throw new Error('not implemented');\n    }\n    async acquireCertificate() {\n        throw new Error('not implemented');\n    }\n    async listCertificates() {\n        throw new Error('not implemented');\n    }\n    async proveCertificate() {\n        throw new Error('not implemented');\n    }\n    async relinquishCertificate() {\n        throw new Error('not implemented');\n    }\n    async discoverByIdentityKey() {\n        throw new Error('not implemented');\n    }\n    async discoverByAttributes() {\n        throw new Error('not implemented');\n    }\n    async getHeight() {\n        throw new Error('not implemented');\n    }\n    async getHeaderForHeight() {\n        throw new Error('not implemented');\n    }\n}\n//# sourceMappingURL=CompletedProtoWallet.js.map","/**\n * Manages sessions for peers, allowing multiple concurrent sessions\n * per identity key. Primary lookup is always by `sessionNonce`.\n */\nexport class SessionManager {\n    /**\n     * Maps sessionNonce -> PeerSession\n     */\n    sessionNonceToSession;\n    /**\n     * Maps identityKey -> Set of sessionNonces\n     */\n    identityKeyToNonces;\n    constructor() {\n        this.sessionNonceToSession = new Map();\n        this.identityKeyToNonces = new Map();\n    }\n    /**\n     * Adds a session to the manager, associating it with its sessionNonce,\n     * and also with its peerIdentityKey (if any).\n     *\n     * This does NOT overwrite existing sessions for the same peerIdentityKey,\n     * allowing multiple concurrent sessions for the same peer.\n     *\n     * @param {PeerSession} session - The peer session to add.\n     */\n    addSession(session) {\n        if (typeof session.sessionNonce !== 'string') {\n            throw new Error('Invalid session: sessionNonce is required to add a session.');\n        }\n        // Use the sessionNonce as the primary key\n        this.sessionNonceToSession.set(session.sessionNonce, session);\n        // Also track it by identity key if present\n        if (typeof session.peerIdentityKey === 'string') {\n            let nonces = this.identityKeyToNonces.get(session.peerIdentityKey);\n            if (nonces == null) {\n                nonces = new Set();\n                this.identityKeyToNonces.set(session.peerIdentityKey, nonces);\n            }\n            nonces.add(session.sessionNonce);\n        }\n    }\n    /**\n     * Updates a session in the manager (primarily by re-adding it),\n     * ensuring we record the latest data (e.g., isAuthenticated, lastUpdate, etc.).\n     *\n     * @param {PeerSession} session - The peer session to update.\n     */\n    updateSession(session) {\n        // Remove the old references (if any) and re-add\n        this.removeSession(session);\n        this.addSession(session);\n    }\n    /**\n     * Retrieves a session based on a given identifier, which can be:\n     *  - A sessionNonce, or\n     *  - A peerIdentityKey.\n     *\n     * If it is a `sessionNonce`, returns that exact session.\n     * If it is a `peerIdentityKey`, returns the \"best\" (e.g. most recently updated,\n     * authenticated) session associated with that peer, if any.\n     *\n     * @param {string} identifier - The identifier for the session (sessionNonce or peerIdentityKey).\n     * @returns {PeerSession | undefined} - The matching peer session, or undefined if not found.\n     */\n    getSession(identifier) {\n        // Check if this identifier is directly a sessionNonce\n        const direct = this.sessionNonceToSession.get(identifier);\n        if (direct != null) {\n            return direct;\n        }\n        // Otherwise, interpret the identifier as an identity key\n        const nonces = this.identityKeyToNonces.get(identifier);\n        if ((nonces == null) || nonces.size === 0) {\n            return undefined;\n        }\n        // Pick the \"best\" session. One sensible approach:\n        // - Choose an authenticated session if available\n        // - Among them, pick the most recently updated\n        let best;\n        for (const nonce of nonces) {\n            const s = this.sessionNonceToSession.get(nonce);\n            if (s == null)\n                continue;\n            // We can prefer authenticated sessions\n            if (best == null) {\n                best = s;\n            }\n            else {\n                // If we want the \"most recently updated\" AND isAuthenticated\n                if ((s.lastUpdate ?? 0) > (best.lastUpdate ?? 0)) {\n                    best = s;\n                }\n            }\n        }\n        // Optionally, you could also filter out isAuthenticated===false if you only want\n        // an authenticated session. But for our usage, let's return the latest any session.\n        return best;\n    }\n    /**\n     * Removes a session from the manager by clearing all associated identifiers.\n     *\n     * @param {PeerSession} session - The peer session to remove.\n     */\n    removeSession(session) {\n        if (typeof session.sessionNonce === 'string') {\n            this.sessionNonceToSession.delete(session.sessionNonce);\n        }\n        if (typeof session.peerIdentityKey === 'string') {\n            const nonces = this.identityKeyToNonces.get(session.peerIdentityKey);\n            if (nonces != null) {\n                nonces.delete(session.sessionNonce ?? '');\n                if (nonces.size === 0) {\n                    this.identityKeyToNonces.delete(session.peerIdentityKey);\n                }\n            }\n        }\n    }\n    /**\n     * Checks if a session exists for a given identifier (either sessionNonce or identityKey).\n     *\n     * @param {string} identifier - The identifier to check.\n     * @returns {boolean} - True if the session exists, false otherwise.\n     */\n    hasSession(identifier) {\n        const direct = this.sessionNonceToSession.has(identifier);\n        if (direct)\n            return true;\n        // if not directly a nonce, interpret as identityKey\n        const nonces = this.identityKeyToNonces.get(identifier);\n        return !(nonces == null) && nonces.size > 0;\n    }\n}\n//# sourceMappingURL=SessionManager.js.map","import * as Utils from '../../primitives/utils.js';\n/**\n * Verifies a nonce derived from a wallet\n * @param nonce - A nonce to verify as a base64 string.\n * @param wallet\n * @param counterparty - The counterparty to the nonce creation. Defaults to 'self'.\n * @returns The status of the validation\n */\nexport async function verifyNonce(nonce, wallet, counterparty = 'self') {\n    // Convert nonce from base64 string to Uint8Array\n    const buffer = Utils.toArray(nonce, 'base64');\n    // Split the nonce buffer\n    const data = buffer.slice(0, 16);\n    const hmac = buffer.slice(16);\n    // Calculate the HMAC\n    const { valid } = await wallet.verifyHmac({\n        data,\n        hmac,\n        protocolID: [2, 'server hmac'],\n        keyID: Utils.toUTF8(data),\n        counterparty\n    });\n    return valid;\n}\n//# sourceMappingURL=verifyNonce.js.map","import * as Utils from '../../primitives/utils.js';\nimport Random from '../../primitives/Random.js';\n/**\n * Creates a nonce derived from a wallet\n * @param wallet\n * @param counterparty - The counterparty to the nonce creation. Defaults to 'self'.\n * @returns A random nonce derived with a wallet\n */\nexport async function createNonce(wallet, counterparty = 'self') {\n    // Generate 16 random bytes for the first half of the data\n    const firstHalf = Random(16);\n    // Create an sha256 HMAC\n    const { hmac } = await wallet.createHmac({\n        protocolID: [2, 'server hmac'],\n        keyID: Utils.toUTF8(firstHalf),\n        data: firstHalf,\n        counterparty\n    });\n    // Concatenate firstHalf and secondHalf as the nonce bytes\n    const nonceBytes = [...firstHalf, ...hmac];\n    return Utils.toBase64(nonceBytes);\n}\n//# sourceMappingURL=createNonce.js.map","import { VerifiableCertificate } from '../certificates/VerifiableCertificate.js';\n/**\n * Retrieves an array of verifiable certificates based on the request.\n *\n * @private\n * @param {RequestedCertificateSet} requestedCertificates - The set of certificates requested by the peer.\n * @param {string} verifierIdentityKey - The public key of the verifier requesting the certificates.\n * @returns {Promise<VerifiableCertificate[]>} An array of verifiable certificates.\n */\nexport const getVerifiableCertificates = async (wallet, requestedCertificates, verifierIdentityKey) => {\n    // Find matching certificates we have\n    // Note: This may return multiple certificates that match the correct type.\n    const matchingCertificates = await wallet.listCertificates({\n        certifiers: requestedCertificates.certifiers,\n        types: Object.keys(requestedCertificates.types)\n    });\n    // For each certificate requested, create a verifiable cert with selectively revealed fields\n    return await Promise.all(matchingCertificates.certificates.map(async (certificate) => {\n        const { keyringForVerifier } = await wallet.proveCertificate({\n            certificate,\n            fieldsToReveal: requestedCertificates.types[certificate.type],\n            verifier: verifierIdentityKey\n        });\n        return new VerifiableCertificate(certificate.type, certificate.serialNumber, certificate.subject, certificate.certifier, certificate.revocationOutpoint, certificate.fields, keyringForVerifier, certificate.signature);\n    }));\n};\n//# sourceMappingURL=getVerifiableCertificates.js.map","import { VerifiableCertificate } from '../certificates/VerifiableCertificate.js';\n/**\n * Validates and processes the certificates received from a peer.\n *\n * @private\n * @param {AuthMessage} message - The message containing the certificates to validate.\n * @returns {Promise<void>}\n * @throws Will throw an error if certificate validation or field decryption fails.\n */\nexport const validateCertificates = async (verifierWallet, message, certificatesRequested) => {\n    if ((message.certificates == null) || message.certificates.length === 0) {\n        throw new Error('No certificates were provided in the AuthMessage.');\n    }\n    await Promise.all(message.certificates.map(async (incomingCert) => {\n        if (incomingCert.subject !== message.identityKey) {\n            throw new Error(`The subject of one of your certificates (\"${incomingCert.subject}\") is not the same as the request sender (\"${message.identityKey}\").`);\n        }\n        // Verify Certificate structure and signature\n        const certToVerify = new VerifiableCertificate(incomingCert.type, incomingCert.serialNumber, incomingCert.subject, incomingCert.certifier, incomingCert.revocationOutpoint, incomingCert.fields, incomingCert.keyring, incomingCert.signature);\n        const isValidCert = await certToVerify.verify();\n        if (!isValidCert) {\n            throw new Error(`The signature for the certificate with serial number ${certToVerify.serialNumber} is invalid!`);\n        }\n        // Check if the certificate matches requested certifiers, types, and fields\n        if (certificatesRequested != null) {\n            const { certifiers, types } = certificatesRequested;\n            // Check certifier matches\n            if (!certifiers.includes(certToVerify.certifier)) {\n                throw new Error(`Certificate with serial number ${certToVerify.serialNumber} has an unrequested certifier: ${certToVerify.certifier}`);\n            }\n            // Check type and fields match requested\n            const requestedFields = types[certToVerify.type];\n            if (requestedFields == null) { // ✅ Explicitly check for null or undefined\n                throw new Error(`Certificate with type ${certToVerify.type} was not requested`);\n            }\n        }\n        // Attempt to decrypt fields\n        await certToVerify.decryptFields(verifierWallet);\n    }));\n};\n//# sourceMappingURL=validateCertificates.js.map","import { SessionManager } from './SessionManager.js';\nimport { createNonce, verifyNonce, getVerifiableCertificates, validateCertificates } from './utils/index.js';\nimport Random from '../primitives/Random.js';\nimport * as Utils from '../primitives/utils.js';\nconst AUTH_VERSION = '0.1';\n/**\n * Represents a peer capable of performing mutual authentication.\n * Manages sessions, handles authentication handshakes, certificate requests and responses,\n * and sending and receiving general messages over a transport layer.\n *\n * This version supports multiple concurrent sessions per peer identityKey.\n */\nexport class Peer {\n    sessionManager;\n    transport;\n    wallet;\n    certificatesToRequest;\n    onGeneralMessageReceivedCallbacks = new Map();\n    onCertificatesReceivedCallbacks = new Map();\n    onCertificateRequestReceivedCallbacks = new Map();\n    onInitialResponseReceivedCallbacks = new Map();\n    // Single shared counter for all callback types\n    callbackIdCounter = 0;\n    // Whether to auto-persist the session with the last-interacted-with peer\n    autoPersistLastSession = true;\n    // Last-interacted-with peer identity key (if the user calls toPeer with no identityKey)\n    lastInteractedWithPeer;\n    /**\n     * Creates a new Peer instance\n     *\n     * @param {WalletInterface} wallet - The wallet instance used for cryptographic operations.\n     * @param {Transport} transport - The transport mechanism used for sending and receiving messages.\n     * @param {RequestedCertificateSet} [certificatesToRequest] - Optional set of certificates to request from a peer during the initial handshake.\n     * @param {SessionManager} [sessionManager] - Optional SessionManager to be used for managing peer sessions.\n     * @param {boolean} [autoPersistLastSession] - Whether to auto-persist the session with the last-interacted-with peer. Defaults to true.\n     */\n    constructor(wallet, transport, certificatesToRequest, sessionManager, autoPersistLastSession) {\n        this.wallet = wallet;\n        this.transport = transport;\n        this.certificatesToRequest = certificatesToRequest ?? {\n            certifiers: [],\n            types: {}\n        };\n        this.transport.onData(this.handleIncomingMessage.bind(this)).catch(e => {\n            throw e;\n        });\n        this.sessionManager =\n            sessionManager != null ? sessionManager : new SessionManager();\n        if (autoPersistLastSession === false) {\n            this.autoPersistLastSession = false;\n        }\n        else {\n            this.autoPersistLastSession = true;\n        }\n    }\n    /**\n     * Sends a general message to a peer, and initiates a handshake if necessary.\n     *\n     * @param {number[]} message - The message payload to send.\n     * @param {string} [identityKey] - The identity public key of the peer. If not provided, uses lastInteractedWithPeer (if any).\n     * @param {number} [maxWaitTime] - optional max wait time in ms\n     * @returns {Promise<void>}\n     * @throws Will throw an error if the message fails to send.\n     */\n    async toPeer(message, identityKey, maxWaitTime) {\n        if (this.autoPersistLastSession &&\n            typeof this.lastInteractedWithPeer === 'string' &&\n            typeof identityKey !== 'string') {\n            identityKey = this.lastInteractedWithPeer;\n        }\n        const peerSession = await this.getAuthenticatedSession(identityKey, maxWaitTime);\n        // Prepare the general message\n        const requestNonce = Utils.toBase64(Random(32));\n        const { signature } = await this.wallet.createSignature({\n            data: message,\n            protocolID: [2, 'auth message signature'],\n            keyID: `${requestNonce} ${peerSession.peerNonce ?? ''}`,\n            counterparty: peerSession.peerIdentityKey\n        });\n        const generalMessage = {\n            version: AUTH_VERSION,\n            messageType: 'general',\n            identityKey: (await this.wallet.getPublicKey({ identityKey: true }))\n                .publicKey,\n            nonce: requestNonce,\n            yourNonce: peerSession.peerNonce,\n            payload: message,\n            signature\n        };\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        try {\n            await this.transport.send(generalMessage);\n        }\n        catch (error) {\n            const e = new Error(`Failed to send message to peer ${peerSession.peerIdentityKey ?? 'unknown'}: ${String(error.message)}`);\n            e.stack = error.stack;\n            throw e;\n        }\n    }\n    /**\n     * Sends a request for certificates to a peer.\n     * This method allows a peer to dynamically request specific certificates after\n     * an initial handshake or message has been exchanged.\n     *\n     * @param {RequestedCertificateSet} certificatesToRequest - Specifies the certifiers and types of certificates required from the peer.\n     * @param {string} [identityKey] - The identity public key of the peer. If not provided, the current or last session identity is used.\n     * @param {number} [maxWaitTime=10000] - Maximum time in milliseconds to wait for the peer session to be authenticated.\n     * @returns {Promise<void>} Resolves if the certificate request message is successfully sent.\n     * @throws Will throw an error if the peer session is not authenticated or if sending the request fails.\n     */\n    async requestCertificates(certificatesToRequest, identityKey, maxWaitTime = 10000) {\n        if (this.autoPersistLastSession &&\n            typeof this.lastInteractedWithPeer === 'string' &&\n            typeof identityKey !== 'string') {\n            identityKey = this.lastInteractedWithPeer;\n        }\n        const peerSession = await this.getAuthenticatedSession(identityKey, maxWaitTime);\n        // Prepare the message\n        const requestNonce = Utils.toBase64(Random(32));\n        const { signature } = await this.wallet.createSignature({\n            data: Utils.toArray(JSON.stringify(certificatesToRequest), 'utf8'),\n            protocolID: [2, 'auth message signature'],\n            keyID: `${requestNonce} ${peerSession.peerNonce ?? ''}`,\n            counterparty: peerSession.peerIdentityKey\n        });\n        const certRequestMessage = {\n            version: AUTH_VERSION,\n            messageType: 'certificateRequest',\n            identityKey: (await this.wallet.getPublicKey({ identityKey: true }))\n                .publicKey,\n            nonce: requestNonce,\n            initialNonce: peerSession.sessionNonce,\n            yourNonce: peerSession.peerNonce,\n            requestedCertificates: certificatesToRequest,\n            signature\n        };\n        // Update last-used timestamp\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        try {\n            await this.transport.send(certRequestMessage);\n        }\n        catch (error) {\n            throw new Error(`Failed to send certificate request message to peer ${peerSession.peerIdentityKey ?? 'unknown'}: ${String(error.message)}`);\n        }\n    }\n    /**\n     * Retrieves an authenticated session for a given peer identity. If no session exists\n     * or the session is not authenticated, initiates a handshake to create or authenticate the session.\n     *\n     * - If `identityKey` is provided, we look up any existing session for that identity key.\n     * - If none is found or not authenticated, we do a new handshake.\n     * - If `identityKey` is not provided, but we have a `lastInteractedWithPeer`, we try that key.\n     *\n     * @param {string} [identityKey] - The identity public key of the peer.\n     * @param {number} [maxWaitTime] - The maximum time in milliseconds to wait for the handshake.\n     * @returns {Promise<PeerSession>} - A promise that resolves with an authenticated `PeerSession`.\n     */\n    async getAuthenticatedSession(identityKey, maxWaitTime) {\n        if (this.transport === undefined) {\n            throw new Error('Peer transport is not connected!');\n        }\n        let peerSession;\n        if (typeof identityKey === 'string') {\n            peerSession = this.sessionManager.getSession(identityKey);\n        }\n        // If that session doesn't exist or isn't authenticated, initiate handshake\n        if ((peerSession == null) || !peerSession.isAuthenticated) {\n            // This will create a brand-new session\n            const sessionNonce = await this.initiateHandshake(identityKey, maxWaitTime);\n            // Now retrieve it by the sessionNonce\n            peerSession = this.sessionManager.getSession(sessionNonce);\n            if ((peerSession == null) || !peerSession.isAuthenticated) {\n                throw new Error('Unable to establish mutual authentication with peer!');\n            }\n        }\n        return peerSession;\n    }\n    /**\n     * Registers a callback to listen for general messages from peers.\n     *\n     * @param {(senderPublicKey: string, payload: number[]) => void} callback - The function to call when a general message is received.\n     * @returns {number} The ID of the callback listener.\n     */\n    listenForGeneralMessages(callback) {\n        const callbackID = this.callbackIdCounter++;\n        this.onGeneralMessageReceivedCallbacks.set(callbackID, callback);\n        return callbackID;\n    }\n    /**\n     * Removes a general message listener.\n     *\n     * @param {number} callbackID - The ID of the callback to remove.\n     */\n    stopListeningForGeneralMessages(callbackID) {\n        this.onGeneralMessageReceivedCallbacks.delete(callbackID);\n    }\n    /**\n     * Registers a callback to listen for certificates received from peers.\n     *\n     * @param {(senderPublicKey: string, certs: VerifiableCertificate[]) => void} callback - The function to call when certificates are received.\n     * @returns {number} The ID of the callback listener.\n     */\n    listenForCertificatesReceived(callback) {\n        const callbackID = this.callbackIdCounter++;\n        this.onCertificatesReceivedCallbacks.set(callbackID, callback);\n        return callbackID;\n    }\n    /**\n     * Cancels and unsubscribes a certificatesReceived listener.\n     *\n     * @param {number} callbackID - The ID of the certificates received callback to cancel.\n     */\n    stopListeningForCertificatesReceived(callbackID) {\n        this.onCertificatesReceivedCallbacks.delete(callbackID);\n    }\n    /**\n     * Registers a callback to listen for certificates requested from peers.\n     *\n     * @param {(requestedCertificates: RequestedCertificateSet) => void} callback - The function to call when a certificate request is received\n     * @returns {number} The ID of the callback listener.\n     */\n    listenForCertificatesRequested(callback) {\n        const callbackID = this.callbackIdCounter++;\n        this.onCertificateRequestReceivedCallbacks.set(callbackID, callback);\n        return callbackID;\n    }\n    /**\n     * Cancels and unsubscribes a certificatesRequested listener.\n     *\n     * @param {number} callbackID - The ID of the requested certificates callback to cancel.\n     */\n    stopListeningForCertificatesRequested(callbackID) {\n        this.onCertificateRequestReceivedCallbacks.delete(callbackID);\n    }\n    /**\n     * Initiates the mutual authentication handshake with a peer.\n     *\n     * @private\n     * @param {string} [identityKey] - The identity public key of the peer.\n     * @param {number} [maxWaitTime=10000] - how long to wait for handshake\n     * @returns {Promise<string>} A promise that resolves to the session nonce.\n     */\n    async initiateHandshake(identityKey, maxWaitTime = 10000) {\n        const sessionNonce = await createNonce(this.wallet); // Initial request nonce\n        // Create the preliminary session (not yet authenticated)\n        const now = Date.now();\n        this.sessionManager.addSession({\n            isAuthenticated: false,\n            sessionNonce,\n            peerIdentityKey: identityKey,\n            lastUpdate: now\n        });\n        const initialRequest = {\n            version: AUTH_VERSION,\n            messageType: 'initialRequest',\n            identityKey: (await this.wallet.getPublicKey({ identityKey: true }))\n                .publicKey,\n            initialNonce: sessionNonce,\n            requestedCertificates: this.certificatesToRequest\n        };\n        await this.transport.send(initialRequest);\n        return await this.waitForInitialResponse(sessionNonce, maxWaitTime);\n    }\n    /**\n     * Waits for the initial response from the peer after sending an initial handshake request message.\n     *\n     * @param {string} sessionNonce - The session nonce created in the initial request.\n     * @returns {Promise<string>} A promise that resolves with the session nonce when the initial response is received.\n     */\n    async waitForInitialResponse(sessionNonce, maxWaitTime = 10000) {\n        return await new Promise((resolve, reject) => {\n            const callbackID = this.listenForInitialResponse(sessionNonce, nonce => {\n                clearTimeout(timeoutHandle);\n                this.stopListeningForInitialResponses(callbackID);\n                resolve(nonce);\n            });\n            const timeoutHandle = setTimeout(() => {\n                this.stopListeningForInitialResponses(callbackID);\n                reject(new Error('Initial response timed out.'));\n            }, maxWaitTime);\n        });\n    }\n    /**\n     * Adds a listener for an initial response message matching a specific initial nonce.\n     *\n     * @private\n     * @param {string} sessionNonce - The session nonce to match.\n     * @param {(sessionNonce: string) => void} callback - The callback to invoke when the initial response is received.\n     * @returns {number} The ID of the callback listener.\n     */\n    listenForInitialResponse(sessionNonce, callback) {\n        const callbackID = this.callbackIdCounter++;\n        this.onInitialResponseReceivedCallbacks.set(callbackID, {\n            callback,\n            sessionNonce\n        });\n        return callbackID;\n    }\n    /**\n     * Removes a listener for initial responses.\n     *\n     * @private\n     * @param {number} callbackID - The ID of the callback to remove.\n     */\n    stopListeningForInitialResponses(callbackID) {\n        this.onInitialResponseReceivedCallbacks.delete(callbackID);\n    }\n    /**\n     * Handles incoming messages from the transport.\n     *\n     * @param {AuthMessage} message - The incoming message to process.\n     * @returns {Promise<void>}\n     */\n    async handleIncomingMessage(message) {\n        if (typeof message.version !== 'string' || message.version !== AUTH_VERSION) {\n            throw new Error(`Invalid or unsupported message auth version! Received: ${message.version}, expected: ${AUTH_VERSION}`);\n        }\n        switch (message.messageType) {\n            case 'initialRequest':\n                await this.processInitialRequest(message);\n                break;\n            case 'initialResponse':\n                await this.processInitialResponse(message);\n                break;\n            case 'certificateRequest':\n                await this.processCertificateRequest(message);\n                break;\n            case 'certificateResponse':\n                await this.processCertificateResponse(message);\n                break;\n            case 'general':\n                await this.processGeneralMessage(message);\n                break;\n            default:\n                throw new Error(`Unknown message type of ${String(message.messageType)} from ${String(message.identityKey)}`);\n        }\n    }\n    /**\n     * Processes an initial request message from a peer.\n     *\n     * @param {AuthMessage} message - The incoming initial request message.\n     */\n    async processInitialRequest(message) {\n        if (typeof message.identityKey !== 'string' ||\n            typeof message.initialNonce !== 'string' ||\n            message.initialNonce === '') {\n            throw new Error('Missing required fields in initialRequest message.');\n        }\n        // Create a new sessionNonce for our side\n        const sessionNonce = await createNonce(this.wallet);\n        const now = Date.now();\n        // We'll treat this as fully authenticated from *our* perspective (the responding side).\n        this.sessionManager.addSession({\n            isAuthenticated: true,\n            sessionNonce,\n            peerNonce: message.initialNonce,\n            peerIdentityKey: message.identityKey,\n            lastUpdate: now\n        });\n        // Possibly handle the peer's requested certs\n        let certificatesToInclude;\n        if ((message.requestedCertificates != null) &&\n            Array.isArray(message.requestedCertificates.certifiers) &&\n            message.requestedCertificates.certifiers.length > 0) {\n            if (this.onCertificateRequestReceivedCallbacks.size > 0) {\n                // Let the application handle it\n                this.onCertificateRequestReceivedCallbacks.forEach(cb => {\n                    cb(message.identityKey, message.requestedCertificates);\n                });\n            }\n            else {\n                // Attempt to find automatically\n                certificatesToInclude = await getVerifiableCertificates(this.wallet, message.requestedCertificates, message.identityKey);\n            }\n        }\n        // Create signature\n        const { signature } = await this.wallet.createSignature({\n            data: Utils.toArray(message.initialNonce + sessionNonce, 'base64'),\n            protocolID: [2, 'auth message signature'],\n            keyID: `${message.initialNonce} ${sessionNonce}`,\n            counterparty: message.identityKey\n        });\n        const initialResponseMessage = {\n            version: AUTH_VERSION,\n            messageType: 'initialResponse',\n            identityKey: (await this.wallet.getPublicKey({ identityKey: true }))\n                .publicKey,\n            initialNonce: sessionNonce,\n            yourNonce: message.initialNonce,\n            certificates: certificatesToInclude,\n            requestedCertificates: this.certificatesToRequest,\n            signature\n        };\n        // If we haven't interacted with a peer yet, store this identity as \"lastInteracted\"\n        if (this.lastInteractedWithPeer === undefined) {\n            this.lastInteractedWithPeer = message.identityKey;\n        }\n        // Send the response\n        await this.transport.send(initialResponseMessage);\n    }\n    /**\n     * Processes an initial response message from a peer.\n     *\n     * @private\n     * @param {AuthMessage} message - The incoming initial response message.\n     * @throws Will throw an error if nonce or signature verification fails.\n     */\n    async processInitialResponse(message) {\n        const validNonce = await verifyNonce(message.yourNonce, this.wallet);\n        if (!validNonce) {\n            throw new Error(`Initial response nonce verification failed from peer: ${message.identityKey}`);\n        }\n        // This is the session we previously created by calling initiateHandshake\n        const peerSession = this.sessionManager.getSession(message.yourNonce);\n        if (peerSession == null) {\n            throw new Error(`Peer session not found for peer: ${message.identityKey}`);\n        }\n        // Validate message signature\n        const dataToVerify = Utils.toArray((peerSession.sessionNonce ?? '') + (message.initialNonce ?? ''), 'base64');\n        const { valid } = await this.wallet.verifySignature({\n            data: dataToVerify,\n            signature: message.signature,\n            protocolID: [2, 'auth message signature'],\n            keyID: `${peerSession.sessionNonce ?? ''} ${message.initialNonce ?? ''}`,\n            counterparty: message.identityKey\n        });\n        if (!valid) {\n            throw new Error(`Unable to verify initial response signature for peer: ${message.identityKey}`);\n        }\n        // Now mark the session as authenticated\n        peerSession.peerNonce = message.initialNonce;\n        peerSession.peerIdentityKey = message.identityKey;\n        peerSession.isAuthenticated = true;\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        // If the handshake had requested certificates, validate them\n        if (this.certificatesToRequest?.certifiers?.length > 0 &&\n            message.certificates?.length > 0) {\n            await validateCertificates(this.wallet, message, this.certificatesToRequest);\n            // Notify listeners\n            this.onCertificatesReceivedCallbacks.forEach(cb => cb(message.identityKey, message.certificates));\n        }\n        // Update lastInteractedWithPeer\n        this.lastInteractedWithPeer = message.identityKey;\n        // Let the handshake wait-latch know we got our response\n        this.onInitialResponseReceivedCallbacks.forEach(entry => {\n            if (entry.sessionNonce === peerSession.sessionNonce) {\n                entry.callback(peerSession.sessionNonce);\n            }\n        });\n        // The peer might also request certificates from us\n        if ((message.requestedCertificates != null) &&\n            Array.isArray(message.requestedCertificates.certifiers) &&\n            message.requestedCertificates.certifiers.length > 0) {\n            if (this.onCertificateRequestReceivedCallbacks.size > 0) {\n                // Let the application handle it\n                this.onCertificateRequestReceivedCallbacks.forEach(cb => {\n                    cb(message.identityKey, message.requestedCertificates);\n                });\n            }\n            else {\n                // Attempt auto\n                const verifiableCertificates = await getVerifiableCertificates(this.wallet, message.requestedCertificates, message.identityKey);\n                await this.sendCertificateResponse(message.identityKey, verifiableCertificates);\n            }\n        }\n    }\n    /**\n     * Processes an incoming certificate request message from a peer.\n     * Verifies nonce/signature and then possibly sends a certificateResponse.\n     *\n     * @param {AuthMessage} message - The certificate request message received from the peer.\n     * @throws {Error} if nonce or signature is invalid.\n     */\n    async processCertificateRequest(message) {\n        const validNonce = await verifyNonce(message.yourNonce, this.wallet);\n        if (!validNonce) {\n            throw new Error(`Unable to verify nonce for certificate request message from: ${message.identityKey}`);\n        }\n        const peerSession = this.sessionManager.getSession(message.yourNonce);\n        if (peerSession == null) {\n            throw new Error(`Session not found for nonce: ${message.yourNonce}`);\n        }\n        const { valid } = await this.wallet.verifySignature({\n            data: Utils.toArray(JSON.stringify(message.requestedCertificates), 'utf8'),\n            signature: message.signature,\n            protocolID: [2, 'auth message signature'],\n            keyID: `${message.nonce ?? ''} ${peerSession.sessionNonce ?? ''}`,\n            counterparty: peerSession.peerIdentityKey\n        });\n        if (!valid) {\n            throw new Error(`Invalid signature in certificate request message from ${peerSession.peerIdentityKey}`);\n        }\n        // Update usage\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        if ((message.requestedCertificates != null) &&\n            Array.isArray(message.requestedCertificates.certifiers) &&\n            message.requestedCertificates.certifiers.length > 0) {\n            if (this.onCertificateRequestReceivedCallbacks.size > 0) {\n                // Let the application handle it\n                this.onCertificateRequestReceivedCallbacks.forEach(cb => {\n                    cb(message.identityKey, message.requestedCertificates);\n                });\n            }\n            else {\n                // Attempt auto\n                const verifiableCertificates = await getVerifiableCertificates(this.wallet, message.requestedCertificates, message.identityKey);\n                await this.sendCertificateResponse(message.identityKey, verifiableCertificates);\n            }\n        }\n    }\n    /**\n     * Sends a certificate response message containing the specified certificates to a peer.\n     *\n     * @param {string} verifierIdentityKey - The identity key of the peer requesting the certificates.\n     * @param {VerifiableCertificate[]} certificates - The list of certificates to include in the response.\n     * @throws Will throw an error if the transport fails to send the message.\n     */\n    async sendCertificateResponse(verifierIdentityKey, certificates) {\n        const peerSession = await this.getAuthenticatedSession(verifierIdentityKey);\n        const requestNonce = Utils.toBase64(Random(32));\n        const { signature } = await this.wallet.createSignature({\n            data: Utils.toArray(JSON.stringify(certificates), 'utf8'),\n            protocolID: [2, 'auth message signature'],\n            keyID: `${requestNonce} ${peerSession.peerNonce ?? ''}`,\n            counterparty: peerSession.peerIdentityKey\n        });\n        const certificateResponse = {\n            version: AUTH_VERSION,\n            messageType: 'certificateResponse',\n            identityKey: (await this.wallet.getPublicKey({ identityKey: true }))\n                .publicKey,\n            nonce: requestNonce,\n            initialNonce: peerSession.sessionNonce,\n            yourNonce: peerSession.peerNonce,\n            certificates,\n            signature\n        };\n        // Update usage\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        try {\n            await this.transport.send(certificateResponse);\n        }\n        catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error(`Failed to send certificate response message to peer ${peerSession.peerIdentityKey ?? 'unknown'}: ${errorMessage}`);\n        }\n    }\n    /**\n     * Processes a certificate response message from a peer.\n     *\n     * @private\n     * @param {AuthMessage} message - The incoming certificate response message.\n     * @throws Will throw an error if nonce verification or signature verification fails.\n     */\n    async processCertificateResponse(message) {\n        const validNonce = await verifyNonce(message.yourNonce, this.wallet);\n        if (!validNonce) {\n            throw new Error(`Unable to verify nonce for certificate response from: ${message.identityKey}`);\n        }\n        const peerSession = this.sessionManager.getSession(message.yourNonce);\n        if (peerSession == null) {\n            throw new Error(`Session not found for nonce: ${message.yourNonce}`);\n        }\n        // Validate message signature\n        const { valid } = await this.wallet.verifySignature({\n            data: Utils.toArray(JSON.stringify(message.certificates), 'utf8'),\n            signature: message.signature,\n            protocolID: [2, 'auth message signature'],\n            keyID: `${message.nonce ?? ''} ${peerSession.sessionNonce ?? ''}`,\n            counterparty: message.identityKey\n        });\n        if (!valid) {\n            throw new Error(`Unable to verify certificate response signature for peer: ${message.identityKey}`);\n        }\n        // We also handle optional validation if there's a requestedCertificates field\n        await validateCertificates(this.wallet, message, message.requestedCertificates);\n        // Notify any listeners\n        this.onCertificatesReceivedCallbacks.forEach(cb => {\n            cb(message.identityKey, message.certificates ?? []);\n        });\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n    }\n    /**\n     * Processes a general message from a peer.\n     *\n     * @private\n     * @param {AuthMessage} message - The incoming general message.\n     * @throws Will throw an error if nonce or signature verification fails.\n     */\n    async processGeneralMessage(message) {\n        const validNonce = await verifyNonce(message.yourNonce, this.wallet);\n        if (!validNonce) {\n            throw new Error(`Unable to verify nonce for general message from: ${message.identityKey}`);\n        }\n        const peerSession = this.sessionManager.getSession(message.yourNonce);\n        if (peerSession == null) {\n            throw new Error(`Session not found for nonce: ${message.yourNonce}`);\n        }\n        const { valid } = await this.wallet.verifySignature({\n            data: message.payload,\n            signature: message.signature,\n            protocolID: [2, 'auth message signature'],\n            keyID: `${message.nonce ?? ''} ${peerSession.sessionNonce ?? ''}`,\n            counterparty: peerSession.peerIdentityKey\n        });\n        if (!valid) {\n            throw new Error(`Invalid signature in generalMessage from ${peerSession.peerIdentityKey}`);\n        }\n        // Mark last usage\n        peerSession.lastUpdate = Date.now();\n        this.sessionManager.updateSession(peerSession);\n        // Update lastInteractedWithPeer\n        this.lastInteractedWithPeer = message.identityKey;\n        // Dispatch callbacks\n        this.onGeneralMessageReceivedCallbacks.forEach(cb => {\n            cb(message.identityKey, message.payload ?? []);\n        });\n    }\n}\n//# sourceMappingURL=Peer.js.map","import * as Utils from '../../primitives/utils.js';\n// Only bind window.fetch in the browser\nconst defaultFetch = typeof window !== 'undefined' ? fetch.bind(window) : fetch;\n/**\n * Implements an HTTP-specific transport for handling Peer mutual authentication messages.\n * This class integrates with fetch to send and receive authenticated messages between peers.\n */\nexport class SimplifiedFetchTransport {\n    onDataCallback;\n    fetchClient;\n    baseUrl;\n    /**\n     * Constructs a new instance of SimplifiedFetchTransport.\n     * @param baseUrl - The base URL for all HTTP requests made by this transport.\n     * @param fetchClient - A fetch implementation to use for HTTP requests (default: global fetch).\n     */\n    constructor(baseUrl, fetchClient = defaultFetch) {\n        this.fetchClient = fetchClient;\n        this.baseUrl = baseUrl;\n    }\n    /**\n     * Sends a message to an HTTP server using the transport mechanism.\n     * Handles both general and authenticated message types. For general messages,\n     * the payload is deserialized and sent as an HTTP request. For other message types,\n     * the message is sent as a POST request to the `/auth` endpoint.\n     *\n     * @param message - The AuthMessage to send.\n     * @returns A promise that resolves when the message is successfully sent.\n     *\n     * @throws Will throw an error if no listener has been registered via `onData`.\n     */\n    async send(message) {\n        if (this.onDataCallback == null) {\n            throw new Error('Listen before you start speaking. God gave you two ears and one mouth for a reason.');\n        }\n        if (message.messageType !== 'general') {\n            return await new Promise((resolve, reject) => {\n                void (async () => {\n                    try {\n                        const responsePromise = this.fetchClient(`${this.baseUrl}/.well-known/auth`, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify(message)\n                        });\n                        // For initialRequest message, mark connection as established and start pool.\n                        if (message.messageType !== 'initialRequest') {\n                            resolve();\n                        }\n                        const response = await responsePromise;\n                        // Handle the response if data is received and callback is set\n                        if (response.ok && (this.onDataCallback != null)) {\n                            const responseMessage = await response.json();\n                            this.onDataCallback(responseMessage);\n                        }\n                        else {\n                            // Server may be a non authenticated server\n                            throw new Error('HTTP server failed to authenticate');\n                        }\n                        if (message.messageType === 'initialRequest') {\n                            resolve();\n                        }\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                })();\n            });\n        }\n        else {\n            // Parse message payload\n            const httpRequest = this.deserializeRequestPayload(message.payload);\n            // Send the byte array as the HTTP payload\n            const url = `${this.baseUrl}${httpRequest.urlPostfix}`;\n            const httpRequestWithAuthHeaders = httpRequest;\n            if (typeof httpRequest.headers !== 'object') {\n                httpRequestWithAuthHeaders.headers = {};\n            }\n            // Append auth headers in request to server\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-version'] = message.version;\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-identity-key'] = message.identityKey;\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-nonce'] = message.nonce;\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-your-nonce'] = message.yourNonce;\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-signature'] = Utils.toHex(message.signature);\n            httpRequestWithAuthHeaders.headers['x-bsv-auth-request-id'] = httpRequest.requestId;\n            // Ensure Content-Type is set for requests with a body\n            if (httpRequestWithAuthHeaders.body != null) {\n                const headers = httpRequestWithAuthHeaders.headers;\n                if (headers['content-type'] == null) {\n                    throw new Error('Content-Type header is required for requests with a body.');\n                }\n                const contentType = String(headers['content-type'] ?? '');\n                // Transform body based on Content-Type\n                if (contentType.includes('application/json')) {\n                    // Convert byte array to JSON string\n                    httpRequestWithAuthHeaders.body = Utils.toUTF8(httpRequestWithAuthHeaders.body);\n                }\n                else if (contentType.includes('application/x-www-form-urlencoded')) {\n                    // Convert byte array to URL-encoded string\n                    httpRequestWithAuthHeaders.body = Utils.toUTF8(httpRequestWithAuthHeaders.body);\n                }\n                else if (contentType.includes('text/plain')) {\n                    // Convert byte array to plain UTF-8 string\n                    httpRequestWithAuthHeaders.body = Utils.toUTF8(httpRequestWithAuthHeaders.body);\n                }\n                else {\n                    // For all other content types, treat as binary data\n                    httpRequestWithAuthHeaders.body = new Uint8Array(httpRequestWithAuthHeaders.body);\n                }\n            }\n            // Send the actual fetch request to the server\n            const response = await this.fetchClient(url, {\n                method: httpRequestWithAuthHeaders.method,\n                headers: httpRequestWithAuthHeaders.headers,\n                body: httpRequestWithAuthHeaders.body\n            });\n            // Check for an acceptable status\n            if (response.status === 500 && (response.headers.get('x-bsv-auth-request-id') == null &&\n                response.headers.get('x-bsv-auth-requested-certificates') == null)) {\n                // Try parsing JSON error\n                const errorInfo = await response.json();\n                // Otherwise just throw whatever we got\n                throw new Error(`HTTP ${response.status} - ${JSON.stringify(errorInfo)}`);\n            }\n            const parsedBody = await response.arrayBuffer();\n            const payloadWriter = new Utils.Writer();\n            if (response.headers.get('x-bsv-auth-request-id') != null) {\n                payloadWriter.write(Utils.toArray(response.headers.get('x-bsv-auth-request-id'), 'base64'));\n            }\n            payloadWriter.writeVarIntNum(response.status);\n            // PARSE RESPONSE HEADERS FROM SERVER --------------------------------\n            // Parse response headers from the server and include only the signed headers:\n            // - Include custom headers prefixed with x-bsv (excluding those starting with x-bsv-auth)\n            // - Include the authorization header\n            const includedHeaders = [];\n            response.headers.forEach((value, key) => {\n                const lowerKey = key.toLowerCase();\n                if ((lowerKey.startsWith('x-bsv-') || lowerKey === 'authorization') && !lowerKey.startsWith('x-bsv-auth')) {\n                    includedHeaders.push([lowerKey, value]);\n                }\n            });\n            // Sort the headers by key to ensure a consistent order for signing and verification.\n            includedHeaders.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));\n            // nHeaders\n            payloadWriter.writeVarIntNum(includedHeaders.length);\n            for (let i = 0; i < includedHeaders.length; i++) {\n                // headerKeyLength\n                const headerKeyAsArray = Utils.toArray(includedHeaders[i][0], 'utf8');\n                payloadWriter.writeVarIntNum(headerKeyAsArray.length);\n                // headerKey\n                payloadWriter.write(headerKeyAsArray);\n                // headerValueLength\n                const headerValueAsArray = Utils.toArray(includedHeaders[i][1], 'utf8');\n                payloadWriter.writeVarIntNum(headerValueAsArray.length);\n                // headerValue\n                payloadWriter.write(headerValueAsArray);\n            }\n            // Handle body\n            if (parsedBody != null) {\n                const bodyAsArray = Array.from(new Uint8Array(parsedBody));\n                payloadWriter.writeVarIntNum(bodyAsArray.length);\n                payloadWriter.write(bodyAsArray);\n            }\n            else {\n                payloadWriter.writeVarIntNum(-1);\n            }\n            // Build the correct AuthMessage for the response\n            const responseMessage = {\n                version: response.headers.get('x-bsv-auth-version'),\n                messageType: response.headers.get('x-bsv-auth-message-type') === 'certificateRequest' ? 'certificateRequest' : 'general',\n                identityKey: response.headers.get('x-bsv-auth-identity-key'),\n                nonce: response.headers.get('x-bsv-auth-nonce'),\n                yourNonce: response.headers.get('x-bsv-auth-your-nonce'),\n                requestedCertificates: JSON.parse(response.headers.get('x-bsv-auth-requested-certificates')),\n                payload: payloadWriter.toArray(),\n                signature: Utils.toArray(response.headers.get('x-bsv-auth-signature'), 'hex')\n            };\n            // If the server didn't provide the correct authentication headers, throw an error\n            if (responseMessage.version == null) {\n                throw new Error('HTTP server failed to authenticate');\n            }\n            // Handle the response if data is received and callback is set\n            this.onDataCallback(responseMessage);\n        }\n    }\n    /**\n     * Registers a callback to handle incoming messages.\n     * This must be called before sending any messages to ensure responses can be processed.\n     *\n     * @param callback - A function to invoke when an incoming AuthMessage is received.\n     * @returns A promise that resolves once the callback is set.\n     */\n    async onData(callback) {\n        this.onDataCallback = (m) => {\n            void callback(m);\n        };\n    }\n    /**\n     * Deserializes a request payload from a byte array into an HTTP request-like structure.\n     *\n     * @param payload - The serialized payload to deserialize.\n     * @returns An object representing the deserialized request, including the method,\n     *          URL postfix (path and query string), headers, body, and request ID.\n     */\n    deserializeRequestPayload(payload) {\n        // Create a reader\n        const requestReader = new Utils.Reader(payload);\n        // The first 32 bytes is the requestId\n        const requestId = Utils.toBase64(requestReader.read(32));\n        // Method\n        const methodLength = requestReader.readVarIntNum();\n        let method = 'GET';\n        if (methodLength > 0) {\n            method = Utils.toUTF8(requestReader.read(methodLength));\n        }\n        // Path\n        const pathLength = requestReader.readVarIntNum();\n        let path = '';\n        if (pathLength > 0) {\n            path = Utils.toUTF8(requestReader.read(pathLength));\n        }\n        // Search\n        const searchLength = requestReader.readVarIntNum();\n        let search = '';\n        if (searchLength > 0) {\n            search = Utils.toUTF8(requestReader.read(searchLength));\n        }\n        // Read headers\n        const requestHeaders = {};\n        const nHeaders = requestReader.readVarIntNum();\n        if (nHeaders > 0) {\n            for (let i = 0; i < nHeaders; i++) {\n                const nHeaderKeyBytes = requestReader.readVarIntNum();\n                const headerKeyBytes = requestReader.read(nHeaderKeyBytes);\n                const headerKey = Utils.toUTF8(headerKeyBytes);\n                const nHeaderValueBytes = requestReader.readVarIntNum();\n                const headerValueBytes = requestReader.read(nHeaderValueBytes);\n                const headerValue = Utils.toUTF8(headerValueBytes);\n                requestHeaders[headerKey] = headerValue;\n            }\n        }\n        // Read body\n        let requestBody;\n        const requestBodyBytes = requestReader.readVarIntNum();\n        if (requestBodyBytes > 0) {\n            requestBody = requestReader.read(requestBodyBytes);\n        }\n        // Return the deserialized RequestInit\n        return {\n            urlPostfix: path + search,\n            method,\n            headers: requestHeaders,\n            body: requestBody,\n            requestId\n        };\n    }\n}\n//# sourceMappingURL=SimplifiedFetchTransport.js.map","// @ts-nocheck\nimport * as Utils from '../../primitives/utils.js';\nimport Random from '../../primitives/Random.js';\nimport P2PKH from '../../script/templates/P2PKH.js';\nimport PublicKey from '../../primitives/PublicKey.js';\nimport { createNonce } from '../utils/createNonce.js';\nimport { Peer } from '../Peer.js';\nimport { SimplifiedFetchTransport } from '../transports/SimplifiedFetchTransport.js';\nimport { SessionManager } from '../SessionManager.js';\nimport { getVerifiableCertificates } from '../utils/index.js';\nconst PAYMENT_VERSION = '1.0';\n/**\n * AuthFetch provides a lightweight fetch client for interacting with servers\n * over a simplified HTTP transport mechanism. It integrates session management, peer communication,\n * and certificate handling to enable secure and mutually-authenticated requests.\n *\n * Additionally, it automatically handles 402 Payment Required responses by creating\n * and sending BSV payment transactions when necessary.\n */\nexport class AuthFetch {\n    sessionManager;\n    wallet;\n    callbacks = {};\n    certificatesReceived = [];\n    requestedCertificates;\n    peers = {};\n    /**\n    * Constructs a new AuthFetch instance.\n    * @param wallet - The wallet instance for signing and authentication.\n    * @param requestedCertificates - Optional set of certificates to request from peers.\n    */\n    constructor(wallet, requestedCertificates, sessionManager) {\n        this.wallet = wallet;\n        this.requestedCertificates = requestedCertificates;\n        this.sessionManager = sessionManager || new SessionManager();\n    }\n    /**\n     * Mutually authenticates and sends a HTTP request to a server.\n     *\n     * 1) Attempt the request.\n     * 2) If 402 Payment Required, automatically create and send payment.\n     * 3) Return the final response.\n     *\n     * @param url - The URL to send the request to.\n     * @param config - Configuration options for the request, including method, headers, and body.\n     * @returns A promise that resolves with the server's response, structured as a Response-like object.\n     *\n     * @throws Will throw an error if unsupported headers are used or other validation fails.\n     */\n    async fetch(url, config = {}) {\n        if (typeof config.retryCounter === 'number') {\n            if (config.retryCounter <= 0) {\n                throw new Error('Request failed after maximum number of retries.');\n            }\n            config.retryCounter--;\n        }\n        const response = await new Promise((async (resolve, reject) => {\n            try {\n                // Apply defaults\n                const { method = 'GET', headers = {}, body } = config;\n                // Extract a base url\n                const parsedUrl = new URL(url);\n                const baseURL = parsedUrl.origin;\n                // Create a new transport for this base url if needed\n                let peerToUse;\n                if (typeof this.peers[baseURL] === 'undefined') {\n                    // Create a peer for the request\n                    const newTransport = new SimplifiedFetchTransport(baseURL);\n                    peerToUse = {\n                        peer: new Peer(this.wallet, newTransport, this.requestedCertificates, this.sessionManager),\n                        pendingCertificateRequests: []\n                    };\n                    this.peers[baseURL] = peerToUse;\n                    this.peers[baseURL].peer.listenForCertificatesReceived((senderPublicKey, certs) => {\n                        this.certificatesReceived.push(...certs);\n                    });\n                    this.peers[baseURL].peer.listenForCertificatesRequested((async (verifier, requestedCertificates) => {\n                        try {\n                            this.peers[baseURL].pendingCertificateRequests.push(true);\n                            const certificatesToInclude = await getVerifiableCertificates(this.wallet, requestedCertificates, verifier);\n                            await this.peers[baseURL].peer.sendCertificateResponse(verifier, certificatesToInclude);\n                        }\n                        finally {\n                            // Give the backend 500 ms to process the certificates we just sent, before releasing the queue entry\n                            await new Promise(resolve => setTimeout(resolve, 500));\n                            this.peers[baseURL].pendingCertificateRequests.shift();\n                        }\n                    }));\n                }\n                else {\n                    // Check if there's a session associated with this baseURL\n                    if (this.peers[baseURL].supportsMutualAuth === false) {\n                        // Use standard fetch if mutual authentication is not supported\n                        try {\n                            const response = await this.handleFetchAndValidate(url, config, this.peers[baseURL]);\n                            resolve(response);\n                        }\n                        catch (error) {\n                            reject(error);\n                        }\n                        return;\n                    }\n                    peerToUse = this.peers[baseURL];\n                }\n                // Serialize the simplified fetch request.\n                const requestNonce = Random(32);\n                const requestNonceAsBase64 = Utils.toBase64(requestNonce);\n                const writer = await this.serializeRequest(method, headers, body, parsedUrl, requestNonce);\n                // Setup general message listener to resolve requests once a response is received\n                this.callbacks[requestNonceAsBase64] = { resolve, reject };\n                const listenerId = peerToUse.peer.listenForGeneralMessages((senderPublicKey, payload) => {\n                    // Create a reader\n                    const responseReader = new Utils.Reader(payload);\n                    // Deserialize first 32 bytes of payload\n                    const responseNonceAsBase64 = Utils.toBase64(responseReader.read(32));\n                    if (responseNonceAsBase64 !== requestNonceAsBase64) {\n                        return;\n                    }\n                    peerToUse.peer.stopListeningForGeneralMessages(listenerId);\n                    // Save the identity key for the peer for future requests, since we have it here.\n                    this.peers[baseURL].identityKey = senderPublicKey;\n                    this.peers[baseURL].supportsMutualAuth = true;\n                    // Status code\n                    const statusCode = responseReader.readVarIntNum();\n                    // Headers\n                    const responseHeaders = {};\n                    const nHeaders = responseReader.readVarIntNum();\n                    if (nHeaders > 0) {\n                        for (let i = 0; i < nHeaders; i++) {\n                            const nHeaderKeyBytes = responseReader.readVarIntNum();\n                            const headerKeyBytes = responseReader.read(nHeaderKeyBytes);\n                            const headerKey = Utils.toUTF8(headerKeyBytes);\n                            const nHeaderValueBytes = responseReader.readVarIntNum();\n                            const headerValueBytes = responseReader.read(nHeaderValueBytes);\n                            const headerValue = Utils.toUTF8(headerValueBytes);\n                            responseHeaders[headerKey] = headerValue;\n                        }\n                    }\n                    // Add back the server identity key header\n                    responseHeaders['x-bsv-auth-identity-key'] = senderPublicKey;\n                    // Body\n                    let responseBody;\n                    const responseBodyBytes = responseReader.readVarIntNum();\n                    if (responseBodyBytes > 0) {\n                        responseBody = responseReader.read(responseBodyBytes);\n                    }\n                    // Create the Response object\n                    const responseValue = new Response(responseBody ? new Uint8Array(responseBody) : null, {\n                        status: statusCode,\n                        statusText: `${statusCode}`,\n                        headers: new Headers(responseHeaders)\n                    });\n                    // Resolve or reject the correct request with the response data\n                    this.callbacks[requestNonceAsBase64].resolve(responseValue);\n                    // Clean up\n                    delete this.callbacks[requestNonceAsBase64];\n                });\n                // Before sending general messages to the peer, ensure that no certificate requests are pending.\n                // This way, the user would need to choose to either allow or reject the certificate request first.\n                // If the server has a resource that requires certificates to be sent before access would be granted,\n                // this makes sure the user has a chance to send the certificates before the resource is requested.\n                if (peerToUse.pendingCertificateRequests.length > 0) {\n                    await new Promise(resolve => {\n                        setInterval(() => {\n                            if (peerToUse.pendingCertificateRequests.length === 0) {\n                                resolve();\n                            }\n                        }, 100); // Check every 100 ms for the user to finish responding\n                    });\n                }\n                // Send the request, now that all listeners are set up\n                await peerToUse.peer.toPeer(writer.toArray(), peerToUse.identityKey).catch(async (error) => {\n                    if (error.message.includes('Session not found for nonce')) {\n                        delete this.peers[baseURL];\n                        config.retryCounter ??= 3;\n                        const response = await this.fetch(url, config);\n                        resolve(response);\n                        return;\n                    }\n                    if (error.message.includes('HTTP server failed to authenticate')) {\n                        try {\n                            const response = await this.handleFetchAndValidate(url, config, peerToUse);\n                            resolve(response);\n                            return;\n                        }\n                        catch (fetchError) {\n                            reject(fetchError);\n                        }\n                    }\n                    else {\n                        reject(error);\n                    }\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        }));\n        // Check if server requires payment to access the requested route\n        if (response.status === 402) {\n            // Create and attach a payment, then retry\n            return await this.handlePaymentAndRetry(url, config, response);\n        }\n        return response;\n    }\n    /**\n     * Request Certificates from a Peer\n     * @param baseUrl\n     * @param certificatesToRequest\n     */\n    async sendCertificateRequest(baseUrl, certificatesToRequest) {\n        const parsedUrl = new URL(baseUrl);\n        const baseURL = parsedUrl.origin;\n        let peerToUse;\n        if (typeof this.peers[baseURL] !== 'undefined') {\n            peerToUse = { peer: this.peers[baseURL].peer };\n        }\n        else {\n            const newTransport = new SimplifiedFetchTransport(baseURL);\n            peerToUse = {\n                peer: new Peer(this.wallet, newTransport, this.requestedCertificates, this.sessionManager)\n            };\n            this.peers[baseURL] = peerToUse;\n        }\n        // Return a promise that resolves when certificates are received\n        return await new Promise((async (resolve, reject) => {\n            // Set up the listener before making the request\n            const callbackId = peerToUse.peer.listenForCertificatesReceived((_senderPublicKey, certs) => {\n                peerToUse.peer.stopListeningForCertificatesReceived(callbackId);\n                this.certificatesReceived.push(...certs);\n                resolve(certs);\n            });\n            try {\n                // Initiate the certificate request\n                await peerToUse.peer.requestCertificates(certificatesToRequest, peerToUse.identityKey);\n            }\n            catch (err) {\n                peerToUse.peer.stopListeningForCertificatesReceived(callbackId);\n                reject(err);\n            }\n        }));\n    }\n    /**\n     * Return any certificates we've collected thus far, then clear them out.\n     */\n    consumeReceivedCertificates() {\n        return this.certificatesReceived.splice(0);\n    }\n    /**\n     * Serializes the HTTP request to be sent over the Transport.\n     *\n     * @param method - The HTTP method (e.g., 'GET', 'POST') for the request.\n     * @param headers - A record of HTTP headers to include in the request.\n     * @param body - The body of the request, if applicable (e.g., for POST/PUT requests).\n     * @param parsedUrl - The parsed URL object containing the full request URL.\n     * @param requestNonce - A unique random nonce to ensure request integrity.\n     * @returns A promise that resolves to a `Writer` containing the serialized request.\n     *\n     * @throws Will throw an error if unsupported headers are used or serialization fails.\n     */\n    async serializeRequest(method, headers, body, parsedUrl, requestNonce) {\n        const writer = new Utils.Writer();\n        // Write request nonce\n        writer.write(requestNonce);\n        // Method length\n        writer.writeVarIntNum(method.length);\n        // Method\n        writer.write(Utils.toArray(method));\n        // Handle pathname (e.g. /path/to/resource)\n        if (parsedUrl.pathname.length > 0) {\n            // Pathname length\n            const pathnameAsArray = Utils.toArray(parsedUrl.pathname);\n            writer.writeVarIntNum(pathnameAsArray.length);\n            // Pathname\n            writer.write(pathnameAsArray);\n        }\n        else {\n            writer.writeVarIntNum(-1);\n        }\n        // Handle search params (e.g. ?q=hello)\n        if (parsedUrl.search.length > 0) {\n            // search length\n            const searchAsArray = Utils.toArray(parsedUrl.search);\n            writer.writeVarIntNum(searchAsArray.length);\n            // search\n            writer.write(searchAsArray);\n        }\n        else {\n            writer.writeVarIntNum(-1);\n        }\n        // Construct headers to send / sign:\n        // Ensures clients only provided supported HTTP request headers\n        // - Include custom headers prefixed with x-bsv (excluding those starting with x-bsv-auth)\n        // - Include a normalized version of the content-type header\n        // - Include the authorization header\n        const includedHeaders = [];\n        for (let [k, v] of Object.entries(headers)) {\n            k = k.toLowerCase(); // We will always sign lower-case header keys\n            if (k.startsWith('x-bsv-') || k === 'authorization') {\n                if (k.startsWith('x-bsv-auth')) {\n                    throw new Error('No BSV auth headers allowed here!');\n                }\n                includedHeaders.push([k, v]);\n            }\n            else if (k.startsWith('content-type')) {\n                // Normalize the Content-Type header by removing any parameters (e.g., \"; charset=utf-8\")\n                v = v.split(';')[0].trim();\n                includedHeaders.push([k, v]);\n            }\n            else {\n                throw new Error('Unsupported header in the simplified fetch implementation. Only content-type, authorization, and x-bsv-* headers are supported.');\n            }\n        }\n        // Sort the headers by key to ensure a consistent order for signing and verification.\n        includedHeaders.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));\n        // nHeaders\n        writer.writeVarIntNum(includedHeaders.length);\n        for (let i = 0; i < includedHeaders.length; i++) {\n            // headerKeyLength\n            const headerKeyAsArray = Utils.toArray(includedHeaders[i][0], 'utf8');\n            writer.writeVarIntNum(headerKeyAsArray.length);\n            // headerKey\n            writer.write(headerKeyAsArray);\n            // headerValueLength\n            const headerValueAsArray = Utils.toArray(includedHeaders[i][1], 'utf8');\n            writer.writeVarIntNum(headerValueAsArray.length);\n            // headerValue\n            writer.write(headerValueAsArray);\n        }\n        // If method typically carries a body and body is undefined, default it\n        // This prevents signature verification errors due to mismatch default body types with express\n        const methodsThatTypicallyHaveBody = ['POST', 'PUT', 'PATCH', 'DELETE'];\n        if (methodsThatTypicallyHaveBody.includes(method.toUpperCase()) && body === undefined) {\n            // Check if content-type is application/json\n            const contentTypeHeader = includedHeaders.find(([k]) => k === 'content-type');\n            if (contentTypeHeader && contentTypeHeader[1].includes('application/json')) {\n                body = '{}';\n            }\n            else {\n                body = '';\n            }\n        }\n        // Handle body\n        if (body) {\n            const reqBody = await this.normalizeBodyToNumberArray(body); // Use the utility function\n            writer.writeVarIntNum(reqBody.length);\n            writer.write(reqBody);\n        }\n        else {\n            writer.writeVarIntNum(-1); // No body\n        }\n        return writer;\n    }\n    /**\n     * Handles a non-authenticated fetch requests and validates that the server is not claiming to be authenticated.\n     */\n    async handleFetchAndValidate(url, config, peerToUse) {\n        const response = await fetch(url, config);\n        response.headers.forEach(header => {\n            if (header.toLocaleLowerCase().startsWith('x-bsv')) {\n                throw new Error('The server is trying to claim it has been authenticated when it has not!');\n            }\n        });\n        if (response.ok) {\n            peerToUse.supportsMutualAuth = false;\n            return response;\n        }\n        else {\n            throw new Error(`Request failed with status: ${response.status}`);\n        }\n    }\n    /**\n     * If we get 402 Payment Required, we build a transaction via wallet.createAction()\n     * and re-attempt the request with an x-bsv-payment header.\n     */\n    async handlePaymentAndRetry(url, config = {}, originalResponse) {\n        // Make sure the server is using the correct payment version\n        const paymentVersion = originalResponse.headers.get('x-bsv-payment-version');\n        if (!paymentVersion || paymentVersion !== PAYMENT_VERSION) {\n            throw new Error(`Unsupported x-bsv-payment-version response header. Client version: ${PAYMENT_VERSION}, Server version: ${paymentVersion}`);\n        }\n        // Get required headers from the 402 response\n        const satoshisRequiredHeader = originalResponse.headers.get('x-bsv-payment-satoshis-required');\n        if (!satoshisRequiredHeader) {\n            throw new Error('Missing x-bsv-payment-satoshis-required response header.');\n        }\n        const satoshisRequired = parseInt(satoshisRequiredHeader);\n        if (isNaN(satoshisRequired) || satoshisRequired <= 0) {\n            throw new Error('Invalid x-bsv-payment-satoshis-required response header value.');\n        }\n        const serverIdentityKey = originalResponse.headers.get('x-bsv-auth-identity-key');\n        if (!serverIdentityKey) {\n            throw new Error('Missing x-bsv-auth-identity-key response header.');\n        }\n        const derivationPrefix = originalResponse.headers.get('x-bsv-payment-derivation-prefix');\n        if (typeof derivationPrefix !== 'string' || derivationPrefix.length < 1) {\n            throw new Error('Missing x-bsv-payment-derivation-prefix response header.');\n        }\n        // Create a random suffix for the derivation path\n        const derivationSuffix = await createNonce(this.wallet);\n        // Derive the script hex from the server identity key\n        const { publicKey: derivedPublicKey } = await this.wallet.getPublicKey({\n            protocolID: [2, '3241645161d8'],\n            keyID: `${derivationPrefix} ${derivationSuffix}`,\n            counterparty: serverIdentityKey\n        });\n        const lockingScript = new P2PKH().lock(PublicKey.fromString(derivedPublicKey).toAddress()).toHex();\n        // Create the payment transaction using createAction\n        const { tx } = await this.wallet.createAction({\n            description: `Payment for request to ${new URL(url).origin}`,\n            outputs: [{\n                    satoshis: satoshisRequired,\n                    lockingScript,\n                    customInstructions: JSON.stringify({ derivationPrefix, derivationSuffix, payee: serverIdentityKey }),\n                    outputDescription: 'HTTP request payment'\n                }],\n            options: {\n                randomizeOutputs: false\n            }\n        });\n        // Attach the payment to the request headers\n        config.headers = config.headers || {};\n        config.headers['x-bsv-payment'] = JSON.stringify({\n            derivationPrefix,\n            derivationSuffix,\n            transaction: Utils.toBase64(tx)\n        });\n        config.retryCounter ??= 3;\n        // Re-attempt request with payment attached\n        return this.fetch(url, config);\n    }\n    async normalizeBodyToNumberArray(body) {\n        // 0. Null / undefined\n        if (body == null) {\n            return [];\n        }\n        // 1. object\n        if (typeof body === 'object') {\n            return Utils.toArray(JSON.stringify(body, 'utf8'));\n        }\n        // 2. number[]\n        if (Array.isArray(body) && body.every((item) => typeof item === 'number')) {\n            return body; // Return the array as is\n        }\n        // 3. string\n        if (typeof body === 'string') {\n            return Utils.toArray(body, 'utf8');\n        }\n        // 4. ArrayBuffer / TypedArrays\n        if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n            const typedArray = body instanceof ArrayBuffer ? new Uint8Array(body) : new Uint8Array(body.buffer);\n            return Array.from(typedArray);\n        }\n        // 5. Blob\n        if (body instanceof Blob) {\n            const arrayBuffer = await body.arrayBuffer();\n            return Array.from(new Uint8Array(arrayBuffer));\n        }\n        // 6. FormData\n        if (body instanceof FormData) {\n            const entries = [];\n            body.forEach((value, key) => {\n                entries.push([key, value.toString()]);\n            });\n            const urlEncoded = new URLSearchParams(entries).toString();\n            return Utils.toArray(urlEncoded, 'utf8');\n        }\n        // 7. URLSearchParams\n        if (body instanceof URLSearchParams) {\n            return Utils.toArray(body.toString(), 'utf8');\n        }\n        // 8. ReadableStream\n        if (body instanceof ReadableStream) {\n            throw new Error('ReadableStream cannot be directly converted to number[].');\n        }\n        // 9. Fallback\n        throw new Error('Unsupported body type in this SimplifiedFetch implementation.');\n    }\n}\n//# sourceMappingURL=AuthFetch.js.map","import PushDrop from '../script/templates/PushDrop.js';\nimport { Utils } from '../primitives/index.js';\n/**\n * Script template enabling the creation, unlocking, and decoding of SHIP and SLAP advertisements.\n */\nexport default class OverlayAdminTokenTemplate {\n    pushDrop;\n    /**\n     * Decodes a SHIP or SLAP advertisement from a given locking script.\n     * @param script Locking script comprising a SHIP or SLAP token to decode\n     * @returns Decoded SHIP or SLAP advertisement\n     */\n    static decode(script) {\n        const result = PushDrop.decode(script);\n        if (result.fields.length < 4) {\n            throw new Error('Invalid SHIP/SLAP advertisement!');\n        }\n        const protocol = Utils.toUTF8(result.fields[0]);\n        if (protocol !== 'SHIP' && protocol !== 'SLAP') {\n            throw new Error('Invalid protocol type!');\n        }\n        const identityKey = Utils.toHex(result.fields[1]);\n        const domain = Utils.toUTF8(result.fields[2]);\n        const topicOrService = Utils.toUTF8(result.fields[3]);\n        return {\n            protocol,\n            identityKey,\n            domain,\n            topicOrService\n        };\n    }\n    /**\n     * Constructs a new Overlay Admin template instance\n     * @param wallet Wallet to use for locking and unlocking\n     */\n    constructor(wallet) {\n        this.pushDrop = new PushDrop(wallet);\n    }\n    /**\n     * Creates a new advertisement locking script\n     * @param protocol SHIP or SLAP\n     * @param domain Domain where the topic or service is available\n     * @param topicOrService Topic or service to advertise\n     * @returns Locking script comprising the advertisement token\n     */\n    async lock(protocol, domain, topicOrService) {\n        const { publicKey: identityKey } = await this.pushDrop.wallet.getPublicKey({\n            identityKey: true\n        });\n        return await this.pushDrop.lock([\n            Utils.toArray(protocol, 'utf8'),\n            Utils.toArray(identityKey, 'hex'),\n            Utils.toArray(domain, 'utf8'),\n            Utils.toArray(topicOrService, 'utf8')\n        ], [\n            2,\n            protocol === 'SHIP'\n                ? 'Service Host Interconnect'\n                : 'Service Lookup Availability'\n        ], '1', 'self');\n    }\n    /**\n     * Unlocks an advertisement token as part of a transaction.\n     * @param protocol SHIP or SLAP, depending on the token to unlock\n     * @returns Script unlocker capable of unlocking the advertisement token\n     */\n    unlock(protocol) {\n        return this.pushDrop.unlock([\n            2,\n            protocol === 'SHIP'\n                ? 'Service Host Interconnect'\n                : 'Service Lookup Availability'\n        ], '1', 'self');\n    }\n}\n//# sourceMappingURL=OverlayAdminTokenTemplate.js.map","import { Transaction } from '../transaction/index.js';\nimport OverlayAdminTokenTemplate from './OverlayAdminTokenTemplate.js';\n/** Default SLAP trackers */\nexport const DEFAULT_SLAP_TRACKERS = [\n    // BSVA clusters\n    'https://overlay-us-1.bsvb.tech',\n    'https://overlay-eu-1.bsvb.tech',\n    'https://overlay-ap-1.bsvb.tech',\n    // Babbage primary overlay service\n    'https://users.bapp.dev'\n    // NOTE: Other entities may submit pull requests to the library if they maintain SLAP overlay services.\n    // Additional trackers run by different entities contribute to greater network resiliency.\n    // It also generally doesn't hurt to have more trackers in this list.\n    // DISCLAIMER:\n    // Trackers known to host invalid or illegal records will be removed at the discretion of the BSV Association.\n];\n/** Default testnet SLAP trackers */\nexport const DEFAULT_TESTNET_SLAP_TRACKERS = [\n    // Babbage primary testnet overlay service\n    'https://testnet-users.bapp.dev'\n];\nconst MAX_TRACKER_WAIT_TIME = 5000;\nexport class HTTPSOverlayLookupFacilitator {\n    fetchClient;\n    allowHTTP;\n    constructor(httpClient = fetch, allowHTTP = false) {\n        this.fetchClient = httpClient;\n        this.allowHTTP = allowHTTP;\n    }\n    async lookup(url, question, timeout = 5000) {\n        if (!url.startsWith('https:') && !this.allowHTTP) {\n            throw new Error('HTTPS facilitator can only use URLs that start with \"https:\"');\n        }\n        const timeoutPromise = new Promise((resolve, reject) => setTimeout(() => reject(new Error('Request timed out')), timeout));\n        const fetchPromise = fetch(`${url}/lookup`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                service: question.service,\n                query: question.query\n            })\n        });\n        const response = (await Promise.race([\n            fetchPromise,\n            timeoutPromise\n        ]));\n        if (response.ok) {\n            return await response.json();\n        }\n        else {\n            throw new Error('Failed to facilitate lookup');\n        }\n    }\n}\n/**\n * Represents an SHIP transaction broadcaster.\n */\nexport default class LookupResolver {\n    facilitator;\n    slapTrackers;\n    hostOverrides;\n    additionalHosts;\n    networkPreset;\n    constructor(config = {}) {\n        this.networkPreset = config.networkPreset ?? 'mainnet';\n        this.facilitator = config.facilitator ?? new HTTPSOverlayLookupFacilitator(undefined, this.networkPreset === 'local');\n        this.slapTrackers = config.slapTrackers ?? (this.networkPreset === 'mainnet' ? DEFAULT_SLAP_TRACKERS : DEFAULT_TESTNET_SLAP_TRACKERS);\n        this.hostOverrides = config.hostOverrides ?? {};\n        this.additionalHosts = config.additionalHosts ?? {};\n    }\n    /**\n     * Given a LookupQuestion, returns a LookupAnswer. Aggregates across multiple services and supports resiliency.\n     */\n    async query(question, timeout) {\n        let competentHosts = [];\n        if (question.service === 'ls_slap') {\n            competentHosts = this.networkPreset === 'local' ? ['http://localhost:8080'] : this.slapTrackers;\n        }\n        else if (this.hostOverrides[question.service] != null) {\n            competentHosts = this.hostOverrides[question.service];\n        }\n        else if (this.networkPreset === 'local') {\n            competentHosts = ['http://localhost:8080'];\n        }\n        else {\n            competentHosts = await this.findCompetentHosts(question.service);\n        }\n        if (this.additionalHosts[question.service]?.length > 0) {\n            competentHosts = [\n                ...competentHosts,\n                ...this.additionalHosts[question.service]\n            ];\n        }\n        if (competentHosts.length < 1) {\n            throw new Error(`No competent ${this.networkPreset} hosts found by the SLAP trackers for lookup service: ${question.service}`);\n        }\n        // Use Promise.allSettled to handle individual host failures\n        const hostResponses = await Promise.allSettled(competentHosts.map(async (host) => await this.facilitator.lookup(host, question, timeout)));\n        const successfulResponses = hostResponses\n            .filter((result) => result.status === 'fulfilled')\n            .map((result) => result.value);\n        if (successfulResponses.length === 0) {\n            throw new Error('No successful responses from any hosts');\n        }\n        // Process the successful responses\n        // Aggregate outputs from all successful responses\n        const outputs = new Map();\n        for (const response of successfulResponses) {\n            if (response.type !== 'output-list') {\n                continue;\n            }\n            try {\n                for (const output of response.outputs) {\n                    try {\n                        const txId = Transaction.fromBEEF(output.beef).id('hex'); // !! This is STUPIDLY inefficient.\n                        const key = `${txId}.${output.outputIndex}`;\n                        outputs.set(key, output);\n                    }\n                    catch {\n                        continue;\n                    }\n                }\n            }\n            catch (_) {\n                // Error processing output, proceed.\n            }\n        }\n        return {\n            type: 'output-list',\n            outputs: Array.from(outputs.values())\n        };\n    }\n    /**\n     * Returns a list of competent hosts for a given lookup service.\n     * @param service Service for which competent hosts are to be returned\n     * @returns Array of hosts competent for resolving queries\n     */\n    async findCompetentHosts(service) {\n        const query = {\n            service: 'ls_slap',\n            query: {\n                service\n            }\n        };\n        // Use Promise.allSettled to handle individual SLAP tracker failures\n        const trackerResponses = await Promise.allSettled(this.slapTrackers.map(async (tracker) => await this.facilitator.lookup(tracker, query, MAX_TRACKER_WAIT_TIME)));\n        const hosts = new Set();\n        for (const result of trackerResponses) {\n            if (result.status === 'fulfilled') {\n                const answer = result.value;\n                if (answer.type !== 'output-list') {\n                    // Log invalid response and continue\n                    continue;\n                }\n                for (const output of answer.outputs) {\n                    try {\n                        const tx = Transaction.fromBEEF(output.beef);\n                        const script = tx.outputs[output.outputIndex].lockingScript;\n                        const parsed = OverlayAdminTokenTemplate.decode(script);\n                        if (parsed.topicOrService !== service ||\n                            parsed.protocol !== 'SLAP') {\n                            // Invalid advertisement, skip\n                            continue;\n                        }\n                        hosts.add(parsed.domain);\n                    }\n                    catch {\n                        // Invalid output, skip\n                        continue;\n                    }\n                }\n            }\n            else {\n                // Log tracker failure and continue\n                continue;\n            }\n        }\n        return [...hosts];\n    }\n}\n//# sourceMappingURL=LookupResolver.js.map","import { Transaction } from '../transaction/index.js';\nimport * as Utils from '../primitives/utils.js';\nimport LookupResolver from './LookupResolver.js';\nimport OverlayAdminTokenTemplate from './OverlayAdminTokenTemplate.js';\nconst MAX_SHIP_QUERY_TIMEOUT = 5000;\nexport class HTTPSOverlayBroadcastFacilitator {\n    httpClient;\n    allowHTTP;\n    constructor(httpClient = fetch, allowHTTP = false) {\n        this.httpClient = httpClient;\n        this.allowHTTP = allowHTTP;\n    }\n    async send(url, taggedBEEF) {\n        if (!url.startsWith('https:') && !this.allowHTTP) {\n            throw new Error('HTTPS facilitator can only use URLs that start with \"https:\"');\n        }\n        const headers = {\n            'Content-Type': 'application/octet-stream',\n            'X-Topics': JSON.stringify(taggedBEEF.topics)\n        };\n        let body;\n        if (Array.isArray(taggedBEEF.offChainValues)) {\n            headers['x-includes-off-chain-values'] = 'true';\n            const w = new Utils.Writer();\n            w.writeVarIntNum(taggedBEEF.beef.length);\n            w.write(taggedBEEF.beef);\n            w.write(taggedBEEF.offChainValues);\n            body = new Uint8Array(w.toArray());\n        }\n        else {\n            body = new Uint8Array(taggedBEEF.beef);\n        }\n        const response = await fetch(`${url}/submit`, {\n            method: 'POST',\n            headers,\n            body\n        });\n        if (response.ok) {\n            return await response.json();\n        }\n        else {\n            throw new Error('Failed to facilitate broadcast');\n        }\n    }\n}\n/**\n * Broadcasts transactions to one or more overlay topics.\n */\nexport default class TopicBroadcaster {\n    topics;\n    facilitator;\n    resolver;\n    requireAcknowledgmentFromAllHostsForTopics;\n    requireAcknowledgmentFromAnyHostForTopics;\n    requireAcknowledgmentFromSpecificHostsForTopics;\n    networkPreset;\n    /**\n     * Constructs an instance of the SHIP broadcaster.\n     *\n     * @param {string[]} topics - The list of SHIP topic names where transactions are to be sent.\n     * @param {SHIPBroadcasterConfig} config - Configuration options for the SHIP broadcaster.\n     */\n    constructor(topics, config = {}) {\n        if (topics.length === 0) {\n            throw new Error('At least one topic is required for broadcast.');\n        }\n        if (topics.some((x) => !x.startsWith('tm_'))) {\n            throw new Error('Every topic must start with \"tm_\".');\n        }\n        this.topics = topics;\n        this.networkPreset = config.networkPreset ?? 'mainnet';\n        this.facilitator = config.facilitator ?? new HTTPSOverlayBroadcastFacilitator(undefined, this.networkPreset === 'local');\n        this.resolver = config.resolver ?? new LookupResolver({ networkPreset: this.networkPreset });\n        this.requireAcknowledgmentFromAllHostsForTopics =\n            config.requireAcknowledgmentFromAllHostsForTopics ?? [];\n        this.requireAcknowledgmentFromAnyHostForTopics =\n            config.requireAcknowledgmentFromAnyHostForTopics ?? 'all';\n        this.requireAcknowledgmentFromSpecificHostsForTopics =\n            config.requireAcknowledgmentFromSpecificHostsForTopics ?? {};\n    }\n    /**\n     * Broadcasts a transaction to Overlay Services via SHIP.\n     *\n     * @param {Transaction} tx - The transaction to be sent.\n     * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n     */\n    async broadcast(tx) {\n        let beef;\n        const offChainValues = tx.metadata.get('OffChainValues');\n        try {\n            beef = tx.toBEEF();\n        }\n        catch (error) {\n            throw new Error('Transactions sent via SHIP to Overlay Services must be serializable to BEEF format.');\n        }\n        const interestedHosts = await this.findInterestedHosts();\n        if (Object.keys(interestedHosts).length === 0) {\n            return {\n                status: 'error',\n                code: 'ERR_NO_HOSTS_INTERESTED',\n                description: `No ${this.networkPreset} hosts are interested in receiving this transaction.`\n            };\n        }\n        const hostPromises = Object.entries(interestedHosts).map(async ([host, topics]) => {\n            try {\n                const steak = await this.facilitator.send(host, {\n                    beef,\n                    offChainValues,\n                    topics: [...topics]\n                });\n                if (steak == null || Object.keys(steak).length === 0) {\n                    throw new Error('Steak has no topics.');\n                }\n                return { host, success: true, steak };\n            }\n            catch (error) {\n                console.error(error);\n                // Log error if needed\n                return { host, success: false, error };\n            }\n        });\n        const results = await Promise.all(hostPromises);\n        const successfulHosts = results.filter((result) => result.success);\n        if (successfulHosts.length === 0) {\n            return {\n                status: 'error',\n                code: 'ERR_ALL_HOSTS_REJECTED',\n                description: `All ${this.networkPreset} topical hosts have rejected the transaction.`\n            };\n        }\n        // Collect host acknowledgments\n        const hostAcknowledgments = {};\n        for (const result of successfulHosts) {\n            const host = result.host;\n            const steak = result.steak;\n            const acknowledgedTopics = new Set();\n            for (const [topic, instructions] of Object.entries(steak)) {\n                const outputsToAdmit = instructions.outputsToAdmit;\n                const coinsToRetain = instructions.coinsToRetain;\n                const coinsRemoved = instructions.coinsRemoved;\n                if (outputsToAdmit?.length > 0 ||\n                    coinsToRetain?.length > 0 ||\n                    coinsRemoved?.length > 0) {\n                    acknowledgedTopics.add(topic);\n                }\n            }\n            hostAcknowledgments[host] = acknowledgedTopics;\n        }\n        // Now, perform the checks\n        // Check requireAcknowledgmentFromAllHostsForTopics\n        let requiredTopicsAllHosts;\n        let requireAllHosts;\n        if (this.requireAcknowledgmentFromAllHostsForTopics === 'all') {\n            requiredTopicsAllHosts = this.topics;\n            requireAllHosts = 'all';\n        }\n        else if (this.requireAcknowledgmentFromAllHostsForTopics === 'any') {\n            requiredTopicsAllHosts = this.topics;\n            requireAllHosts = 'any';\n        }\n        else if (Array.isArray(this.requireAcknowledgmentFromAllHostsForTopics)) {\n            requiredTopicsAllHosts = this.requireAcknowledgmentFromAllHostsForTopics;\n            requireAllHosts = 'all';\n        }\n        else {\n            // Default to 'all' and 'all'\n            requiredTopicsAllHosts = this.topics;\n            requireAllHosts = 'all';\n        }\n        if (requiredTopicsAllHosts.length > 0) {\n            const allHostsAcknowledged = this.checkAcknowledgmentFromAllHosts(hostAcknowledgments, requiredTopicsAllHosts, requireAllHosts);\n            if (!allHostsAcknowledged) {\n                return {\n                    status: 'error',\n                    code: 'ERR_REQUIRE_ACK_FROM_ALL_HOSTS_FAILED',\n                    description: 'Not all hosts acknowledged the required topics.'\n                };\n            }\n        }\n        // Check requireAcknowledgmentFromAnyHostForTopics\n        let requiredTopicsAnyHost;\n        let requireAnyHost;\n        if (this.requireAcknowledgmentFromAnyHostForTopics === 'all') {\n            requiredTopicsAnyHost = this.topics;\n            requireAnyHost = 'all';\n        }\n        else if (this.requireAcknowledgmentFromAnyHostForTopics === 'any') {\n            requiredTopicsAnyHost = this.topics;\n            requireAnyHost = 'any';\n        }\n        else if (Array.isArray(this.requireAcknowledgmentFromAnyHostForTopics)) {\n            requiredTopicsAnyHost = this.requireAcknowledgmentFromAnyHostForTopics;\n            requireAnyHost = 'all';\n        }\n        else {\n            // No requirement\n            requiredTopicsAnyHost = [];\n            requireAnyHost = 'all';\n        }\n        if (requiredTopicsAnyHost.length > 0) {\n            const anyHostAcknowledged = this.checkAcknowledgmentFromAnyHost(hostAcknowledgments, requiredTopicsAnyHost, requireAnyHost);\n            if (!anyHostAcknowledged) {\n                return {\n                    status: 'error',\n                    code: 'ERR_REQUIRE_ACK_FROM_ANY_HOST_FAILED',\n                    description: 'No host acknowledged the required topics.'\n                };\n            }\n        }\n        // Check requireAcknowledgmentFromSpecificHostsForTopics\n        if (Object.keys(this.requireAcknowledgmentFromSpecificHostsForTopics).length >\n            0) {\n            const specificHostsAcknowledged = this.checkAcknowledgmentFromSpecificHosts(hostAcknowledgments, this.requireAcknowledgmentFromSpecificHostsForTopics);\n            if (!specificHostsAcknowledged) {\n                return {\n                    status: 'error',\n                    code: 'ERR_REQUIRE_ACK_FROM_SPECIFIC_HOSTS_FAILED',\n                    description: 'Specific hosts did not acknowledge the required topics.'\n                };\n            }\n        }\n        // If all checks pass, return success\n        return {\n            status: 'success',\n            txid: tx.id('hex'),\n            message: `Sent to ${successfulHosts.length} Overlay Services ${successfulHosts.length === 1 ? 'host' : 'hosts'}.`\n        };\n    }\n    checkAcknowledgmentFromAllHosts(hostAcknowledgments, requiredTopics, require) {\n        for (const acknowledgedTopics of Object.values(hostAcknowledgments)) {\n            if (require === 'all') {\n                for (const topic of requiredTopics) {\n                    if (!acknowledgedTopics.has(topic)) {\n                        return false;\n                    }\n                }\n            }\n            else if (require === 'any') {\n                let anyAcknowledged = false;\n                for (const topic of requiredTopics) {\n                    if (acknowledgedTopics.has(topic)) {\n                        anyAcknowledged = true;\n                        break;\n                    }\n                }\n                if (!anyAcknowledged) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    checkAcknowledgmentFromAnyHost(hostAcknowledgments, requiredTopics, require) {\n        if (require === 'all') {\n            // All required topics must be acknowledged by at least one host\n            for (const acknowledgedTopics of Object.values(hostAcknowledgments)) {\n                let acknowledgesAllRequiredTopics = true;\n                for (const topic of requiredTopics) {\n                    if (!acknowledgedTopics.has(topic)) {\n                        acknowledgesAllRequiredTopics = false;\n                        break;\n                    }\n                }\n                if (acknowledgesAllRequiredTopics) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            // At least one required topic must be acknowledged by at least one host\n            for (const acknowledgedTopics of Object.values(hostAcknowledgments)) {\n                for (const topic of requiredTopics) {\n                    if (acknowledgedTopics.has(topic)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n    checkAcknowledgmentFromSpecificHosts(hostAcknowledgments, requirements) {\n        for (const [host, requiredTopicsOrAllAny] of Object.entries(requirements)) {\n            const acknowledgedTopics = hostAcknowledgments[host];\n            if (acknowledgedTopics == null) {\n                // Host did not respond successfully\n                return false;\n            }\n            let requiredTopics;\n            let require;\n            if (requiredTopicsOrAllAny === 'all' ||\n                requiredTopicsOrAllAny === 'any') {\n                require = requiredTopicsOrAllAny;\n                requiredTopics = this.topics;\n            }\n            else if (Array.isArray(requiredTopicsOrAllAny)) {\n                requiredTopics = requiredTopicsOrAllAny;\n                require = 'all';\n            }\n            else {\n                // Invalid configuration\n                continue;\n            }\n            if (require === 'all') {\n                for (const topic of requiredTopics) {\n                    if (!acknowledgedTopics.has(topic)) {\n                        return false;\n                    }\n                }\n            }\n            else if (require === 'any') {\n                let anyAcknowledged = false;\n                for (const topic of requiredTopics) {\n                    if (acknowledgedTopics.has(topic)) {\n                        anyAcknowledged = true;\n                        break;\n                    }\n                }\n                if (!anyAcknowledged) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Finds which hosts are interested in transactions tagged with the given set of topics.\n     *\n     * @returns A mapping of URLs for hosts interested in this transaction. Keys are URLs, values are which of our topics the specific host cares about.\n     */\n    async findInterestedHosts() {\n        // Handle the local network preset\n        if (this.networkPreset === 'local') {\n            const resultSet = new Set();\n            for (let i = 0; i < this.topics.length; i++) {\n                resultSet.add(this.topics[i]);\n            }\n            return { 'http://localhost:8080': resultSet };\n        }\n        // TODO: cache the list of interested hosts to avoid spamming SHIP trackers.\n        // TODO: Monetize the operation of the SHIP tracker system.\n        // TODO: Cache ship/slap lookup with expiry (every 5min)\n        // Find all SHIP advertisements for the topics we care about\n        const results = {};\n        const answer = await this.resolver.query({\n            service: 'ls_ship',\n            query: {\n                topics: this.topics\n            }\n        }, MAX_SHIP_QUERY_TIMEOUT);\n        if (answer.type !== 'output-list') {\n            throw new Error('SHIP answer is not an output list.');\n        }\n        for (const output of answer.outputs) {\n            try {\n                const tx = Transaction.fromBEEF(output.beef);\n                const script = tx.outputs[output.outputIndex].lockingScript;\n                const parsed = OverlayAdminTokenTemplate.decode(script);\n                if (!this.topics.includes(parsed.topicOrService) ||\n                    parsed.protocol !== 'SHIP') {\n                    // This should make us think a LOT less highly of this SHIP tracker if it ever happens...\n                    continue;\n                }\n                if (results[parsed.domain] === undefined) {\n                    results[parsed.domain] = new Set();\n                }\n                results[parsed.domain].add(parsed.topicOrService);\n            }\n            catch (e) {\n                continue;\n            }\n        }\n        return results;\n    }\n}\n//# sourceMappingURL=SHIPBroadcaster.js.map","import { sha256 } from '../primitives/Hash.js';\nimport { toHex, fromBase58Check, toBase58Check, toArray } from '../primitives/utils.js';\n/**\n * Takes a UHRP URL and removes any prefixes.\n * @param {string} URL - The UHRP URL.\n * @returns {string} - Normalized URL.\n */\nexport const normalizeURL = (URL) => {\n    if (URL.toLowerCase().startsWith('uhrp:'))\n        URL = URL.slice(5);\n    if (URL.startsWith('//'))\n        URL = URL.slice(2);\n    return URL;\n};\n/**\n * Generates a UHRP URL from a given SHA-256 hash.\n * @param {number[]} hash - 32-byte SHA-256 hash.\n * @returns {string} - Base58Check encoded URL.\n */\nexport const getURLForHash = (hash) => {\n    if (hash.length !== 32) {\n        throw new Error('Hash length must be 32 bytes (sha256)');\n    }\n    return toBase58Check(hash, toArray('ce00', 'hex'));\n};\n/**\n * Generates a UHRP URL for a given file.\n * @param {number[] | string} file - File content as number array or string.\n * @returns {string} - Base58Check encoded URL.\n */\nexport const getURLForFile = (file) => {\n    const hash = sha256(file);\n    return getURLForHash(hash);\n};\n/**\n * Extracts the hash from a UHRP URL.\n * @param {string} URL - UHRP URL.\n * @returns {number[]} - Extracted SHA-256 hash.\n */\nexport const getHashFromURL = (URL) => {\n    URL = normalizeURL(URL);\n    const { data, prefix } = fromBase58Check(URL, undefined, 2);\n    if (data.length !== 32) {\n        throw new Error('Invalid length!');\n    }\n    if (toHex(prefix) !== 'ce00') {\n        throw new Error('Bad prefix');\n    }\n    return data;\n};\n/**\n * Checks if a URL is a valid UHRP URL.\n * @param {string} URL - The URL to validate.\n * @returns {boolean} - True if valid, false otherwise.\n */\nexport const isValidURL = (URL) => {\n    try {\n        getHashFromURL(URL);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n//# sourceMappingURL=StorageUtils.js.map","import { AuthFetch } from '../auth/clients/AuthFetch.js';\nimport * as StorageUtils from './StorageUtils.js';\n/**\n * The StorageUploader class provides client-side methods for:\n * - Uploading files with a specified retention period\n * - Finding file metadata by UHRP URL\n * - Listing all user uploads\n * - Renewing an existing advertisement's expiry time\n */\nexport class StorageUploader {\n    authFetch;\n    baseURL;\n    /**\n     * Creates a new StorageUploader instance.\n     * @param {UploaderConfig} config - An object containing the storage server's URL and a wallet interface\n     */\n    constructor(config) {\n        this.baseURL = config.storageURL;\n        this.authFetch = new AuthFetch(config.wallet);\n    }\n    /**\n     * Requests information from the server to upload a file (including presigned URL and headers).\n     * @private\n     * @param {number} fileSize - The size of the file, in bytes\n     * @param {number} retentionPeriod - The desired hosting time, in minutes\n     * @returns {Promise<{ uploadURL: string; requiredHeaders: Record<string, string>; amount?: number }>}\n     * @throws {Error} If the server returns a non-OK response or an error status\n     */\n    async getUploadInfo(fileSize, retentionPeriod) {\n        const url = `${this.baseURL}/upload`;\n        const body = { fileSize, retentionPeriod };\n        const response = await this.authFetch.fetch(url, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Upload info request failed: HTTP ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'error') {\n            throw new Error('Upload route returned an error.');\n        }\n        return {\n            uploadURL: data.uploadURL,\n            requiredHeaders: data.requiredHeaders,\n            amount: data.amount\n        };\n    }\n    /**\n     * Performs the actual file upload (HTTP PUT) to the presigned URL returned by the server.\n     * @private\n     * @param {string} uploadURL - The presigned URL where the file is to be uploaded\n     * @param {UploadableFile} file - The file to upload, including its raw data and MIME type\n     * @param {Record<string, string>} requiredHeaders - Additional headers required by the server (e.g. content-length)\n     * @returns {Promise<UploadFileResult>} An object indicating whether publishing was successful and the resulting UHRP URL\n     * @throws {Error} If the server returns a non-OK response\n     */\n    async uploadFile(uploadURL, file, requiredHeaders) {\n        const body = Uint8Array.from(file.data);\n        const response = await fetch(uploadURL, {\n            method: 'PUT',\n            body,\n            headers: {\n                'Content-Type': file.type,\n                ...requiredHeaders\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`File upload failed: HTTP ${response.status}`);\n        }\n        const uhrpURL = await StorageUtils.getURLForFile(file.data);\n        return {\n            published: true,\n            uhrpURL\n        };\n    }\n    /**\n     * Publishes a file to the storage server with the specified retention period.\n     *\n     * This will:\n     * 1. Request an upload URL from the server.\n     * 2. Perform an HTTP PUT to upload the file’s raw bytes.\n     * 3. Return a UHRP URL referencing the file once published.\n     *\n     * @param {Object} params\n     * @param {UploadableFile} params.file - The file data + type\n     * @param {number} params.retentionPeriod - Number of minutes to host the file\n     * @returns {Promise<UploadFileResult>} An object with the file's UHRP URL\n     * @throws {Error} If the server or upload step returns a non-OK response\n     */\n    async publishFile(params) {\n        const { file, retentionPeriod } = params;\n        const fileSize = file.data.length;\n        const { uploadURL, requiredHeaders } = await this.getUploadInfo(fileSize, retentionPeriod);\n        return await this.uploadFile(uploadURL, file, requiredHeaders);\n    }\n    /**\n     * Retrieves metadata for a file matching the given UHRP URL from the `/find` route.\n     * @param {string} uhrpUrl - The UHRP URL, e.g. \"uhrp://abcd...\"\n     * @returns {Promise<FindFileData>} An object with file name, size, MIME type, and expiry time\n     * @throws {Error} If the server or the route returns an error\n     */\n    async findFile(uhrpUrl) {\n        const url = new URL(`${this.baseURL}/find`);\n        url.searchParams.set('uhrpUrl', uhrpUrl);\n        const response = await this.authFetch.fetch(url.toString(), {\n            method: 'GET'\n        });\n        if (!response.ok) {\n            throw new Error(`findFile request failed: HTTP ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'error') {\n            const errCode = data.code ?? 'unknown-code';\n            const errDesc = data.description ?? 'no-description';\n            throw new Error(`findFile returned an error: ${errCode} - ${errDesc}`);\n        }\n        return data.data;\n    }\n    /**\n     * Lists all advertisements belonging to the user from the `/list` route.\n     * @returns {Promise<any>} The array of uploads returned by the server\n     * @throws {Error} If the server or the route returns an error\n     */\n    async listUploads() {\n        const url = `${this.baseURL}/list`;\n        const response = await this.authFetch.fetch(url, {\n            method: 'GET'\n        });\n        if (!response.ok) {\n            throw new Error(`listUploads request failed: HTTP ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'error') {\n            const errCode = data.code ?? 'unknown-code';\n            const errDesc = data.description ?? 'no-description';\n            throw new Error(`listUploads returned an error: ${errCode} - ${errDesc}`);\n        }\n        return data.uploads;\n    }\n    /**\n     * Renews the hosting time for an existing file advertisement identified by uhrpUrl.\n     * Calls the `/renew` route to add `additionalMinutes` to the GCS customTime\n     * and re-mint the advertisement token on-chain.\n     *\n     * @param {string} uhrpUrl - The UHRP URL of the file (e.g., \"uhrp://abcd1234...\")\n     * @param {number} additionalMinutes - The number of minutes to extend\n     * @returns {Promise<RenewFileResult>} An object with the new and previous expiry times, plus any cost\n     * @throws {Error} If the request fails or the server returns an error\n     */\n    async renewFile(uhrpUrl, additionalMinutes) {\n        const url = `${this.baseURL}/renew`;\n        const body = { uhrpUrl, additionalMinutes };\n        const response = await this.authFetch.fetch(url, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`renewFile request failed: HTTP ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'error') {\n            const errCode = data.code ?? 'unknown-code';\n            const errDesc = data.description ?? 'no-description';\n            throw new Error(`renewFile returned an error: ${errCode} - ${errDesc}`);\n        }\n        return {\n            status: data.status,\n            prevExpiryTime: data.prevExpiryTime,\n            newExpiryTime: data.newExpiryTime,\n            amount: data.amount\n        };\n    }\n}\n//# sourceMappingURL=StorageUploader.js.map","import { LookupResolver } from '../overlay-tools/index.js';\nimport { StorageUtils } from './index.js';\nimport PushDrop from '../script/templates/PushDrop.js';\nimport Transaction from '../transaction/Transaction.js';\nimport { Hash, Utils } from '../primitives/index.js';\nexport class StorageDownloader {\n    networkPreset = 'mainnet';\n    constructor(config) {\n        this.networkPreset = config?.networkPreset;\n    }\n    /**\n     * Resolves the UHRP URL to a list of HTTP URLs where content can be downloaded.\n     * @param uhrpUrl The UHRP URL to resolve.\n     * @returns A promise that resolves to an array of HTTP URLs.\n     */\n    async resolve(uhrpUrl) {\n        // Use UHRP lookup service\n        const lookupResolver = new LookupResolver({ networkPreset: this.networkPreset });\n        const response = await lookupResolver.query({ service: 'ls_uhrp', query: { uhrpUrl } });\n        if (response.type !== 'output-list') {\n            throw new Error('Lookup answer must be an output list');\n        }\n        const decodedResults = [];\n        const currentTime = Math.floor(Date.now() / 1000);\n        for (let i = 0; i < response.outputs.length; i++) {\n            const tx = Transaction.fromBEEF(response.outputs[i].beef);\n            const { fields } = PushDrop.decode(tx.outputs[response.outputs[i].outputIndex].lockingScript);\n            const expiryTime = new Utils.Reader(fields[3]).readVarIntNum();\n            if (expiryTime < currentTime) {\n                continue;\n            }\n            decodedResults.push(Utils.toUTF8(fields[2]));\n        }\n        return decodedResults;\n    }\n    /**\n     * Downloads the content from the UHRP URL after validating the hash for integrity.\n     * @param uhrpUrl The UHRP URL to download.\n     * @returns A promise that resolves to the downloaded content.\n     */\n    async download(uhrpUrl) {\n        if (!StorageUtils.isValidURL(uhrpUrl)) {\n            throw new Error('Invalid parameter UHRP url');\n        }\n        const hash = StorageUtils.getHashFromURL(uhrpUrl);\n        const downloadURLs = await this.resolve(uhrpUrl);\n        if (!Array.isArray(downloadURLs) || downloadURLs.length === 0) {\n            throw new Error('No one currently hosts this file!');\n        }\n        for (let i = 0; i < downloadURLs.length; i++) {\n            try {\n                // The url is fetched\n                const result = await fetch(downloadURLs[i], { method: 'GET' });\n                // If the request fails, continue to the next url\n                if (!result.ok || result.status >= 400) {\n                    continue;\n                }\n                const body = await result.arrayBuffer();\n                // The body is loaded into a number array\n                const content = [...new Uint8Array(body)];\n                const contentHash = Hash.sha256(content);\n                for (let i = 0; i < contentHash.length; ++i) {\n                    if (contentHash[i] !== hash[i]) {\n                        throw new Error('Value of content does not match hash of the url given');\n                    }\n                }\n                return {\n                    data: content,\n                    mimeType: result.headers.get('Content-Type')\n                };\n            }\n            catch (error) {\n                continue;\n            }\n        }\n        throw new Error(`Unable to download content from ${uhrpUrl}`);\n    }\n}\n//# sourceMappingURL=StorageDownloader.js.map","export const defaultIdentity = {\n    name: 'Unknown Identity',\n    avatarURL: 'XUUB8bbn9fEthk15Ge3zTQXypUShfC94vFjp65v7u5CQ8qkpxzst',\n    identityKey: '',\n    abbreviatedKey: '',\n    badgeIconURL: 'XUUV39HVPkpmMzYNTx7rpKzJvXfeiVyQWg2vfSpjBAuhunTCA9uG',\n    badgeLabel: 'Not verified by anyone you trust.',\n    badgeClickURL: 'https://projectbabbage.com/docs/unknown-identity'\n};\nexport const DEFAULT_IDENTITY_CLIENT_OPTIONS = {\n    protocolID: [1, 'identity'],\n    keyID: '1',\n    tokenAmount: 1,\n    outputIndex: 0\n};\nexport const KNOWN_IDENTITY_TYPES = {\n    identiCert: 'z40BOInXkI8m7f/wBrv4MJ09bZfzZbTj2fJqCtONqCY=',\n    discordCert: '2TgqRC35B1zehGmB21xveZNc7i5iqHc0uxMb+1NMPW4=',\n    phoneCert: 'mffUklUzxbHr65xLohn0hRL0Tq2GjW1GYF/OPfzqJ6A=',\n    xCert: 'vdDWvftf1H+5+ZprUw123kjHlywH+v20aPQTuXgMpNc=',\n    registrant: 'YoPsbfR6YQczjzPdHCoGC7nJsOdPQR50+SYqcWpJ0y0=',\n    emailCert: 'exOl3KM0dIJ04EW5pZgbZmPag6MdJXd3/a1enmUU/BA=',\n    anyone: 'mfkOMfLDQmrr3SBxBQ5WeE+6Hy3VJRFq6w4A5Ljtlis=',\n    self: 'Hkge6X5JRxt1cWXtHLCrSTg6dCVTxjQJJ48iOYd7n3g=',\n    coolCert: 'AGfk/WrT1eBDXpz3mcw386Zww2HmqcIn3uY6x4Af1eo='\n};\n//# sourceMappingURL=index.js.map","import { AuthFetch } from '../auth/clients/index.js';\nimport { DEFAULT_IDENTITY_CLIENT_OPTIONS, defaultIdentity, KNOWN_IDENTITY_TYPES } from './types/index.js';\nimport { WalletClient } from '../wallet/index.js';\nimport { Transaction } from '../transaction/index.js';\nimport Certificate from '../auth/certificates/Certificate.js';\nimport { PushDrop } from '../script/index.js';\nimport { PrivateKey, Utils } from '../primitives/index.js';\nimport { TopicBroadcaster } from '../overlay-tools/index.js';\n/**\n * IdentityClient lets you discover who others are, and let the world know who you are.\n */\nexport class IdentityClient {\n    options;\n    originator;\n    authClient;\n    wallet;\n    constructor(wallet, options = DEFAULT_IDENTITY_CLIENT_OPTIONS, originator) {\n        this.options = options;\n        this.originator = originator;\n        this.wallet = wallet ?? new WalletClient();\n        this.authClient = new AuthFetch(this.wallet);\n    }\n    /**\n     * Publicly reveals selected fields from a given certificate by creating a publicly verifiable certificate.\n     * The publicly revealed certificate is included in a blockchain transaction and broadcast to a federated overlay node.\n     *\n     * @param {Certificate} certificate - The master certificate to selectively reveal.\n     * @param {CertificateFieldNameUnder50Bytes[]} fieldsToReveal - An array of certificate field names to reveal. Only these fields will be included in the public certificate.\n     *\n     * @returns {Promise<object>} A promise that resolves with the broadcast result from the overlay network.\n     * @throws {Error} Throws an error if the certificate is invalid, the fields cannot be revealed, or if the broadcast fails.\n     */\n    async publiclyRevealAttributes(certificate, fieldsToReveal) {\n        if (Object.keys(certificate.fields).length === 0) {\n            throw new Error('Public reveal failed: Certificate has no fields to reveal!');\n        }\n        if (fieldsToReveal.length === 0) {\n            throw new Error('Public reveal failed: You must reveal at least one field!');\n        }\n        try {\n            const masterCert = new Certificate(certificate.type, certificate.serialNumber, certificate.subject, certificate.certifier, certificate.revocationOutpoint, certificate.fields, certificate.signature);\n            await masterCert.verify();\n        }\n        catch (error) {\n            throw new Error('Public reveal failed: Certificate verification failed!');\n        }\n        // Given we already have a master certificate from a certifier,\n        // create an anyone verifiable certificate with selectively revealed fields\n        const { keyringForVerifier } = await this.wallet.proveCertificate({\n            certificate,\n            fieldsToReveal,\n            verifier: new PrivateKey(1).toPublicKey().toString()\n        });\n        // Build the lockingScript with pushdrop.create() and the transaction with createAction()\n        const lockingScript = await new PushDrop(this.wallet).lock([Utils.toArray(JSON.stringify({ ...certificate, keyring: keyringForVerifier }))], this.options.protocolID, this.options.keyID, 'anyone', true, true);\n        // TODO: Consider verification and if this is necessary\n        // counterpartyCanVerifyMyOwnership: true\n        const { tx } = await this.wallet.createAction({\n            description: 'Create a new Identity Token',\n            outputs: [{\n                    satoshis: this.options.tokenAmount,\n                    lockingScript: lockingScript.toHex(),\n                    outputDescription: 'Identity Token'\n                }],\n            options: {\n                randomizeOutputs: false\n            }\n        });\n        if (tx !== undefined) {\n            // Submit the transaction to an overlay\n            const broadcaster = new TopicBroadcaster(['tm_identity'], {\n                networkPreset: (await (this.wallet.getNetwork({}))).network\n            });\n            return await broadcaster.broadcast(Transaction.fromAtomicBEEF(tx));\n        }\n        throw new Error('Public reveal failed: failed to create action!');\n    }\n    /**\n    * Resolves displayable identity certificates, issued to a given identity key by a trusted certifier.\n    *\n    * @param {DiscoverByIdentityKeyArgs} args - Arguments for requesting the discovery based on the identity key.\n    * @returns {Promise<DisplayableIdentity[]>} The promise resolves to displayable identities.\n    */\n    async resolveByIdentityKey(args) {\n        const { certificates } = await this.wallet.discoverByIdentityKey(args, this.originator);\n        return certificates.map(cert => {\n            return IdentityClient.parseIdentity(cert);\n        });\n    }\n    /**\n     * Resolves displayable identity certificates by specific identity attributes, issued by a trusted entity.\n     *\n     * @param {DiscoverByAttributesArgs} args - Attributes and optional parameters used to discover certificates.\n     * @returns {Promise<DisplayableIdentity[]>} The promise resolves to displayable identities.\n     */\n    async resolveByAttributes(args) {\n        const { certificates } = await this.wallet.discoverByAttributes(args, this.originator);\n        return certificates.map(cert => {\n            return IdentityClient.parseIdentity(cert);\n        });\n    }\n    /**\n     * TODO: Implement once revocation overlay is created\n     * Remove public certificate revelation from overlay services by spending the identity token\n     * @param serialNumber - Unique serial number of the certificate to revoke revelation\n     */\n    // async revokeCertificateRevelation(\n    //   serialNumber: Base64String\n    // ): Promise<BroadcastResponse | BroadcastFailure> {\n    //   // 1. Find existing UTXO\n    //   const lookupResolver = new LookupResolver()\n    //   const result = await lookupResolver.query({\n    //     service: 'ls_identity',\n    //     query: {\n    //       serialNumber\n    //     }\n    //   })\n    //   let outpoint: string\n    //   let lockingScript: LockingScript | undefined\n    //   if (result.type === 'output-list') {\n    //     const tx = Transaction.fromAtomicBEEF(result.outputs[this.options.outputIndex].beef)\n    //     outpoint = `${tx.id('hex')}.${this.options.outputIndex}` // Consider better way\n    //     lockingScript = tx.outputs[this.options.outputIndex].lockingScript\n    //   }\n    //   if (lockingScript === undefined) {\n    //     throw new Error('Failed to get locking script for revelation output!')\n    //   }\n    //   // 2. Parse results\n    //   const { signableTransaction } = await this.wallet.createAction({\n    //     description: '',\n    //     inputs: [{\n    //       inputDescription: 'Spend certificate revelation token',\n    //       outpoint,\n    //       unlockingScriptLength: 73\n    //     }],\n    //     options: {\n    //       randomizeOutputs: false\n    //     }\n    //   })\n    //   if (signableTransaction === undefined) {\n    //     throw new Error('Failed to create signable transaction')\n    //   }\n    //   const partialTx = Transaction.fromBEEF(signableTransaction.tx)\n    //   const unlocker = new PushDrop(this.wallet).unlock(\n    //     this.options.protocolID,\n    //     this.options.keyID,\n    //     'self',\n    //     'all',\n    //     false,\n    //     1,\n    //     lockingScript\n    //   )\n    //   const unlockingScript = await unlocker.sign(partialTx, this.options.outputIndex)\n    //   const { tx: signedTx } = await this.wallet.signAction({\n    //     reference: signableTransaction.reference,\n    //     spends: {\n    //       [this.options.outputIndex]: {\n    //         unlockingScript: unlockingScript.toHex()\n    //       }\n    //     }\n    //   })\n    //   // 4. Return broadcast status\n    //   // Submit the transaction to an overlay\n    //   const broadcaster = new SHIPBroadcaster(['tm_identity'])\n    //   return await broadcaster.broadcast(Transaction.fromAtomicBEEF(signedTx as number[]))\n    // }\n    /**\n     * Parse out identity and certifier attributes to display from an IdentityCertificate\n     * @param identityToParse - The Identity Certificate to parse\n     * @returns - IdentityToDisplay\n     */\n    static parseIdentity(identityToParse) {\n        const { type, decryptedFields, certifierInfo } = identityToParse;\n        let name, avatarURL, badgeLabel, badgeIconURL, badgeClickURL;\n        // Parse out the name to display based on the specific certificate type which has clearly defined fields.\n        switch (type) {\n            case KNOWN_IDENTITY_TYPES.xCert:\n                name = decryptedFields.userName;\n                avatarURL = decryptedFields.profilePhoto;\n                badgeLabel = `X account certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://socialcert.net'; // TODO Make a specific page for this.\n                break;\n            case KNOWN_IDENTITY_TYPES.discordCert:\n                name = decryptedFields.userName;\n                avatarURL = decryptedFields.profilePhoto;\n                badgeLabel = `Discord account certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://socialcert.net'; // TODO Make a specific page for this.\n                break;\n            case KNOWN_IDENTITY_TYPES.emailCert:\n                name = decryptedFields.email;\n                avatarURL = 'XUTZxep7BBghAJbSBwTjNfmcsDdRFs5EaGEgkESGSgjJVYgMEizu';\n                badgeLabel = `Email certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://socialcert.net'; // TODO Make a specific page for this.\n                break;\n            case KNOWN_IDENTITY_TYPES.phoneCert:\n                name = decryptedFields.phoneNumber;\n                avatarURL = 'XUTLxtX3ELNUwRhLwL7kWNGbdnFM8WG2eSLv84J7654oH8HaJWrU';\n                badgeLabel = `Phone certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://socialcert.net'; // TODO Make a specific page for this.\n                break;\n            case KNOWN_IDENTITY_TYPES.identiCert:\n                name = `${decryptedFields.firstName} ${decryptedFields.lastName}`;\n                avatarURL = decryptedFields.profilePhoto;\n                badgeLabel = `Government ID certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://identicert.me'; // TODO Make a specific page for this.\n                break;\n            case KNOWN_IDENTITY_TYPES.registrant:\n                name = decryptedFields.name;\n                avatarURL = decryptedFields.icon;\n                badgeLabel = `Entity certified by ${certifierInfo.name}`;\n                badgeIconURL = certifierInfo.iconUrl;\n                badgeClickURL = 'https://projectbabbage.com/docs/registrant'; // TODO: Make this doc page exist\n                break;\n            case KNOWN_IDENTITY_TYPES.coolCert:\n                name = decryptedFields.cool === 'true' ? 'Cool Person!' : 'Not cool!';\n                break;\n            case KNOWN_IDENTITY_TYPES.anyone:\n                name = 'Anyone';\n                avatarURL = 'XUT4bpQ6cpBaXi1oMzZsXfpkWGbtp2JTUYAoN7PzhStFJ6wLfoeR';\n                badgeLabel = 'Represents the ability for anyone to access this information.';\n                badgeIconURL = 'XUUV39HVPkpmMzYNTx7rpKzJvXfeiVyQWg2vfSpjBAuhunTCA9uG';\n                badgeClickURL = 'https://projectbabbage.com/docs/anyone-identity'; // TODO: Make this doc page exist\n                break;\n            case KNOWN_IDENTITY_TYPES.self:\n                name = 'You';\n                avatarURL = 'XUT9jHGk2qace148jeCX5rDsMftkSGYKmigLwU2PLLBc7Hm63VYR';\n                badgeLabel = 'Represents your ability to access this information.';\n                badgeIconURL = 'XUUV39HVPkpmMzYNTx7rpKzJvXfeiVyQWg2vfSpjBAuhunTCA9uG';\n                badgeClickURL = 'https://projectbabbage.com/docs/self-identity'; // TODO: Make this doc page exist\n                break;\n            default:\n                name = defaultIdentity.name;\n                avatarURL = decryptedFields.profilePhoto;\n                badgeLabel = defaultIdentity.badgeLabel;\n                badgeIconURL = defaultIdentity.badgeIconURL;\n                badgeClickURL = defaultIdentity.badgeClickURL; // TODO: Make this doc page exist\n                break;\n        }\n        return {\n            name,\n            avatarURL,\n            abbreviatedKey: identityToParse.subject.length > 0 ? `${identityToParse.subject.substring(0, 10)}...` : '',\n            identityKey: identityToParse.subject,\n            badgeIconURL,\n            badgeLabel,\n            badgeClickURL\n        };\n    }\n}\n//# sourceMappingURL=IdentityClient.js.map","import { WalletClient } from '../wallet/index.js';\nimport { Utils } from '../primitives/index.js';\nimport { Transaction } from '../transaction/index.js';\nimport { LookupResolver, TopicBroadcaster } from '../overlay-tools/index.js';\nimport { PushDrop, LockingScript } from '../script/index.js';\nconst REGISTRANT_TOKEN_AMOUNT = 1;\n/**\n * RegistryClient manages on-chain registry definitions for three types:\n * - basket (basket-based items)\n * - protocol (protocol-based items)\n * - certificate (certificate-based items)\n *\n * It provides methods to:\n * - Register new definitions using pushdrop-based UTXOs.\n * - Resolve existing definitions using a lookup service.\n * - List registry entries associated with the operator's wallet.\n * - Revoke an existing registry entry by spending its UTXO.\n *\n * Registry operators use this client to establish and manage\n * canonical references for baskets, protocols, and certificate types.\n */\nexport class RegistryClient {\n    wallet;\n    network;\n    constructor(wallet = new WalletClient()) {\n        this.wallet = wallet;\n    }\n    /**\n     * Publishes a new on-chain definition for baskets, protocols, or certificates.\n     * The definition data is encoded in a pushdrop-based UTXO.\n     *\n     * Registry operators (i.e., identity key owners) can create these definitions\n     * to establish canonical references for basket IDs, protocol specs, or certificate schemas.\n     *\n     * @param data - Structured information about a 'basket', 'protocol', or 'certificate'.\n     * @returns A promise with the broadcast result or failure.\n     */\n    async registerDefinition(data) {\n        const registryOperator = (await this.wallet.getPublicKey({ identityKey: true })).publicKey;\n        const pushdrop = new PushDrop(this.wallet);\n        // Convert definition data into PushDrop fields\n        const fields = this.buildPushDropFields(data, registryOperator);\n        // Convert the user-friendly definitionType to the actual wallet protocol\n        const protocol = this.mapDefinitionTypeToWalletProtocol(data.definitionType);\n        // Lock the fields into a pushdrop-based UTXO\n        const lockingScript = await pushdrop.lock(fields, protocol, '1', 'anyone', true);\n        // Create a transaction\n        const { tx } = await this.wallet.createAction({\n            description: `Register a new ${data.definitionType} item`,\n            outputs: [\n                {\n                    satoshis: REGISTRANT_TOKEN_AMOUNT,\n                    lockingScript: lockingScript.toHex(),\n                    outputDescription: `New ${data.definitionType} registration token`,\n                    basket: this.mapDefinitionTypeToBasketName(data.definitionType)\n                }\n            ],\n            options: {\n                randomizeOutputs: false\n            }\n        });\n        if (tx === undefined) {\n            throw new Error(`Failed to create ${data.definitionType} registration transaction!`);\n        }\n        // Broadcast to the relevant topic\n        const broadcaster = new TopicBroadcaster([this.mapDefinitionTypeToTopic(data.definitionType)], {\n            networkPreset: this.network ??= (await this.wallet.getNetwork({})).network\n        });\n        return await broadcaster.broadcast(Transaction.fromAtomicBEEF(tx));\n    }\n    /**\n     * Resolves registrant tokens of a particular type using a lookup service.\n     *\n     * The query object shape depends on the registry type:\n     * - For \"basket\", the query is of type BasketMapQuery:\n     *   { basketID?: string; name?: string; registryOperators?: string[]; }\n     * - For \"protocol\", the query is of type ProtoMapQuery:\n     *   { name?: string; registryOperators?: string[]; protocolID?: WalletProtocol; }\n     * - For \"certificate\", the query is of type CertMapQuery:\n     *   { type?: string; name?: string; registryOperators?: string[]; }\n     *\n     * @param definitionType - The registry type, which can be 'basket', 'protocol', or 'certificate'.\n     * @param query - The query object used to filter registry records, whose shape is determined by the registry type.\n     * @returns A promise that resolves to an array of matching registry records.\n     */\n    async resolve(definitionType, query) {\n        const resolver = new LookupResolver();\n        const serviceName = this.mapDefinitionTypeToServiceName(definitionType);\n        // Make the lookup query\n        const result = await resolver.query({ service: serviceName, query });\n        if (result.type !== 'output-list') {\n            return [];\n        }\n        const parsedRegistryRecords = [];\n        for (const output of result.outputs) {\n            try {\n                const parsedTx = Transaction.fromBEEF(output.beef);\n                const lockingScript = parsedTx.outputs[output.outputIndex].lockingScript;\n                const record = await this.parseLockingScript(definitionType, lockingScript);\n                parsedRegistryRecords.push(record);\n            }\n            catch {\n                // Skip invalid or non-pushdrop outputs\n            }\n        }\n        return parsedRegistryRecords;\n    }\n    /**\n     * Lists the registry operator's published definitions for the given type.\n     *\n     * Returns parsed registry records including transaction details such as txid, outputIndex, satoshis, and the locking script.\n     *\n     * @param definitionType - The type of registry definition to list ('basket', 'protocol', or 'certificate').\n     * @returns A promise that resolves to an array of RegistryRecord objects.\n     */\n    async listOwnRegistryEntries(definitionType) {\n        const relevantBasketName = this.mapDefinitionTypeToBasketName(definitionType);\n        const { outputs, BEEF } = await this.wallet.listOutputs({\n            basket: relevantBasketName,\n            include: 'entire transactions'\n        });\n        const results = [];\n        for (const output of outputs) {\n            if (!output.spendable) {\n                continue;\n            }\n            try {\n                const [txid, outputIndex] = output.outpoint.split('.');\n                const tx = Transaction.fromBEEF(BEEF);\n                const lockingScript = tx.outputs[outputIndex].lockingScript;\n                const record = await this.parseLockingScript(definitionType, lockingScript);\n                results.push({\n                    ...record,\n                    txid,\n                    outputIndex: Number(outputIndex),\n                    satoshis: output.satoshis,\n                    lockingScript: lockingScript.toHex(),\n                    beef: BEEF\n                });\n            }\n            catch {\n                // Ignore parse errors\n            }\n        }\n        return results;\n    }\n    /**\n     * Revokes a registry record by spending its associated UTXO.\n     *\n     * @param registryRecord - Must have valid txid, outputIndex, and lockingScript.\n     * @returns Broadcast success/failure.\n     */\n    async revokeOwnRegistryEntry(registryRecord) {\n        if (registryRecord.txid === undefined || typeof registryRecord.outputIndex === 'undefined' || registryRecord.lockingScript === undefined) {\n            throw new Error('Invalid registry record. Missing txid, outputIndex, or lockingScript.');\n        }\n        // Check if the registry record belongs to the current user\n        const currentIdentityKey = (await this.wallet.getPublicKey({ identityKey: true })).publicKey;\n        if (registryRecord.registryOperator !== currentIdentityKey) {\n            throw new Error('This registry token does not belong to the current wallet.');\n        }\n        // Create a descriptive label for the item we’re revoking\n        const itemIdentifier = registryRecord.definitionType === 'basket'\n            ? registryRecord.basketID\n            : registryRecord.definitionType === 'protocol'\n                ? registryRecord.name\n                : registryRecord.definitionType === 'certificate'\n                    ? (registryRecord.name !== undefined ? registryRecord.name : registryRecord.type)\n                    : 'unknown';\n        const outpoint = `${registryRecord.txid}.${registryRecord.outputIndex}`;\n        const { signableTransaction } = await this.wallet.createAction({\n            description: `Revoke ${registryRecord.definitionType} item: ${itemIdentifier}`,\n            inputBEEF: registryRecord.beef,\n            inputs: [\n                {\n                    outpoint,\n                    unlockingScriptLength: 73,\n                    inputDescription: `Revoking ${registryRecord.definitionType} token`\n                }\n            ]\n        });\n        if (signableTransaction === undefined) {\n            throw new Error('Failed to create signable transaction.');\n        }\n        const partialTx = Transaction.fromBEEF(signableTransaction.tx);\n        // Prepare the unlocker\n        const pushdrop = new PushDrop(this.wallet);\n        const unlocker = await pushdrop.unlock(this.mapDefinitionTypeToWalletProtocol(registryRecord.definitionType), '1', 'anyone', 'all', false, registryRecord.satoshis, LockingScript.fromHex(registryRecord.lockingScript));\n        // Convert to Transaction, apply signature\n        const finalUnlockScript = await unlocker.sign(partialTx, registryRecord.outputIndex);\n        // Complete signing with the final unlock script\n        const { tx: signedTx } = await this.wallet.signAction({\n            reference: signableTransaction.reference,\n            spends: {\n                [registryRecord.outputIndex]: {\n                    unlockingScript: finalUnlockScript.toHex()\n                }\n            },\n            options: {\n                acceptDelayedBroadcast: false\n            }\n        });\n        if (signedTx === undefined) {\n            throw new Error('Failed to finalize the transaction signature.');\n        }\n        // Broadcast\n        const broadcaster = new TopicBroadcaster([this.mapDefinitionTypeToTopic(registryRecord.definitionType)], {\n            networkPreset: this.network ??= (await this.wallet.getNetwork({})).network\n        });\n        return await broadcaster.broadcast(Transaction.fromAtomicBEEF(signedTx));\n    }\n    // --------------------------------------------------------------------------\n    // INTERNAL UTILITY METHODS\n    // --------------------------------------------------------------------------\n    /**\n     * Convert definition data into an array of pushdrop fields (strings).\n     * Each definition type has a slightly different shape.\n     */\n    buildPushDropFields(data, registryOperator) {\n        let fields;\n        switch (data.definitionType) {\n            case 'basket':\n                fields = [\n                    data.basketID,\n                    data.name,\n                    data.iconURL,\n                    data.description,\n                    data.documentationURL\n                ];\n                break;\n            case 'protocol':\n                fields = [\n                    JSON.stringify(data.protocolID),\n                    data.name,\n                    data.iconURL,\n                    data.description,\n                    data.documentationURL\n                ];\n                break;\n            case 'certificate':\n                fields = [\n                    data.type,\n                    data.name,\n                    data.iconURL,\n                    data.description,\n                    data.documentationURL,\n                    JSON.stringify(data.fields)\n                ];\n                break;\n            default:\n                throw new Error('Unsupported definition type');\n        }\n        // Append the operator's public identity key last\n        fields.push(registryOperator);\n        return fields.map(field => Utils.toArray(field));\n    }\n    /**\n     * Decodes a pushdrop locking script for a given definition type,\n     * returning a typed record with the appropriate fields.\n     */\n    async parseLockingScript(definitionType, lockingScript) {\n        const decoded = PushDrop.decode(lockingScript);\n        if (decoded.fields.length === 0) {\n            throw new Error('Not a valid registry pushdrop script.');\n        }\n        let registryOperator;\n        let parsedData;\n        switch (definitionType) {\n            case 'basket': {\n                if (decoded.fields.length !== 7) {\n                    throw new Error('Unexpected field count for basket type.');\n                }\n                const [basketID, name, iconURL, description, docURL, operator] = decoded.fields;\n                registryOperator = Utils.toUTF8(operator);\n                parsedData = {\n                    definitionType: 'basket',\n                    basketID: Utils.toUTF8(basketID),\n                    name: Utils.toUTF8(name),\n                    iconURL: Utils.toUTF8(iconURL),\n                    description: Utils.toUTF8(description),\n                    documentationURL: Utils.toUTF8(docURL)\n                };\n                break;\n            }\n            case 'protocol': {\n                if (decoded.fields.length !== 7) {\n                    throw new Error('Unexpected field count for protocol type.');\n                }\n                const [protocolID, name, iconURL, description, docURL, operator] = decoded.fields;\n                registryOperator = Utils.toUTF8(operator);\n                parsedData = {\n                    definitionType: 'protocol',\n                    protocolID: deserializeWalletProtocol(Utils.toUTF8(protocolID)),\n                    name: Utils.toUTF8(name),\n                    iconURL: Utils.toUTF8(iconURL),\n                    description: Utils.toUTF8(description),\n                    documentationURL: Utils.toUTF8(docURL)\n                };\n                break;\n            }\n            case 'certificate': {\n                if (decoded.fields.length !== 8) {\n                    throw new Error('Unexpected field count for certificate type.');\n                }\n                const [certType, name, iconURL, description, docURL, fieldsJSON, operator] = decoded.fields;\n                registryOperator = Utils.toUTF8(operator);\n                let parsedFields = {};\n                try {\n                    parsedFields = JSON.parse(Utils.toUTF8(fieldsJSON));\n                }\n                catch {\n                    // If there's a JSON parse error, assume empty\n                }\n                parsedData = {\n                    definitionType: 'certificate',\n                    type: Utils.toUTF8(certType),\n                    name: Utils.toUTF8(name),\n                    iconURL: Utils.toUTF8(iconURL),\n                    description: Utils.toUTF8(description),\n                    documentationURL: Utils.toUTF8(docURL),\n                    fields: parsedFields\n                };\n                break;\n            }\n            default:\n                throw new Error(`Unsupported definition type: ${definitionType}`);\n        }\n        // Return the typed data plus the operator key\n        return { ...parsedData, registryOperator };\n    }\n    /**\n     * Convert our definitionType to the wallet protocol format ([protocolID, keyID]).\n     */\n    mapDefinitionTypeToWalletProtocol(definitionType) {\n        switch (definitionType) {\n            case 'basket':\n                return [1, 'basketmap'];\n            case 'protocol':\n                return [1, 'protomap'];\n            case 'certificate':\n                return [1, 'certmap'];\n            default:\n                throw new Error(`Unknown definition type: ${definitionType}`);\n        }\n    }\n    /**\n     * Convert 'basket'|'protocol'|'certificate' to the basket name used by the wallet.\n     */\n    mapDefinitionTypeToBasketName(definitionType) {\n        switch (definitionType) {\n            case 'basket':\n                return 'basketmap';\n            case 'protocol':\n                return 'protomap';\n            case 'certificate':\n                return 'certmap';\n            default:\n                throw new Error(`Unknown definition type: ${definitionType}`);\n        }\n    }\n    /**\n     * Convert 'basket'|'protocol'|'certificate' to the broadcast topic name.\n     */\n    mapDefinitionTypeToTopic(definitionType) {\n        switch (definitionType) {\n            case 'basket':\n                return 'tm_basketmap';\n            case 'protocol':\n                return 'tm_protomap';\n            case 'certificate':\n                return 'tm_certmap';\n            default:\n                throw new Error(`Unknown definition type: ${definitionType}`);\n        }\n    }\n    /**\n     * Convert 'basket'|'protocol'|'certificate' to the lookup service name.\n     */\n    mapDefinitionTypeToServiceName(definitionType) {\n        switch (definitionType) {\n            case 'basket':\n                return 'ls_basketmap';\n            case 'protocol':\n                return 'ls_protomap';\n            case 'certificate':\n                return 'ls_certmap';\n            default:\n                throw new Error(`Unknown definition type: ${definitionType}`);\n        }\n    }\n}\nexport function deserializeWalletProtocol(str) {\n    // Parse the JSON string back into a JavaScript value.\n    const parsed = JSON.parse(str);\n    // Validate that the parsed value is an array with exactly two elements.\n    if (!Array.isArray(parsed) || parsed.length !== 2) {\n        throw new Error('Invalid wallet protocol format.');\n    }\n    const [security, protocolString] = parsed;\n    // Validate that the security level is one of the allowed numbers.\n    if (![0, 1, 2].includes(security)) {\n        throw new Error('Invalid security level.');\n    }\n    // Validate that the protocol string is a string and its length is within the allowed bounds.\n    if (typeof protocolString !== 'string') {\n        throw new Error('Invalid protocolID');\n    }\n    return [security, protocolString];\n}\n//# sourceMappingURL=RegistryClient.js.map","import PushDrop from '../script/templates/PushDrop.js';\nimport * as Utils from '../primitives/utils.js';\nimport WalletClient from '../wallet/WalletClient.js';\nimport Transaction from '../transaction/Transaction.js';\nimport { Beef } from '../transaction/Beef.js';\n/**\n * Implements a key-value storage system backed by transaction outputs managed by a wallet.\n * Each key-value pair is represented by a PushDrop token output in a specific context (basket).\n * Allows setting, getting, and removing key-value pairs, with optional encryption.\n */\nexport default class LocalKVStore {\n    /**\n     * The wallet interface used to manage outputs and perform cryptographic operations.\n     * @private\n     * @readonly\n     */\n    wallet;\n    /**\n     * The context (basket name) used to namespace the key-value pairs within the wallet.\n     * @private\n     * @readonly\n     */\n    context;\n    /**\n     * Flag indicating whether values should be encrypted before storing.\n     * @private\n     * @readonly\n     */\n    encrypt;\n    /**\n     * An originator to use with PushDrop and the wallet.\n     * @private\n     * @readonly\n     */\n    originator;\n    acceptDelayedBroadcast = false;\n    /**\n     * A map to store locks for each key to ensure atomic updates.\n     * @private\n     */\n    keyLocks = new Map();\n    /**\n     * Creates an instance of the localKVStore.\n     *\n     * @param {WalletInterface} [wallet=new WalletClient()] - The wallet interface to use. Defaults to a new WalletClient instance.\n     * @param {string} [context='kvstoredefault'] - The context (basket) for namespacing keys. Defaults to 'kvstore default'.\n     * @param {boolean} [encrypt=true] - Whether to encrypt values. Defaults to true.\n     * @param {string} [originator] — An originator to use with PushDrop and the wallet, if provided.\n     * @throws {Error} If the context is missing or empty.\n     */\n    constructor(wallet = new WalletClient(), context = 'kvstore default', encrypt = true, originator, acceptDelayedBroadcast = false) {\n        if (typeof context !== 'string' || context.length < 1) {\n            throw new Error('A context in which to operate is required.');\n        }\n        this.wallet = wallet;\n        this.context = context;\n        this.encrypt = encrypt;\n        this.originator = originator;\n        this.acceptDelayedBroadcast = acceptDelayedBroadcast;\n    }\n    async queueOperationOnKey(key) {\n        // Check if a lock exists for this key and wait for it to resolve\n        let lockQueue = this.keyLocks.get(key);\n        if (lockQueue == null) {\n            lockQueue = [];\n            this.keyLocks.set(key, lockQueue);\n        }\n        let resolveNewLock = () => { };\n        const newLock = new Promise((resolve) => {\n            resolveNewLock = resolve;\n            if (lockQueue != null) {\n                lockQueue.push(resolve);\n            }\n        });\n        // If we are the only request, resolve the lock immediately, queue remains at 1 item until request ends.\n        if (lockQueue.length === 1) {\n            resolveNewLock();\n        }\n        await newLock;\n        return lockQueue;\n    }\n    finishOperationOnKey(key, lockQueue) {\n        lockQueue.shift(); // Remove the current lock from the queue\n        if (lockQueue.length > 0) {\n            // If there are more locks waiting, resolve the next one\n            lockQueue[0]();\n        }\n    }\n    getProtocol(key) {\n        return { protocolID: [2, this.context], keyID: key };\n    }\n    async getOutputs(key, limit) {\n        const results = await this.wallet.listOutputs({\n            basket: this.context,\n            tags: [key],\n            tagQueryMode: 'all',\n            include: 'entire transactions',\n            limit\n        });\n        return results;\n    }\n    /**\n     * Retrieves the value associated with a given key.\n     *\n     * @param {string} key - The key to retrieve the value for.\n     * @param {string | undefined} [defaultValue=undefined] - The value to return if the key is not found.\n     * @returns {Promise<string | undefined>} A promise that resolves to the value as a string,\n     *   the defaultValue if the key is not found, or undefined if no defaultValue is provided.\n     * @throws {Error} If too many outputs are found for the key (ambiguous state).\n     * @throws {Error} If the found output's locking script cannot be decoded or represents an invalid token format.\n     */\n    async get(key, defaultValue = undefined) {\n        const lockQueue = await this.queueOperationOnKey(key);\n        try {\n            const r = await this.lookupValue(key, defaultValue, 5);\n            return r.value;\n        }\n        finally {\n            this.finishOperationOnKey(key, lockQueue);\n        }\n    }\n    getLockingScript(output, beef) {\n        const [txid, vout] = output.outpoint.split('.');\n        const tx = beef.findTxid(txid)?.tx;\n        if (tx == null) {\n            throw new Error(`beef must contain txid ${txid}`);\n        }\n        const lockingScript = tx.outputs[Number(vout)].lockingScript;\n        return lockingScript;\n    }\n    async lookupValue(key, defaultValue, limit) {\n        const lor = await this.getOutputs(key, limit);\n        const r = { value: defaultValue, outpoint: undefined, lor };\n        const { outputs } = lor;\n        if (outputs.length === 0) {\n            return r;\n        }\n        const output = outputs.slice(-1)[0];\n        r.outpoint = output.outpoint;\n        let field;\n        try {\n            if (lor.BEEF === undefined) {\n                throw new Error('entire transactions listOutputs option must return valid BEEF');\n            }\n            const lockingScript = this.getLockingScript(output, Beef.fromBinary(lor.BEEF));\n            const decoded = PushDrop.decode(lockingScript);\n            if (decoded.fields.length < 1 || decoded.fields.length > 2) {\n                throw new Error('Invalid token.');\n            }\n            field = decoded.fields[0];\n        }\n        catch (_) {\n            throw new Error(`Invalid value found. You need to call set to collapse the corrupted state (or relinquish the corrupted ${outputs[0].outpoint} output from the ${this.context} basket) before you can get this value again.`);\n        }\n        if (!this.encrypt) {\n            r.value = Utils.toUTF8(field);\n        }\n        else {\n            const { plaintext } = await this.wallet.decrypt({\n                ...this.getProtocol(key),\n                ciphertext: field\n            });\n            r.value = Utils.toUTF8(plaintext);\n        }\n        return r;\n    }\n    getInputs(outputs) {\n        const inputs = [];\n        for (let i = 0; i < outputs.length; i++) {\n            inputs.push({\n                outpoint: outputs[i].outpoint,\n                unlockingScriptLength: 74,\n                inputDescription: 'Previous key-value token'\n            });\n        }\n        return inputs;\n    }\n    async getSpends(key, outputs, pushdrop, atomicBEEF) {\n        const p = this.getProtocol(key);\n        const tx = Transaction.fromAtomicBEEF(atomicBEEF);\n        const spends = {};\n        for (let i = 0; i < outputs.length; i++) {\n            const unlocker = pushdrop.unlock(p.protocolID, p.keyID, 'self');\n            const unlockingScript = await unlocker.sign(tx, i);\n            spends[i] = {\n                unlockingScript: unlockingScript.toHex()\n            };\n        }\n        return spends;\n    }\n    /**\n     * Sets or updates the value associated with a given key atomically.\n     * If the key already exists (one or more outputs found), it spends the existing output(s)\n     * and creates a new one with the updated value. If multiple outputs exist for the key,\n     * they are collapsed into a single new output.\n     * If the key does not exist, it creates a new output.\n     * Handles encryption if enabled.\n     * If signing the update/collapse transaction fails, it relinquishes the original outputs and starts over with a new chain.\n     * Ensures atomicity by locking the key during the operation, preventing concurrent updates\n     * to the same key from missing earlier changes.\n     *\n     * @param {string} key - The key to set or update.\n     * @param {string} value - The value to associate with the key.\n     * @returns {Promise<OutpointString>} A promise that resolves to the outpoint string (txid.vout) of the new or updated token output.\n     */\n    async set(key, value) {\n        const lockQueue = await this.queueOperationOnKey(key);\n        try {\n            const current = await this.lookupValue(key, undefined, 10);\n            if (current.value === value) {\n                if (current.outpoint === undefined) {\n                    throw new Error('outpoint must be valid when value is valid and unchanged');\n                }\n                // Don't create a new transaction if the value doesn't need to change\n                return current.outpoint;\n            }\n            const protocol = this.getProtocol(key);\n            let valueAsArray = Utils.toArray(value, 'utf8');\n            if (this.encrypt) {\n                const { ciphertext } = await this.wallet.encrypt({\n                    ...protocol,\n                    plaintext: valueAsArray\n                });\n                valueAsArray = ciphertext;\n            }\n            const pushdrop = new PushDrop(this.wallet, this.originator);\n            const lockingScript = await pushdrop.lock([valueAsArray], protocol.protocolID, protocol.keyID, 'self');\n            const { outputs, BEEF: inputBEEF } = current.lor;\n            let outpoint;\n            try {\n                const inputs = this.getInputs(outputs);\n                const { txid, signableTransaction } = await this.wallet.createAction({\n                    description: `Update ${key} in ${this.context}`,\n                    inputBEEF,\n                    inputs,\n                    outputs: [{\n                            basket: this.context,\n                            tags: [key],\n                            lockingScript: lockingScript.toHex(),\n                            satoshis: 1,\n                            outputDescription: 'Key-value token'\n                        }],\n                    options: {\n                        acceptDelayedBroadcast: this.acceptDelayedBroadcast,\n                        randomizeOutputs: false\n                    }\n                });\n                if (outputs.length > 0 && typeof signableTransaction !== 'object') {\n                    throw new Error('Wallet did not return a signable transaction when expected.');\n                }\n                if (signableTransaction == null) {\n                    outpoint = `${txid}.0`;\n                }\n                else {\n                    const spends = await this.getSpends(key, outputs, pushdrop, signableTransaction.tx);\n                    const { txid } = await this.wallet.signAction({\n                        reference: signableTransaction.reference,\n                        spends\n                    });\n                    outpoint = `${txid}.0`;\n                }\n            }\n            catch (_) {\n                throw new Error(`There are ${outputs.length} outputs with tag ${key} that cannot be unlocked.`);\n            }\n            return outpoint;\n        }\n        finally {\n            this.finishOperationOnKey(key, lockQueue);\n        }\n    }\n    /**\n     * Removes the key-value pair associated with the given key.\n     * It finds the existing output(s) for the key and spends them without creating a new output.\n     * If multiple outputs exist, they are all spent in the same transaction.\n     * If the key does not exist, it does nothing.\n     * If signing the removal transaction fails, it relinquishes the original outputs instead of spending.\n     *\n     * @param {string} key - The key to remove.\n     * @returns {Promise<string[]>} A promise that resolves to the txids of the removal transactions if successful.\n     */\n    async remove(key) {\n        const lockQueue = await this.queueOperationOnKey(key);\n        try {\n            const txids = [];\n            for (;;) {\n                const { outputs, BEEF: inputBEEF, totalOutputs } = await this.getOutputs(key);\n                if (outputs.length > 0) {\n                    const pushdrop = new PushDrop(this.wallet, this.originator);\n                    try {\n                        const inputs = this.getInputs(outputs);\n                        const { signableTransaction } = await this.wallet.createAction({\n                            description: `Remove ${key} in ${this.context}`,\n                            inputBEEF,\n                            inputs,\n                            options: {\n                                acceptDelayedBroadcast: this.acceptDelayedBroadcast\n                            }\n                        });\n                        if (typeof signableTransaction !== 'object') {\n                            throw new Error('Wallet did not return a signable transaction when expected.');\n                        }\n                        const spends = await this.getSpends(key, outputs, pushdrop, signableTransaction.tx);\n                        const { txid } = await this.wallet.signAction({\n                            reference: signableTransaction.reference,\n                            spends\n                        });\n                        if (txid === undefined) {\n                            throw new Error('signAction must return a valid txid');\n                        }\n                        txids.push(txid);\n                    }\n                    catch (_) {\n                        throw new Error(`There are ${totalOutputs} outputs with tag ${key} that cannot be unlocked.`);\n                    }\n                }\n                if (outputs.length === totalOutputs) {\n                    break;\n                }\n            }\n            return txids;\n        }\n        finally {\n            this.finishOperationOnKey(key, lockQueue);\n        }\n    }\n}\n//# sourceMappingURL=LocalKVStore.js.map"],"names":["e","Object","Symbol","BigInt","Number","t","Array","Math","parseInt","isNaN","Error","r","i","n","s","a","Uint8Array","ArrayBuffer","DataView","TextEncoder","l","o","Uint32Array","require","Buffer","String","c","Map","JSON","self","Set","p","Promise","window","Blob","d","h","Date","fetch","document","URL","console","setTimeout","clearTimeout","Response","Headers","setInterval","FormData","URLSearchParams","ReadableStream"],"mappings":"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hB,GAAK,EAAI,CAAC,EAEV,EAAI,IAAO,EAAK,GAChB,GAAK,EAAI,CAAC,EAEd,EAAG,MAAM,CAAC,GACV,EAAG,MAAM,CAAC,EACd,CACA,OAAO,CACX,CACA,OAAO,eAAe,CAAG,CAAE,CAAI,CAAE,CAAQ,CAAE,CACvC,IAAM,EAAM,IAAM,CAClB,GAAI,SAAS,CAAC,EAAK,CAAG,WAElB,OADU,AAAc,SAAd,IAAI,CAAC,EAAI,CAAiB,IAAI,CAAC,EAAI,CAAI,IAAI,CAAC,EAAI,CAAG,EAAS,IAAI,CAAC,IAAI,CAEnF,CACJ,CACA,OAAO,WAAW,CAAK,CAAE,CACrB,MAAO,AAAiB,UAAjB,OAAO,EAAqB,GAAQ,EAAO,OAAS,CAC/D,CACA,OAAO,UAAU,CAAK,CAAE,CACpB,OAAO,IAAI,EAAU,EAAO,MAAO,KACvC,CACA,aAAc,CACV,GAAI,AAAuB,SAAhB,EACP,OAAO,EAIP,EAAc,IAAI,CA8wBtB,IAAM,EAAO,CACT,MAAO,OACP,EAAG,0EACH,EAAG,IACH,EAAG,IACH,EAAG,0EACH,EAAG,IAEH,KAAM,mEACN,OAAQ,mEACR,MAAO,CACH,CACI,EAAG,mCACH,EAAG,mCACP,EACA,CACI,EAAG,oCACH,EAAG,kCACP,EACH,CACD,KAAM,GACN,EAAG,CACC,mEACA,mEAnyBY,CAChB,QAAS,CACL,KAAM,EACN,OAAQ,CACJ,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,iEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACJ,AACL,EACA,IAAK,CACD,IAAK,EACL,OAAQ,CACJ,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,iEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,kEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,kEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH,CACD,CACI,mEACA,mEACH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,IAAI,CAAC,SAAS,EACpB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KACzB,OAAO,EAGZ,OAAM,AAAIF,MAAM,sCAExB,CAMA,WAAY,CACR,OAAO,IAAI,CAAC,eAAe,GAAK,IAAI,CAAC,SAAS,CAAC,OAAO,AAC1D,CACJ,CChUO,IAAM,GAAW,CACpB,MAAO,CACH,UACA,UACA,OACA,QACA,QACA,SACA,SACA,WACA,SACA,QACA,SACA,WACA,UACA,SACA,UACA,OACA,WACA,UACA,SACA,MACA,SACA,QACA,UACA,SACA,QACA,MACA,SACA,UACA,SACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,SACA,QACA,MACA,QACA,QACA,QACA,MACA,MACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,QACA,SACA,QACA,QACA,UACA,OACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,UACA,MACA,QACA,UACA,SACA,QACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,MACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,QACA,MACA,WACA,SACA,UACA,MACA,SACA,UACA,QACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,QACA,SACA,OACA,SACA,OACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,OACA,OACA,WACA,QACA,QACA,MACA,UACA,UACA,OACA,SACA,SACA,SACA,MACA,SACA,UACA,SACA,OACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,OACA,SACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,SACA,UACA,MACA,OACA,OACA,UACA,OACA,QACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,SACA,SACA,MACA,MACA,UACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,MACA,WACA,OACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,MACA,SACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,UACA,QACA,WACA,SACA,SACA,QACA,UACA,OACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,WACA,SACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,OACA,QACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,QACA,MACA,UACA,OACA,UACA,MACA,WACA,UACA,UACA,UACA,QACA,UACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,SACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,OACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,SACA,SACA,OACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,OACA,UACA,QACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,SACA,WACA,SACA,OACA,WACA,WACA,UACA,OACA,UACA,WACA,UACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,MACA,OACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,OACA,UACA,UACA,OACA,OACA,UACA,SACA,MACA,QACA,SACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,SACA,QACA,MACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,WACA,UACA,QACA,QACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,OACA,QACA,SACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,MACA,UACA,SACA,OACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,SACA,MACA,QACA,UACA,OACA,UACA,MACA,QACA,SACA,UACA,QACA,WACA,UACA,WACA,UACA,MACA,OACA,OACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,QACA,SACA,OACA,MACA,UACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,MACA,OACA,QACA,MACA,OACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,UACA,SACA,SACA,QACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,OACA,SACA,SACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,SACA,QACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,OACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,MACA,MACA,QACA,OACA,OACA,SACA,UACA,OACA,QACA,SACA,OACA,QACA,UACA,MACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,WACA,SACA,QACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,OACA,MACA,OACA,UACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,QACA,WACA,OACA,QACA,OACA,QACA,MACA,OACA,QACA,SACA,QACA,UACA,SACA,OACA,SACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,WACA,OACA,SACA,MACA,UACA,UACA,QACA,UACA,UACA,SACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,WACA,QACA,WACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,MACA,OACA,UACA,QACA,QACA,QACA,MACA,OACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,OACA,OACA,WACA,OACA,OACA,UACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,MACA,UACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,OACA,OACA,WACA,SACA,QACA,QACA,QACA,QACA,UACA,OACA,MACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,UACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,QACA,OACA,QACA,SACA,OACA,OACA,UACA,OACA,SACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,MACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,OACA,OACA,SACA,QACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,SACA,WACA,OACA,UACA,QACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,UACA,MACA,QACA,UACA,SACA,QACA,SACA,MACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,WACA,SACA,SACA,QACA,WACA,QACA,OACA,QACA,OACA,SACA,OACA,WACA,SACA,SACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,WACA,UACA,UACA,SACA,QACA,OACA,MACA,UACA,UACA,QACA,OACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,UACA,OACA,UACA,SACA,QACA,MACA,UACA,SACA,QACA,MACA,MACA,OACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,QACA,MACA,OACA,MACA,QACA,UACA,OACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,QACA,SACA,WACA,SACA,UACA,QACA,UACA,QACA,SACA,UACA,OACA,OACA,OACA,MACA,QACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,SACA,UACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,MACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,QACA,MACA,SACA,OACA,QACA,OACA,UACA,OACA,SACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,WACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,SACA,OACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,UACA,QACA,SACA,SACA,UACA,WACA,WACA,QACA,QACA,SACA,SACA,QACA,MACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,SACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,UACA,MACA,UACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,OACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,QACA,UACA,QACA,WACA,QACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,SACA,UACA,WACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,SACA,SACA,SACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,SACA,UACA,OACA,SACA,SACA,QACA,UACA,OACA,SACA,MACA,QACA,SACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,WACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,SACA,UACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,QACA,SACA,QACA,QACA,UACA,SACA,OACA,QACA,OACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,QACA,UACA,QACA,UACA,MACA,WACA,SACA,QACA,SACA,WACA,OACA,SACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,UACA,WACA,OACA,QACA,UACA,SACA,QACA,OACA,MACA,QACA,QACA,UACA,SACA,QACA,WACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,UACA,QACA,OACA,QACA,UACA,QACA,QACA,MACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,WACA,SACA,UACA,QACA,UACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,OACA,WACA,UACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,OACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,UACA,QACA,UACA,SACA,SACA,QACA,QACA,SACA,QACA,MACA,SACA,QACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,OACA,SACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,UACA,UACA,SACA,UACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,OACA,QACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,OACA,MACH,CACD,MAAO,GACX,CCv/De,OAAM,GACjB,QAAS,AACT,KAAK,AACL,SAAS,AAOT,aAAY,CAAQ,CAAE,CAAI,CAAE,EAAW,EAAQ,CAAE,CAC7C,IAAI,CAAC,QAAQ,CAAG,GAAY,GAC5B,IAAI,CAAC,IAAI,CAAG,GAAQ,EAAE,CACtB,IAAI,CAAC,QAAQ,CAAG,CACpB,CAKA,UAAW,CACP,IAAM,EAAK,IAAI,GACf,GAAI,AAAkB,KAAlB,IAAI,CAAC,QAAQ,CAAS,CACtB,IAAM,EAAM,GAAQ,IAAI,CAAC,QAAQ,CAAE,QACnC,EAAG,cAAc,CAAC,EAAI,MAAM,EAC5B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"}