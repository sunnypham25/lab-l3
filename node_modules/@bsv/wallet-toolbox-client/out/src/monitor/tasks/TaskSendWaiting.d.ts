import { TableProvenTxReq } from '../../storage/index.client';
import { Monitor } from '../Monitor';
import { WalletMonitorTask } from './WalletMonitorTask';
export declare class TaskSendWaiting extends WalletMonitorTask {
    triggerMsecs: number;
    agedMsecs: number;
    sendingMsecs: number;
    static taskName: string;
    lastSendingRunMsecsSinceEpoch: number | undefined;
    includeSending: boolean;
    constructor(monitor: Monitor, triggerMsecs?: number, agedMsecs?: number, sendingMsecs?: number);
    trigger(nowMsecsSinceEpoch: number): {
        run: boolean;
    };
    runTask(): Promise<string>;
    /**
     * Process an array of 'unsent' status table.ProvenTxReq
     *
     * Send rawTx to transaction processor(s), requesting proof callbacks when possible.
     *
     * Set status 'invalid' if req is invalid.
     *
     * Set status to 'callback' on successful network submission with callback service.
     *
     * Set status to 'unmined' on successful network submission without callback service.
     *
     * Add mapi responses to database table if received.
     *
     * Increments attempts if sending was attempted.
     *
     * @param reqApis
     */
    processUnsent(reqApis: TableProvenTxReq[], indent?: number): Promise<string>;
}
//# sourceMappingURL=TaskSendWaiting.d.ts.map