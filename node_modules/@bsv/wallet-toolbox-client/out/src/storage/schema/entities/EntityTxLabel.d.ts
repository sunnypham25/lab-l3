import { sdk, TableTxLabel } from '../../../index.client';
import { EntityBase, EntityStorage, SyncMap } from '.';
export declare class EntityTxLabel extends EntityBase<TableTxLabel> {
    constructor(api?: TableTxLabel);
    updateApi(): void;
    get txLabelId(): number;
    set txLabelId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get label(): string;
    set label(v: string);
    get userId(): number;
    set userId(v: number);
    get isDeleted(): boolean;
    set isDeleted(v: boolean);
    get id(): number;
    set id(v: number);
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableTxLabel, syncMap?: SyncMap): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableTxLabel, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<{
        found: boolean;
        eo: EntityTxLabel;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableTxLabel, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityTxLabel.d.ts.map