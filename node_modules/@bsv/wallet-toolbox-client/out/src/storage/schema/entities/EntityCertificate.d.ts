import { sdk, TableCertificate } from '../../../index.client';
import { EntityBase, EntityStorage, SyncMap } from '.';
export declare class EntityCertificate extends EntityBase<TableCertificate> {
    constructor(api?: TableCertificate);
    updateApi(): void;
    get certificateId(): number;
    set certificateId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get userId(): number;
    set userId(v: number);
    get type(): string;
    set type(v: string);
    get subject(): string;
    set subject(v: string);
    get verifier(): string | undefined;
    set verifier(v: string | undefined);
    get serialNumber(): string;
    set serialNumber(v: string);
    get certifier(): string;
    set certifier(v: string);
    get revocationOutpoint(): string;
    set revocationOutpoint(v: string);
    get signature(): string;
    set signature(v: string);
    get isDeleted(): boolean;
    set isDeleted(v: boolean);
    get id(): number;
    set id(v: number);
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableCertificate, syncMap?: SyncMap): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableCertificate, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<{
        found: boolean;
        eo: EntityCertificate;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableCertificate, syncMap: SyncMap, trx?: sdk.TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityCertificate.d.ts.map