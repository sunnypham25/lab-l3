/**
 * Returns the byte size required to encode number as Bitcoin VarUint
 * @publicbody
 */
export declare function varUintSize(val: number): 1 | 3 | 5 | 9;
/**
 * @param scriptSize byte length of input script
 * @returns serialized byte length a transaction input
 */
export declare function transactionInputSize(scriptSize: number): number;
/**
 * @param scriptSize byte length of output script
 * @returns serialized byte length a transaction output
 */
export declare function transactionOutputSize(scriptSize: number): number;
/**
 * Compute the serialized binary transaction size in bytes
 * given the number of inputs and outputs,
 * and the size of each script.
 * @param inputs array of input script lengths, in bytes
 * @param outputs array of output script lengths, in bytes
 * @returns total transaction size in bytes
 */
export declare function transactionSize(inputs: number[], outputs: number[]): number;
//# sourceMappingURL=utils.d.ts.map