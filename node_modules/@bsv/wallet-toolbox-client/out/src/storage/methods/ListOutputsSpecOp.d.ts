import { ListOutputsResult } from '@bsv/sdk';
import { StorageProvider, TableOutput } from '../index.client';
import { sdk } from '../../index.client';
import { ValidListOutputsArgs } from '../../sdk/validationHelpers';
export interface ListOutputsSpecOp {
    name: string;
    useBasket?: string;
    ignoreLimit?: boolean;
    includeOutputScripts?: boolean;
    includeSpent?: boolean;
    resultFromTags?: (s: StorageProvider, auth: sdk.AuthId, vargs: ValidListOutputsArgs, specOpTags: string[]) => Promise<ListOutputsResult>;
    resultFromOutputs?: (s: StorageProvider, auth: sdk.AuthId, vargs: ValidListOutputsArgs, specOpTags: string[], outputs: TableOutput[]) => Promise<ListOutputsResult>;
    filterOutputs?: (s: StorageProvider, auth: sdk.AuthId, vargs: ValidListOutputsArgs, specOpTags: string[], outputs: TableOutput[]) => Promise<TableOutput[]>;
    /**
     * undefined to intercept no tags from vargs,
     * empty array to intercept all tags,
     * or an explicit array of tags to intercept.
     */
    tagsToIntercept?: string[];
    /**
     * How many positional tags to intercept.
     */
    tagsParamsCount?: number;
}
export declare const getBasketToSpecOp: () => Record<string, ListOutputsSpecOp>;
//# sourceMappingURL=ListOutputsSpecOp.d.ts.map