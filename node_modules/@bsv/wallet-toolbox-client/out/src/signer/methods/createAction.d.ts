import { AtomicBEEF, CreateActionResult, OutpointString, SendWithResult, SignableTransaction, TXIDHexString } from '@bsv/sdk';
import { Script } from '@bsv/sdk';
import { PendingSignAction, sdk, Wallet } from '../../index.client';
import { ReviewActionResult } from '../../sdk/WalletStorage.interfaces';
export interface CreateActionResultX extends CreateActionResult {
    txid?: TXIDHexString;
    tx?: AtomicBEEF;
    noSendChange?: OutpointString[];
    sendWithResults?: SendWithResult[];
    signableTransaction?: SignableTransaction;
    notDelayedResults?: ReviewActionResult[];
}
export declare function createAction(wallet: Wallet, auth: sdk.AuthId, vargs: sdk.ValidCreateActionArgs): Promise<CreateActionResultX>;
/**
 * Derive a change output locking script
 */
export declare function makeChangeLock(out: sdk.StorageCreateTransactionSdkOutput, dctr: sdk.StorageCreateActionResult, args: sdk.ValidCreateActionArgs, changeKeys: sdk.KeyPair, wallet: Wallet): Script;
export declare function processAction(prior: PendingSignAction | undefined, wallet: Wallet, auth: sdk.AuthId, vargs: sdk.ValidProcessActionArgs): Promise<sdk.StorageProcessActionResults>;
//# sourceMappingURL=createAction.d.ts.map