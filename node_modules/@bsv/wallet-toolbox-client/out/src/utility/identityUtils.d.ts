import { LookupAnswer, VerifiableCertificate, LookupResolver, DiscoverCertificatesResult, IdentityCertificate, IdentityCertifier, Base64String } from '@bsv/sdk';
import { TrustSettings } from '../WalletSettingsManager';
export interface ExtendedVerifiableCertificate extends IdentityCertificate {
    certifierInfo: IdentityCertifier;
    publiclyRevealedKeyring: Record<string, Base64String>;
}
/**
 * Transforms an array of VerifiableCertificate instances according to the trust settings.
 * Only certificates whose grouped total trust meets the threshold are returned,
 * and each certificate is augmented with a certifierInfo property.
 *
 * @param trustSettings - the user's trust settings including trustLevel and trusted certifiers.
 * @param certificates - an array of VerifiableCertificate objects.
 * @returns a DiscoverCertificatesResult with totalCertificates and ordered certificates.
 */
export declare const transformVerifiableCertificatesWithTrust: (trustSettings: TrustSettings, certificates: VerifiableCertificate[]) => DiscoverCertificatesResult;
/**
 * Performs an identity overlay service lookup query and returns the parsed results
 *
 * @param query
 * @returns
 */
export declare const queryOverlay: (query: unknown, resolver: LookupResolver) => Promise<VerifiableCertificate[]>;
/**
 * Internal func: Parse the returned UTXOs Decrypt and verify the certificates and signatures Return the set of identity keys, certificates and decrypted certificate fields
 *
 * @param {Output[]} outputs
 * @returns {Promise<VerifiableCertificate[]>}
 */
export declare const parseResults: (lookupResult: LookupAnswer) => Promise<VerifiableCertificate[]>;
//# sourceMappingURL=identityUtils.d.ts.map