/**
 * Coerce a value to Buffer if currently encoded as a string or
 * @param val Buffer or string or number[]. If string, encoding param applies. If number[], Buffer.from constructor is used.
 * @param encoding defaults to 'hex'. Only applies to val of type string
 * @returns input val if it is a Buffer or new Buffer from string val
 * @publicbody
 */
export declare function asBuffer(val: Buffer | string | number[], encoding?: BufferEncoding): Buffer;
/**
 * Coerce a value to an encoded string if currently a Buffer or number[]
 * @param val Buffer or string or number[]. If string, encoding param applies. If number[], Buffer.from constructor is used.
 * @param encoding defaults to 'hex'
 * @returns input val if it is a string; or if number[], first converted to Buffer then as Buffer; if Buffer encoded using `encoding`
 * @publicbody
 */
export declare function asString(val: Buffer | string | number[], encoding?: BufferEncoding): string;
export declare function asArray(val: Buffer | string | number[], encoding?: BufferEncoding): number[];
//# sourceMappingURL=utilityHelpers.buffer.d.ts.map