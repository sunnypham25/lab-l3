"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultWalletServicesOptions = createDefaultWalletServicesOptions;
exports.arcDefaultUrl = arcDefaultUrl;
exports.arcGorillaPoolUrl = arcGorillaPoolUrl;
const index_client_1 = require("../index.client");
const chaintracker_1 = require("./chaintracker");
function createDefaultWalletServicesOptions(chain, arcCallbackUrl, arcCallbackToken, arcApiKey) {
    const deploymentId = `wallet-toolbox-${(0, index_client_1.randomBytesHex)(16)}`;
    const taalApiKey = arcApiKey || chain === 'main'
        ? 'mainnet_9596de07e92300c6287e4393594ae39c' // no plan
        : 'testnet_0e6cf72133b43ea2d7861da2a38684e3'; // personal "starter" key
    const o = {
        chain,
        taalApiKey,
        bsvExchangeRate: {
            timestamp: new Date('2023-12-13'),
            base: 'USD',
            rate: 47.52
        },
        bsvUpdateMsecs: 1000 * 60 * 15, // 15 minutes
        fiatExchangeRates: {
            timestamp: new Date('2023-12-13'),
            base: 'USD',
            rates: {
                USD: 1,
                GBP: 0.8,
                EUR: 0.93
            }
        },
        fiatUpdateMsecs: 1000 * 60 * 60 * 24, // 24 hours
        disableMapiCallback: true, // Rely on WalletMonitor by default.
        exchangeratesapiKey: 'bd539d2ff492bcb5619d5f27726a766f',
        chaintracksFiatExchangeRatesUrl: `https://npm-registry.babbage.systems:${chain === 'main' ? 8084 : 8083}/getFiatExchangeRates`,
        chaintracks: new chaintracker_1.ChaintracksServiceClient(chain, `https://npm-registry.babbage.systems:${chain === 'main' ? 8084 : 8083}`),
        arcUrl: arcDefaultUrl(chain),
        arcConfig: {
            apiKey: arcApiKey !== null && arcApiKey !== void 0 ? arcApiKey : undefined,
            deploymentId,
            callbackUrl: arcCallbackUrl !== null && arcCallbackUrl !== void 0 ? arcCallbackUrl : undefined,
            callbackToken: arcCallbackToken !== null && arcCallbackToken !== void 0 ? arcCallbackToken : undefined
        },
        arcGorillaPoolUrl: arcGorillaPoolUrl(chain),
        arcGorillaPoolConfig: {
            apiKey: arcApiKey !== null && arcApiKey !== void 0 ? arcApiKey : undefined,
            deploymentId,
            callbackUrl: arcCallbackUrl !== null && arcCallbackUrl !== void 0 ? arcCallbackUrl : undefined,
            callbackToken: arcCallbackToken !== null && arcCallbackToken !== void 0 ? arcCallbackToken : undefined
        }
    };
    return o;
}
function arcDefaultUrl(chain) {
    const url = chain === 'main' ? 'https://arc.taal.com' : 'https://arc-test.taal.com';
    return url;
}
function arcGorillaPoolUrl(chain) {
    const url = chain === 'main' ? 'https://arc.gorillapool.io' : undefined;
    return url;
}
//# sourceMappingURL=createDefaultWalletServicesOptions.js.map