import { AuthMessage, Transport } from '../types.js';
/**
 * Implements an HTTP-specific transport for handling Peer mutual authentication messages.
 * This class integrates with fetch to send and receive authenticated messages between peers.
 */
export declare class SimplifiedFetchTransport implements Transport {
    private onDataCallback?;
    fetchClient: typeof fetch;
    baseUrl: string;
    /**
     * Constructs a new instance of SimplifiedFetchTransport.
     * @param baseUrl - The base URL for all HTTP requests made by this transport.
     * @param fetchClient - A fetch implementation to use for HTTP requests (default: global fetch).
     */
    constructor(baseUrl: string, fetchClient?: any);
    /**
     * Sends a message to an HTTP server using the transport mechanism.
     * Handles both general and authenticated message types. For general messages,
     * the payload is deserialized and sent as an HTTP request. For other message types,
     * the message is sent as a POST request to the `/auth` endpoint.
     *
     * @param message - The AuthMessage to send.
     * @returns A promise that resolves when the message is successfully sent.
     *
     * @throws Will throw an error if no listener has been registered via `onData`.
     */
    send(message: AuthMessage): Promise<void>;
    /**
     * Registers a callback to handle incoming messages.
     * This must be called before sending any messages to ensure responses can be processed.
     *
     * @param callback - A function to invoke when an incoming AuthMessage is received.
     * @returns A promise that resolves once the callback is set.
     */
    onData(callback: (message: AuthMessage) => Promise<void>): Promise<void>;
    /**
     * Deserializes a request payload from a byte array into an HTTP request-like structure.
     *
     * @param payload - The serialized payload to deserialize.
     * @returns An object representing the deserialized request, including the method,
     *          URL postfix (path and query string), headers, body, and request ID.
     */
    deserializeRequestPayload(payload: number[]): {
        method: string;
        urlPostfix: string;
        headers: Record<string, string>;
        body: number[];
        requestId: string;
    };
}
//# sourceMappingURL=SimplifiedFetchTransport.d.ts.map