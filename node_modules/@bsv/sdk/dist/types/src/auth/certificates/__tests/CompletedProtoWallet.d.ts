import PrivateKey from '../../../primitives/PrivateKey.js';
import { ProtoWallet, WalletInterface, CreateActionResult, SignActionResult, AbortActionResult, ListActionsResult, InternalizeActionResult, ListOutputsResult, RelinquishOutputResult, AcquireCertificateResult, ListCertificatesResult, ProveCertificateResult, RelinquishCertificateResult, DiscoverCertificatesResult, GetHeightResult, GetHeaderResult, KeyDeriverApi, KeyDeriver, GetPublicKeyArgs, PubKeyHex, AuthenticatedResult, GetNetworkResult, GetVersionResult } from '../../../wallet/index.js';
export declare class CompletedProtoWallet extends ProtoWallet implements WalletInterface {
    keyDeriver: KeyDeriver;
    constructor(rootKeyOrKeyDeriver: PrivateKey | 'anyone' | KeyDeriverApi);
    isAuthenticated(): Promise<AuthenticatedResult>;
    waitForAuthentication(): Promise<AuthenticatedResult>;
    getNetwork(): Promise<GetNetworkResult>;
    getVersion(): Promise<GetVersionResult>;
    getPublicKey(args: GetPublicKeyArgs): Promise<{
        publicKey: PubKeyHex;
    }>;
    createAction(): Promise<CreateActionResult>;
    signAction(): Promise<SignActionResult>;
    abortAction(): Promise<AbortActionResult>;
    listActions(): Promise<ListActionsResult>;
    internalizeAction(): Promise<InternalizeActionResult>;
    listOutputs(): Promise<ListOutputsResult>;
    relinquishOutput(): Promise<RelinquishOutputResult>;
    acquireCertificate(): Promise<AcquireCertificateResult>;
    listCertificates(): Promise<ListCertificatesResult>;
    proveCertificate(): Promise<ProveCertificateResult>;
    relinquishCertificate(): Promise<RelinquishCertificateResult>;
    discoverByIdentityKey(): Promise<DiscoverCertificatesResult>;
    discoverByAttributes(): Promise<DiscoverCertificatesResult>;
    getHeight(): Promise<GetHeightResult>;
    getHeaderForHeight(): Promise<GetHeaderResult>;
}
//# sourceMappingURL=CompletedProtoWallet.d.ts.map